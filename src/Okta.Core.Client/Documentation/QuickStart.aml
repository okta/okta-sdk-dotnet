<?xml version="1.0" encoding="utf-8"?>
<topic id="6af60b57-62fa-477c-a899-e2f21286c53d" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>This quick start is designed to outline the basics of the Okta SDK.</para>
    </introduction>

    <prerequisites>
      <content>
        <para>Add the library as a dependency by following the installation instructions</para>
      </content>
    </prerequisites>

    <section>
      <title>Create a Client</title>
      <content>
        <para>
          Create an Okta client with an API token and production subdomain (your_subdomain.okta.com). 
          All clients have the same constructor method signatures, so they can be constructed in the same way.
        </para>
        <code language="c#">
          // OktaClient is a convenience client to create other clients
          var oktaClient = new OktaClient("your api token", "your production subdomain");
          var usersClient = oktaClient.GetUsersClient();
          
          // Or create clients directly
          usersClient = new UsersClient("your api token", "your production subdomain");
        </code>
      </content>
    </section>

    <section>
      <title>Create a Client Against Another Environment</title>
      <content>
        <para>
          Connect to another environment (if available) to perform testing without affecting your production instance. 
        </para>
        <code language="c#">
          var oktaClient = new OktaClient("your api token", new Uri("https://your_subdomain.oktapreview.com"));
        </code>
      </content>
    </section>

    <section>
      <title>Create a Client With a Proxy</title>
      <content>
        <para>
          Using OktaSettings, we can use a proxy to connect to Okta.
        </para>
        <code language="c#">
          var handler = new HttpClientHandler()
          {
              Proxy = new WebProxy(new Uri("http://your_proxy")),
              UseProxy = true
          };

          var oktaSettings = new OktaSettings()
          {
              ApiToken = "your api token",
              Subdomain = "your production subdomain",
              CustomHttpHandler = handler
          };

          var oktaClient = new OktaClient(oktaSettings);
        </code>
      </content>
    </section>

    <section>
      <title>CRUD Operations</title>
      <content>
        <para>
          Perform simple CRUD operations in Okta. The User entity is our example, but the concepts extend to most OktaObjects.
        </para>
        <code language="c#">
          var usersClient = new UsersClient("your api token", "your production subdomain");
          
          var user = new User("newuser@example.com", "newuser@example.com", "New", "User");

          // Create and activate the user
          user = usersClient.Add(user);
          
          // Retrieve the user
          user = usersClient.Get("newuser@example.com");
          
          // Update the user's first name
          user.Profile.FirstName = "Old";
          user = usersClient.Update(user);
          
          // Deactivate the user (this is Remove on most OktaObjects)
          usersClient.Deactivate(user);
        </code>
      </content>
    </section>

    <section>
      <title>Enumeration</title>
      <content>
        <para>
          Loop through a list of OktaObjects.
        </para>
        <code language="c#">
          var usersClient = new UsersClient("your api token", "your production subdomain");

          for(var user in usersClient)
          {
              // Do something with each user
          }
        </code>
      </content>
    </section>

    <section>
      <title>Paged Enumeration</title>
      <content>
        <para>
          Loop through a list of OktaObjects while controlling pagination.
        </para>
        <code language="c#">
          var usersClient = new UsersClient("your api token", "your production subdomain");

          // Loop through pages, 100 users at a time
          Uri nextPage = null;
          PagedResults&lt;User&gt; users;

          do
          {
              users = usersClient.GetList(pageSize: 100, nextPage: nextPage);

              foreach (var user in users.Results)
              {
                  // Do something with each user
              }

              nextPage = users.NextPage;
          }
          while (!users.IsLastPage);
        </code>
      </content>
    </section>

    <section>
      <title>Filtered Enumeration</title>
      <content>
        <para>
          Loop through a list of OktaObjects with a filter applied.
        </para>
        <code language="c#">
          var usersClient = new UsersClient("your api token", "your production subdomain");
          
          var filter = new FilterBuilder()
                          .Where(Filters.User.Status)
                          .EqualTo(UserStatus.Active)
                          .And()
                          .Where(Filters.User.LastUpdated)
                          .GreaterThanOrEqual(new DateTime(2014, 1, 1));

          foreach (User user in usersClient.GetFilteredEnumerator(filter))
          {
              // Do something with each user
          }
        </code>
      </content>
    </section>

    <section>
      <title>Get Custom Properties</title>
      <content>
        <para>
          Universal Directory enables the ability to add properties that aren't mapped to an object.
        </para>
        <code language="c#">
          var usersClient = new UsersClient("your api token", "your production subdomain");

          var user = usersClient.Get("user_with_custom_attributes@your_org.com");
          
          string custom = user.GetProperty("custom_attribute");
          
          user.SetProperty("custom_attribute", "new_value");
        </code>
      </content>
    </section>
    <!-- Optional next steps info
    <nextSteps>
      <content><para>Next steps info goes here</para></content>
    </nextSteps>
    -->

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
