/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.Net;
using Xunit;
using System.Threading.Tasks;
using FluentAssertions;
using Okta.Sdk.UnitTest.Internal;
using Okta.Sdk.Api;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.UnitTest.Api
{
    /// <summary>
    ///  Class for testing GroupApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GroupApiTests
    {
        [Fact]
        public async Task ListApplicationTargetsForApplicationAdministratorRoleForGroup()
        {
            var rawResponse = @"[
                                    {
                                        ""name"": ""facebook"",
                                        ""displayName"": ""Facebook"",
                                        ""description"": ""Description"",
                                        ""status"": ""ACTIVE"",
                                        ""lastUpdated"": ""2017-07-19T23:37:37.000Z"",
                                        ""category"": ""SOCIAL"",
                                        ""verificationStatus"": ""OKTA_VERIFIED"",
                                        ""website"": ""http://www.facebook.com"",
                                        ""signOnModes"": [
                                            ""BROWSER_PLUGIN""
                                        ],
                                        ""_links"": {
                                            ""logo"": [
                                                {
                                                    ""name"": ""medium"",
                                                    ""href"": ""http://${yourOktaDomain}/assets/img/logos/facebook.e8215796628b5eaf687ba414ae245659.png"",
                                                    ""type"": ""image/png""
                                                }
                                            ],
                                            ""self"": {
                                                ""href"": ""http://${yourOktaDomain}/api/v1/catalog/apps/facebook""
                                            }
                                        }
                                    },
                                    {
                                        ""name"": ""24 Seven Office 0"",
                                        ""status"": ""ACTIVE"",
                                        ""id"": ""0oasrudLtMlzAsTxk0g3"",
                                        ""_links"": {
                                            ""self"": {
                                                ""href"": ""http://${yourOktaDomain}/api/v1/apps/0oasrudLtMlzAsTxk0g3""
                                            }
                                        }
                                    }
                                ]";

            var mockClient = new MockAsyncClient(rawResponse, HttpStatusCode.OK);
            var roleTargetApi = new RoleTargetApi(mockClient, new Configuration { BasePath = "https://foo.com" });

            var apps = await roleTargetApi.ListApplicationTargetsForApplicationAdministratorRoleForGroup("foo", "bar")
                .ToListAsync();

            mockClient.ReceivedPath.Should().StartWith("/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps");
            mockClient.ReceivedPathParams["groupId"].Should().Contain("foo");
            mockClient.ReceivedPathParams["roleId"].Should().Contain("bar");

            

            apps.Should().NotBeNullOrEmpty();
            apps.Should().HaveCount(2);
            apps.FirstOrDefault().Name.Should().Be("facebook");
            apps.FirstOrDefault().Status.Value.Should().Be("ACTIVE");
            apps.FirstOrDefault().Id.Should().BeNullOrEmpty();
            apps.FirstOrDefault().Description.Should().Be("Description");
            apps.FirstOrDefault().DisplayName.Should().Be("Facebook");
            apps.FirstOrDefault().Category.Should().Be("SOCIAL");
            apps.FirstOrDefault().VerificationStatus.Should().Be("OKTA_VERIFIED");
            apps.FirstOrDefault().Website.Should().Be("http://www.facebook.com");
            apps.FirstOrDefault().SignOnModes.Should().Contain("BROWSER_PLUGIN");

            apps[1].Name.Should().Be("24 Seven Office 0");
            apps[1].Status.Value.Should().Be("ACTIVE");
            apps[1].Id.Should().Be("0oasrudLtMlzAsTxk0g3");
        }

        [Fact]
        public async Task AddApplicationTargetToAdminRoleGivenToGroup()
        {
       
            var mockClient = new MockAsyncClient(String.Empty, HttpStatusCode.OK);
            var roleTargetApi = new RoleTargetApi(mockClient, new Configuration { BasePath = "https://foo.com" });

            await roleTargetApi.AddApplicationTargetToAdminRoleGivenToGroupAsync("foo", "bar", "baz");

            mockClient.ReceivedPath.Should().StartWith("/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}");
            mockClient.ReceivedPathParams["groupId"].Should().Contain("foo");
            mockClient.ReceivedPathParams["roleId"].Should().Contain("bar");
            mockClient.ReceivedPathParams["appName"].Should().Contain("baz");
        }

        [Fact]
        public async Task AddApplicationInstanceTargetToAppAdminRoleGivenToGroup()
        {
            var mockClient = new MockAsyncClient(String.Empty, HttpStatusCode.NoContent);
            var roleTargetApi = new RoleTargetApi(mockClient, new Configuration { BasePath = "https://foo.com" });


            await roleTargetApi.AddApplicationInstanceTargetToAppAdminRoleGivenToGroupAsync("foo", "bar", "baz", "bax");
            
            mockClient.ReceivedPath.Should().StartWith("/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}");
            mockClient.ReceivedPathParams["groupId"].Should().Contain("foo");
            mockClient.ReceivedPathParams["roleId"].Should().Contain("bar");
            mockClient.ReceivedPathParams["appName"].Should().Contain("baz");
            mockClient.ReceivedPathParams["applicationId"].Should().Contain("bax");

        }

        [Fact]
        public async Task RemoveApplicationTargetFromAdministratorRoleGivenToGroup()
        {
            var mockClient = new MockAsyncClient(String.Empty, HttpStatusCode.NoContent);
            var roleTargetApi = new RoleTargetApi(mockClient, new Configuration { BasePath = "https://foo.com" });

            await roleTargetApi.RemoveApplicationTargetFromAdministratorRoleGivenToGroupAsync("foo", "bar", "baz", "bax");

            mockClient.ReceivedPath.Should().StartWith("/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}");
            mockClient.ReceivedPathParams["groupId"].Should().Contain("foo");
            mockClient.ReceivedPathParams["roleId"].Should().Contain("bar");
            mockClient.ReceivedPathParams["appName"].Should().Contain("baz");
            mockClient.ReceivedPathParams["applicationId"].Should().Contain("bax");
        }

        [Fact]
        public async Task RemoveApplicationTargetFromApplicationAdministratorRoleGivenToGroup()
        {
            var mockClient = new MockAsyncClient(String.Empty, HttpStatusCode.NoContent);
            var roleTargetApi = new RoleTargetApi(mockClient, new Configuration { BasePath = "https://foo.com" });

            await roleTargetApi.RemoveApplicationTargetFromApplicationAdministratorRoleGivenToGroupAsync("foo", "bar", "baz");

            mockClient.ReceivedPath.Should().StartWith("/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}");
            mockClient.ReceivedPathParams["groupId"].Should().Contain("foo");
            mockClient.ReceivedPathParams["roleId"].Should().Contain("bar");
            mockClient.ReceivedPathParams["appName"].Should().Contain("baz");
        }
    }
}
