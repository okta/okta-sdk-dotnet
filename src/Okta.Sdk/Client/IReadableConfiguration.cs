/*
 * Okta Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Net;
using System.Security.Cryptography.X509Certificates;

namespace Okta.Sdk.Client
{
    /// <summary>
    /// Represents a readable-only configuration contract.
    /// </summary>
    public interface IReadableConfiguration
    {
        /// <summary>
        /// Gets the access token.
        /// </summary>
        /// <value>Access token.</value>
        string AccessToken { get; }
        
        /// <summary>
        /// Gets the API token.
        /// </summary>
        /// <value>API token.</value>
        string Token { get; }

        /// <summary>
        /// Gets the API key.
        /// </summary>
        /// <value>API key.</value>
        IDictionary<string, string> ApiKey { get; }

        /// <summary>
        /// Gets the API key prefix.
        /// </summary>
        /// <value>API key prefix.</value>
        IDictionary<string, string> ApiKeyPrefix { get; }

        /// <summary>
        /// Gets the org URL.
        /// </summary>
        /// <value>Okta domain.</value>
        string OktaDomain { get; }
        
        /// <summary>
        /// Gets the value of the DisableHttpsCheck flag.
        /// </summary>
        /// <value>Okta domain.</value>
        bool DisableHttpsCheck { get; }

        /// <summary>
        /// Gets the authorization mode.
        /// </summary>
        AuthorizationMode? AuthorizationMode { get; }

        /// <summary>
        /// Gets the private key. Required when AuthorizationMode is equal to PrivateKey.
        /// </summary>
        JsonWebKeyConfiguration PrivateKey { get; }

        /// <summary>
        /// Gets the client id. Required when AuthorizationMode is equal to PrivateKey.
        /// </summary>
        string ClientId { get; }

        /// <summary>
        /// Gets the Okta scopes
        /// </summary>
        HashSet<string> Scopes { get; }

        /// <summary>
        /// Gets the date time format.
        /// </summary>
        /// <value>Date time format.</value>
        string DateTimeFormat { get; }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <value>Default header.</value>
        [Obsolete("Use DefaultHeaders instead.")]
        IDictionary<string, string> DefaultHeader { get; }

        /// <summary>
        /// Gets the default headers.
        /// </summary>
        /// <value>Default headers.</value>
        IDictionary<string, string> DefaultHeaders { get; }

        /// <summary>
        /// Gets the temp folder path.
        /// </summary>
        /// <value>Temp folder path.</value>
        string TempFolderPath { get; }

        /// <summary>
        /// Gets the HTTP connection timeout (in milliseconds)
        /// </summary>
        /// <value>HTTP connection timeout.</value>
        int? ConnectionTimeout { get; }

        /// <summary>
        /// Gets or sets the time to waiting time for the client to resolve the request (includes retries). Less than or equal to 0 means "no timeout".
        /// </summary>
        /// <value>
        /// The request timeout in milliseconds.
        /// </value>
        int? RequestTimeout { get; }

        /// <summary>
        /// Gets or sets the number of times to retry
        /// </summary>
        /// <value>
        /// The number of times to retry
        /// </value>
        int? MaxRetries { get; }
        
        /// <summary>
        /// Gets the optional proxy configuration to use for HTTP connections. If <c>null</c>, the default system proxy is used, if any.
        /// </summary>
        /// <value>
        /// The proxy to use for HTTP connections.
        /// </value>
        ProxyConfiguration Proxy { get; }
        
        /// <summary>
        /// Gets the user agent.
        /// </summary>
        /// <value>User agent.</value>
        string UserAgent { get; }

        /// <summary>
        /// Gets the username.
        /// </summary>
        /// <value>Username.</value>
        string Username { get; }

        /// <summary>
        /// Gets the password.
        /// </summary>
        /// <value>Password.</value>
        string Password { get; }

        /// <summary>
        /// Gets the API key with prefix.
        /// </summary>
        /// <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
        /// <returns>API key with prefix.</returns>
        string GetApiKeyWithPrefix(string apiKeyIdentifier);

        /// <summary>
        /// Gets certificate collection to be sent with requests.
        /// </summary>
        /// <value>X509 Certificate collection.</value>
        X509CertificateCollection ClientCertificates { get; }
    }
}
