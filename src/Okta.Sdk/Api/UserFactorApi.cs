/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial interface IUserFactorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Activate a Factor
        /// </summary>
        /// <remarks>
        /// Activates a Factor. Some Factors (&#x60;call&#x60;, &#x60;email&#x60;, &#x60;push&#x60;, &#x60;sms&#x60;, &#x60;token:software:totp&#x60;, &#x60;u2f&#x60;, and &#x60;webauthn&#x60;) require activation to complete the enrollment process.  Okta enforces a rate limit of five activation attempts within five minutes. After a user exceeds the rate limit, Okta returns an error message.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactor</returns>
        System.Threading.Tasks.Task<UserFactor> ActivateFactorAsync(  string userId ,   string factorId ,   UserFactorActivateRequest body = default(UserFactorActivateRequest) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Activate a Factor
        /// </summary>
        /// <remarks>
        /// Activates a Factor. Some Factors (&#x60;call&#x60;, &#x60;email&#x60;, &#x60;push&#x60;, &#x60;sms&#x60;, &#x60;token:software:totp&#x60;, &#x60;u2f&#x60;, and &#x60;webauthn&#x60;) require activation to complete the enrollment process.  Okta enforces a rate limit of five activation attempts within five minutes. After a user exceeds the rate limit, Okta returns an error message.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFactor>> ActivateFactorWithHttpInfoAsync(  string userId ,   string factorId ,   UserFactorActivateRequest body = default(UserFactorActivateRequest) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enroll a Factor
        /// </summary>
        /// <remarks>
        /// Enrolls a supported Factor for the specified user. Some Factor types require a seperate activation to complete the enrollment process. See [Activate a Factor](./#tag/UserFactor/operation/activateFactor).
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="body">Factor</param>
        /// <param name="updatePhone">If &#x60;true&#x60;, indicates you are replacing the currently registered phone number for the specified user. This parameter is ignored if the existing phone number is used by an activated Factor. (optional, default to false)</param>
        /// <param name="templateId">ID of an existing custom SMS template. See the [SMS Templates API](../Template). Only used by &#x60;sms&#x60; Factors. If the provided ID doesn&#39;t exist, the default template is used instead. (optional)</param>
        /// <param name="tokenLifetimeSeconds">Defines how long the token remains valid (optional, default to 300)</param>
        /// <param name="activate">If &#x60;true&#x60;, the &#x60;sms&#x60; Factor is immediately activated as part of the enrollment. An activation text message isn&#39;t sent to the device. (optional, default to false)</param>
        /// <param name="acceptLanguage">An ISO 639-1 two-letter language code that defines a localized message to send. Only used by &#x60;sms&#x60; Factors. If a localized message doesn&#39;t exist or the &#x60;templateId&#x60; is incorrect, the default template is used instead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactor</returns>
        System.Threading.Tasks.Task<UserFactor> EnrollFactorAsync(  string userId ,   UserFactor body ,   bool? updatePhone = default(bool?) ,   string templateId = default(string) ,   int? tokenLifetimeSeconds = default(int?) ,   bool? activate = default(bool?) ,   string acceptLanguage = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enroll a Factor
        /// </summary>
        /// <remarks>
        /// Enrolls a supported Factor for the specified user. Some Factor types require a seperate activation to complete the enrollment process. See [Activate a Factor](./#tag/UserFactor/operation/activateFactor).
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="body">Factor</param>
        /// <param name="updatePhone">If &#x60;true&#x60;, indicates you are replacing the currently registered phone number for the specified user. This parameter is ignored if the existing phone number is used by an activated Factor. (optional, default to false)</param>
        /// <param name="templateId">ID of an existing custom SMS template. See the [SMS Templates API](../Template). Only used by &#x60;sms&#x60; Factors. If the provided ID doesn&#39;t exist, the default template is used instead. (optional)</param>
        /// <param name="tokenLifetimeSeconds">Defines how long the token remains valid (optional, default to 300)</param>
        /// <param name="activate">If &#x60;true&#x60;, the &#x60;sms&#x60; Factor is immediately activated as part of the enrollment. An activation text message isn&#39;t sent to the device. (optional, default to false)</param>
        /// <param name="acceptLanguage">An ISO 639-1 two-letter language code that defines a localized message to send. Only used by &#x60;sms&#x60; Factors. If a localized message doesn&#39;t exist or the &#x60;templateId&#x60; is incorrect, the default template is used instead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFactor>> EnrollFactorWithHttpInfoAsync(  string userId ,   UserFactor body ,   bool? updatePhone = default(bool?) ,   string templateId = default(string) ,   int? tokenLifetimeSeconds = default(int?) ,   bool? activate = default(bool?) ,   string acceptLanguage = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Factor
        /// </summary>
        /// <remarks>
        /// Retrieves an existing Factor for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactor</returns>
        System.Threading.Tasks.Task<UserFactor> GetFactorAsync(  string userId ,   string factorId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Factor
        /// </summary>
        /// <remarks>
        /// Retrieves an existing Factor for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFactor>> GetFactorWithHttpInfoAsync(  string userId ,   string factorId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Factor transaction status
        /// </summary>
        /// <remarks>
        /// Retrieves the status of a &#x60;push&#x60; Factor verification transaction
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="transactionId">ID of an existing Factor verification transaction</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactorPushTransaction</returns>
        System.Threading.Tasks.Task<UserFactorPushTransaction> GetFactorTransactionStatusAsync(  string userId ,   string factorId ,   string transactionId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Factor transaction status
        /// </summary>
        /// <remarks>
        /// Retrieves the status of a &#x60;push&#x60; Factor verification transaction
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="transactionId">ID of an existing Factor verification transaction</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactorPushTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFactorPushTransaction>> GetFactorTransactionStatusWithHttpInfoAsync(  string userId ,   string factorId ,   string transactionId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all enrolled Factors
        /// </summary>
        /// <remarks>
        /// Lists all enrolled Factors for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserFactor&gt;</returns>
        IOktaCollectionClient<UserFactor> ListFactors(  string userId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all enrolled Factors
        /// </summary>
        /// <remarks>
        /// Lists all enrolled Factors for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserFactor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserFactor>>> ListFactorsWithHttpInfoAsync(  string userId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all supported Factors
        /// </summary>
        /// <remarks>
        /// Lists all the supported Factors that can be enrolled for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserFactorSupported&gt;</returns>
        IOktaCollectionClient<UserFactorSupported> ListSupportedFactors(  string userId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all supported Factors
        /// </summary>
        /// <remarks>
        /// Lists all the supported Factors that can be enrolled for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserFactorSupported&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserFactorSupported>>> ListSupportedFactorsWithHttpInfoAsync(  string userId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all supported Security Questions
        /// </summary>
        /// <remarks>
        /// Lists all available Security Questions for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserFactorSecurityQuestionProfile&gt;</returns>
        IOktaCollectionClient<UserFactorSecurityQuestionProfile> ListSupportedSecurityQuestions(  string userId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all supported Security Questions
        /// </summary>
        /// <remarks>
        /// Lists all available Security Questions for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserFactorSecurityQuestionProfile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserFactorSecurityQuestionProfile>>> ListSupportedSecurityQuestionsWithHttpInfoAsync(  string userId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resend a Factor enrollment
        /// </summary>
        /// <remarks>
        /// Resends an &#x60;sms&#x60;, &#x60;call&#x60;, or &#x60;email&#x60; factor challenge as part of an enrollment flow.  For &#x60;call&#x60; and &#x60;sms&#x60; factors, Okta enforces a rate limit of one OTP challenge per device every 30 seconds. You can configure your &#x60;sms&#x60; and &#x60;call&#x60; factors to use a third-party telephony provider. See the [Telephony inline hook reference](https://developer.okta.com/docs/reference/telephony-hook/). Okta round-robins between SMS providers with every resend request to help ensure delivery of an SMS and Call OTPs across different carriers.  &gt; **Note**: Resend operations aren&#39;t allowed after a factor exceeds the activation rate limit. See [Activate a Factor](./#tag/UserFactor/operation/activateFactor).
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="resendUserFactor"></param>
        /// <param name="templateId">ID of an existing custom SMS template. See the [SMS Templates API](../Template). Only used by &#x60;sms&#x60; Factors. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResendUserFactor</returns>
        System.Threading.Tasks.Task<ResendUserFactor> ResendEnrollFactorAsync(  string userId ,   string factorId ,   ResendUserFactor resendUserFactor ,   string templateId = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resend a Factor enrollment
        /// </summary>
        /// <remarks>
        /// Resends an &#x60;sms&#x60;, &#x60;call&#x60;, or &#x60;email&#x60; factor challenge as part of an enrollment flow.  For &#x60;call&#x60; and &#x60;sms&#x60; factors, Okta enforces a rate limit of one OTP challenge per device every 30 seconds. You can configure your &#x60;sms&#x60; and &#x60;call&#x60; factors to use a third-party telephony provider. See the [Telephony inline hook reference](https://developer.okta.com/docs/reference/telephony-hook/). Okta round-robins between SMS providers with every resend request to help ensure delivery of an SMS and Call OTPs across different carriers.  &gt; **Note**: Resend operations aren&#39;t allowed after a factor exceeds the activation rate limit. See [Activate a Factor](./#tag/UserFactor/operation/activateFactor).
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="resendUserFactor"></param>
        /// <param name="templateId">ID of an existing custom SMS template. See the [SMS Templates API](../Template). Only used by &#x60;sms&#x60; Factors. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResendUserFactor)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResendUserFactor>> ResendEnrollFactorWithHttpInfoAsync(  string userId ,   string factorId ,   ResendUserFactor resendUserFactor ,   string templateId = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unenroll a Factor
        /// </summary>
        /// <remarks>
        /// Unenrolls an existing Factor for the specified user. This allows the user to enroll a new Factor.  &gt; **Note**: If you unenroll the &#x60;push&#x60; or the &#x60;signed_nonce&#x60; Factors, Okta also unenrolls any other &#x60;totp&#x60;, &#x60;signed_nonce&#x60;, or Okta Verify &#x60;push&#x60; Factors associated with the user.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="removeRecoveryEnrollment">If &#x60;true&#x60;, removes the the phone number as both a recovery method and a Factor. Only used for &#x60;sms&#x60; and &#x60;call&#x60; Factors. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnenrollFactorAsync(  string userId ,   string factorId ,   bool? removeRecoveryEnrollment = default(bool?) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unenroll a Factor
        /// </summary>
        /// <remarks>
        /// Unenrolls an existing Factor for the specified user. This allows the user to enroll a new Factor.  &gt; **Note**: If you unenroll the &#x60;push&#x60; or the &#x60;signed_nonce&#x60; Factors, Okta also unenrolls any other &#x60;totp&#x60;, &#x60;signed_nonce&#x60;, or Okta Verify &#x60;push&#x60; Factors associated with the user.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="removeRecoveryEnrollment">If &#x60;true&#x60;, removes the the phone number as both a recovery method and a Factor. Only used for &#x60;sms&#x60; and &#x60;call&#x60; Factors. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnenrollFactorWithHttpInfoAsync(  string userId ,   string factorId ,   bool? removeRecoveryEnrollment = default(bool?) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify a Factor
        /// </summary>
        /// <remarks>
        /// Verifies an OTP for a Factor. Some Factors (&#x60;call&#x60;, &#x60;email&#x60;, &#x60;push&#x60;, &#x60;sms&#x60;, &#x60;u2f&#x60;, and &#x60;webauthn&#x60;) must first issue a challenge before you can verify the Factor. Do this by making a request without a body. After a challenge is issued, make another request to verify the Factor.  **Note**: To verify a &#x60;push&#x60; factor, use the **poll** link returned when you issue the challenge. See [Retrieve a Factor Transaction Status](/openapi/okta-management/management/tag/UserFactor/#tag/UserFactor/operation/getFactorTransactionStatus).
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="templateId">ID of an existing custom SMS template. See the [SMS Templates API](../Template). Only used by &#x60;sms&#x60; Factors. (optional)</param>
        /// <param name="tokenLifetimeSeconds">Defines how long the token remains valid (optional, default to 300)</param>
        /// <param name="xForwardedFor">Public IP address for the user agent (optional)</param>
        /// <param name="userAgent">Type of user agent detected when the request is made. Required to verify &#x60;push&#x60; Factors. (optional)</param>
        /// <param name="acceptLanguage">An ISO 639-1 two-letter language code that defines a localized message to send. Only used by &#x60;sms&#x60; Factors. If a localized message doesn&#39;t exist or the &#x60;templateId&#x60; is incorrect, the default template is used instead. (optional)</param>
        /// <param name="body">Some Factors (&#x60;call&#x60;, &#x60;email&#x60;, &#x60;push&#x60;, &#x60;sms&#x60;, &#x60;u2f&#x60;, and &#x60;webauthn&#x60;) must first issue a challenge before you can verify the Factor. Do this by making a request without a body. After a challenge is issued, make another request to verify the Factor. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactorVerifyResponse</returns>
        System.Threading.Tasks.Task<UserFactorVerifyResponse> VerifyFactorAsync(  string userId ,   string factorId ,   string templateId = default(string) ,   int? tokenLifetimeSeconds = default(int?) ,   string xForwardedFor = default(string) ,   string userAgent = default(string) ,   string acceptLanguage = default(string) ,   UserFactorVerifyRequest body = default(UserFactorVerifyRequest) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify a Factor
        /// </summary>
        /// <remarks>
        /// Verifies an OTP for a Factor. Some Factors (&#x60;call&#x60;, &#x60;email&#x60;, &#x60;push&#x60;, &#x60;sms&#x60;, &#x60;u2f&#x60;, and &#x60;webauthn&#x60;) must first issue a challenge before you can verify the Factor. Do this by making a request without a body. After a challenge is issued, make another request to verify the Factor.  **Note**: To verify a &#x60;push&#x60; factor, use the **poll** link returned when you issue the challenge. See [Retrieve a Factor Transaction Status](/openapi/okta-management/management/tag/UserFactor/#tag/UserFactor/operation/getFactorTransactionStatus).
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="templateId">ID of an existing custom SMS template. See the [SMS Templates API](../Template). Only used by &#x60;sms&#x60; Factors. (optional)</param>
        /// <param name="tokenLifetimeSeconds">Defines how long the token remains valid (optional, default to 300)</param>
        /// <param name="xForwardedFor">Public IP address for the user agent (optional)</param>
        /// <param name="userAgent">Type of user agent detected when the request is made. Required to verify &#x60;push&#x60; Factors. (optional)</param>
        /// <param name="acceptLanguage">An ISO 639-1 two-letter language code that defines a localized message to send. Only used by &#x60;sms&#x60; Factors. If a localized message doesn&#39;t exist or the &#x60;templateId&#x60; is incorrect, the default template is used instead. (optional)</param>
        /// <param name="body">Some Factors (&#x60;call&#x60;, &#x60;email&#x60;, &#x60;push&#x60;, &#x60;sms&#x60;, &#x60;u2f&#x60;, and &#x60;webauthn&#x60;) must first issue a challenge before you can verify the Factor. Do this by making a request without a body. After a challenge is issued, make another request to verify the Factor. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactorVerifyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFactorVerifyResponse>> VerifyFactorWithHttpInfoAsync(  string userId ,   string factorId ,   string templateId = default(string) ,   int? tokenLifetimeSeconds = default(int?) ,   string xForwardedFor = default(string) ,   string userAgent = default(string) ,   string acceptLanguage = default(string) ,   UserFactorVerifyRequest body = default(UserFactorVerifyRequest) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial interface IUserFactorApi :  IUserFactorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserFactorApi : IUserFactorApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        private IOAuthTokenProvider _oAuthTokenProvider;
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <param name="oAuthTokenProvider">The access token provider to be used when the AuthorizationMode is equals to Private Key. Optional./param>
        /// <param name="webProxy">The web proxy to be used by the HTTP client. Optional./param>
        /// <returns></returns>
        public UserFactorApi(Okta.Sdk.Client.Configuration configuration = null, IOAuthTokenProvider oAuthTokenProvider = null, WebProxy webProxy = null)
        {
            configuration = Sdk.Client.Configuration.GetConfigurationOrDefault(configuration);

            this.Configuration = Okta.Sdk.Client.Configuration.MergeConfigurations(
                Okta.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            
            Sdk.Client.Configuration.Validate((Configuration)this.Configuration);
            
            _oAuthTokenProvider = NullOAuthTokenProvider.Instance;
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration))
            {
                _oAuthTokenProvider = oAuthTokenProvider ?? new DefaultOAuthTokenProvider(Configuration);
            }
            
            this.AsynchronousClient = new Okta.Sdk.Client.ApiClient(this.Configuration.OktaDomain, _oAuthTokenProvider, webProxy);
            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserFactorApi(Okta.Sdk.Client.IAsynchronousClient asyncClient, Okta.Sdk.Client.IReadableConfiguration configuration)
        {
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
             _oAuthTokenProvider = NullOAuthTokenProvider.Instance;
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration))
            {
                _oAuthTokenProvider = new DefaultOAuthTokenProvider(Configuration);
            }
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Okta.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.OktaDomain;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
         
        /// <summary>
        /// Activate a Factor Activates a Factor. Some Factors (&#x60;call&#x60;, &#x60;email&#x60;, &#x60;push&#x60;, &#x60;sms&#x60;, &#x60;token:software:totp&#x60;, &#x60;u2f&#x60;, and &#x60;webauthn&#x60;) require activation to complete the enrollment process.  Okta enforces a rate limit of five activation attempts within five minutes. After a user exceeds the rate limit, Okta returns an error message.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactor</returns>
        public async System.Threading.Tasks.Task<UserFactor> ActivateFactorAsync(  string userId ,   string factorId ,   UserFactorActivateRequest body = default(UserFactorActivateRequest) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<UserFactor> localVarResponse = await ActivateFactorWithHttpInfoAsync(userId, factorId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Activate a Factor Activates a Factor. Some Factors (&#x60;call&#x60;, &#x60;email&#x60;, &#x60;push&#x60;, &#x60;sms&#x60;, &#x60;token:software:totp&#x60;, &#x60;u2f&#x60;, and &#x60;webauthn&#x60;) require activation to complete the enrollment process.  Okta enforces a rate limit of five activation attempts within five minutes. After a user exceeds the rate limit, Okta returns an error message.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<UserFactor>> ActivateFactorWithHttpInfoAsync(  string userId ,   string factorId ,   UserFactorActivateRequest body = default(UserFactorActivateRequest) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ActivateFactor");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->ActivateFactor");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Okta.Sdk.Client.ClientUtils.ParameterToString(factorId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate", "POST", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserFactor>("/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enroll a Factor Enrolls a supported Factor for the specified user. Some Factor types require a seperate activation to complete the enrollment process. See [Activate a Factor](./#tag/UserFactor/operation/activateFactor).
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="body">Factor</param>
        /// <param name="updatePhone">If &#x60;true&#x60;, indicates you are replacing the currently registered phone number for the specified user. This parameter is ignored if the existing phone number is used by an activated Factor. (optional, default to false)</param>
        /// <param name="templateId">ID of an existing custom SMS template. See the [SMS Templates API](../Template). Only used by &#x60;sms&#x60; Factors. If the provided ID doesn&#39;t exist, the default template is used instead. (optional)</param>
        /// <param name="tokenLifetimeSeconds">Defines how long the token remains valid (optional, default to 300)</param>
        /// <param name="activate">If &#x60;true&#x60;, the &#x60;sms&#x60; Factor is immediately activated as part of the enrollment. An activation text message isn&#39;t sent to the device. (optional, default to false)</param>
        /// <param name="acceptLanguage">An ISO 639-1 two-letter language code that defines a localized message to send. Only used by &#x60;sms&#x60; Factors. If a localized message doesn&#39;t exist or the &#x60;templateId&#x60; is incorrect, the default template is used instead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactor</returns>
        public async System.Threading.Tasks.Task<UserFactor> EnrollFactorAsync(  string userId ,   UserFactor body ,   bool? updatePhone = default(bool?) ,   string templateId = default(string) ,   int? tokenLifetimeSeconds = default(int?) ,   bool? activate = default(bool?) ,   string acceptLanguage = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<UserFactor> localVarResponse = await EnrollFactorWithHttpInfoAsync(userId, body, updatePhone, templateId, tokenLifetimeSeconds, activate, acceptLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Enroll a Factor Enrolls a supported Factor for the specified user. Some Factor types require a seperate activation to complete the enrollment process. See [Activate a Factor](./#tag/UserFactor/operation/activateFactor).
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="body">Factor</param>
        /// <param name="updatePhone">If &#x60;true&#x60;, indicates you are replacing the currently registered phone number for the specified user. This parameter is ignored if the existing phone number is used by an activated Factor. (optional, default to false)</param>
        /// <param name="templateId">ID of an existing custom SMS template. See the [SMS Templates API](../Template). Only used by &#x60;sms&#x60; Factors. If the provided ID doesn&#39;t exist, the default template is used instead. (optional)</param>
        /// <param name="tokenLifetimeSeconds">Defines how long the token remains valid (optional, default to 300)</param>
        /// <param name="activate">If &#x60;true&#x60;, the &#x60;sms&#x60; Factor is immediately activated as part of the enrollment. An activation text message isn&#39;t sent to the device. (optional, default to false)</param>
        /// <param name="acceptLanguage">An ISO 639-1 two-letter language code that defines a localized message to send. Only used by &#x60;sms&#x60; Factors. If a localized message doesn&#39;t exist or the &#x60;templateId&#x60; is incorrect, the default template is used instead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<UserFactor>> EnrollFactorWithHttpInfoAsync(  string userId ,   UserFactor body ,   bool? updatePhone = default(bool?) ,   string templateId = default(string) ,   int? tokenLifetimeSeconds = default(int?) ,   bool? activate = default(bool?) ,   string acceptLanguage = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->EnrollFactor");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling UserFactorApi->EnrollFactor");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (updatePhone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "updatePhone", updatePhone));
            }
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }
            if (tokenLifetimeSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "tokenLifetimeSeconds", tokenLifetimeSeconds));
            }
            if (activate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "activate", activate));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Okta.Sdk.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            localVarRequestOptions.Data = body;

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/users/{userId}/factors", "POST", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserFactor>("/api/v1/users/{userId}/factors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnrollFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Factor Retrieves an existing Factor for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactor</returns>
        public async System.Threading.Tasks.Task<UserFactor> GetFactorAsync(  string userId ,   string factorId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<UserFactor> localVarResponse = await GetFactorWithHttpInfoAsync(userId, factorId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a Factor Retrieves an existing Factor for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<UserFactor>> GetFactorWithHttpInfoAsync(  string userId ,   string factorId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->GetFactor");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->GetFactor");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Okta.Sdk.Client.ClientUtils.ParameterToString(factorId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/users/{userId}/factors/{factorId}", "GET", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserFactor>("/api/v1/users/{userId}/factors/{factorId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Factor transaction status Retrieves the status of a &#x60;push&#x60; Factor verification transaction
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="transactionId">ID of an existing Factor verification transaction</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactorPushTransaction</returns>
        public async System.Threading.Tasks.Task<UserFactorPushTransaction> GetFactorTransactionStatusAsync(  string userId ,   string factorId ,   string transactionId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<UserFactorPushTransaction> localVarResponse = await GetFactorTransactionStatusWithHttpInfoAsync(userId, factorId, transactionId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a Factor transaction status Retrieves the status of a &#x60;push&#x60; Factor verification transaction
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="transactionId">ID of an existing Factor verification transaction</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactorPushTransaction)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<UserFactorPushTransaction>> GetFactorTransactionStatusWithHttpInfoAsync(  string userId ,   string factorId ,   string transactionId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->GetFactorTransactionStatus");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->GetFactorTransactionStatus");
            }

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'transactionId' when calling UserFactorApi->GetFactorTransactionStatus");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Okta.Sdk.Client.ClientUtils.ParameterToString(factorId)); // path parameter
            localVarRequestOptions.PathParameters.Add("transactionId", Okta.Sdk.Client.ClientUtils.ParameterToString(transactionId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/users/{userId}/factors/{factorId}/transactions/{transactionId}", "GET", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserFactorPushTransaction>("/api/v1/users/{userId}/factors/{factorId}/transactions/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactorTransactionStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all enrolled Factors Lists all enrolled Factors for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserFactor&gt;</returns>
        //a
        public IOktaCollectionClient<UserFactor> ListFactors(  string userId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListFactors");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            // If AuthorizationMode is equals to PrivateKey, the authorization header is set in the enumerator for collections.
            
            return new OktaCollectionClient<UserFactor>(localVarRequestOptions, "/api/v1/users/{userId}/factors", this.AsynchronousClient, this.Configuration, this._oAuthTokenProvider);
        }
        /// <summary>
        /// List all enrolled Factors Lists all enrolled Factors for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserFactor&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<UserFactor>>> ListFactorsWithHttpInfoAsync(  string userId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListFactors");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            // If AuthorizationMode is equals to PrivateKey, the authorization header is set in the enumerator for collections.

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserFactor>>("/api/v1/users/{userId}/factors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFactors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all supported Factors Lists all the supported Factors that can be enrolled for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserFactorSupported&gt;</returns>
        //a
        public IOktaCollectionClient<UserFactorSupported> ListSupportedFactors(  string userId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListSupportedFactors");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            // If AuthorizationMode is equals to PrivateKey, the authorization header is set in the enumerator for collections.
            
            return new OktaCollectionClient<UserFactorSupported>(localVarRequestOptions, "/api/v1/users/{userId}/factors/catalog", this.AsynchronousClient, this.Configuration, this._oAuthTokenProvider);
        }
        /// <summary>
        /// List all supported Factors Lists all the supported Factors that can be enrolled for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserFactorSupported&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<UserFactorSupported>>> ListSupportedFactorsWithHttpInfoAsync(  string userId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListSupportedFactors");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            // If AuthorizationMode is equals to PrivateKey, the authorization header is set in the enumerator for collections.

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserFactorSupported>>("/api/v1/users/{userId}/factors/catalog", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSupportedFactors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all supported Security Questions Lists all available Security Questions for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserFactorSecurityQuestionProfile&gt;</returns>
        //a
        public IOktaCollectionClient<UserFactorSecurityQuestionProfile> ListSupportedSecurityQuestions(  string userId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListSupportedSecurityQuestions");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            
            return new OktaCollectionClient<UserFactorSecurityQuestionProfile>(localVarRequestOptions, "/api/v1/users/{userId}/factors/questions", this.AsynchronousClient, this.Configuration, this._oAuthTokenProvider);
        }
        /// <summary>
        /// List all supported Security Questions Lists all available Security Questions for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserFactorSecurityQuestionProfile&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<UserFactorSecurityQuestionProfile>>> ListSupportedSecurityQuestionsWithHttpInfoAsync(  string userId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListSupportedSecurityQuestions");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserFactorSecurityQuestionProfile>>("/api/v1/users/{userId}/factors/questions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSupportedSecurityQuestions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resend a Factor enrollment Resends an &#x60;sms&#x60;, &#x60;call&#x60;, or &#x60;email&#x60; factor challenge as part of an enrollment flow.  For &#x60;call&#x60; and &#x60;sms&#x60; factors, Okta enforces a rate limit of one OTP challenge per device every 30 seconds. You can configure your &#x60;sms&#x60; and &#x60;call&#x60; factors to use a third-party telephony provider. See the [Telephony inline hook reference](https://developer.okta.com/docs/reference/telephony-hook/). Okta round-robins between SMS providers with every resend request to help ensure delivery of an SMS and Call OTPs across different carriers.  &gt; **Note**: Resend operations aren&#39;t allowed after a factor exceeds the activation rate limit. See [Activate a Factor](./#tag/UserFactor/operation/activateFactor).
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="resendUserFactor"></param>
        /// <param name="templateId">ID of an existing custom SMS template. See the [SMS Templates API](../Template). Only used by &#x60;sms&#x60; Factors. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResendUserFactor</returns>
        public async System.Threading.Tasks.Task<ResendUserFactor> ResendEnrollFactorAsync(  string userId ,   string factorId ,   ResendUserFactor resendUserFactor ,   string templateId = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ResendUserFactor> localVarResponse = await ResendEnrollFactorWithHttpInfoAsync(userId, factorId, resendUserFactor, templateId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Resend a Factor enrollment Resends an &#x60;sms&#x60;, &#x60;call&#x60;, or &#x60;email&#x60; factor challenge as part of an enrollment flow.  For &#x60;call&#x60; and &#x60;sms&#x60; factors, Okta enforces a rate limit of one OTP challenge per device every 30 seconds. You can configure your &#x60;sms&#x60; and &#x60;call&#x60; factors to use a third-party telephony provider. See the [Telephony inline hook reference](https://developer.okta.com/docs/reference/telephony-hook/). Okta round-robins between SMS providers with every resend request to help ensure delivery of an SMS and Call OTPs across different carriers.  &gt; **Note**: Resend operations aren&#39;t allowed after a factor exceeds the activation rate limit. See [Activate a Factor](./#tag/UserFactor/operation/activateFactor).
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="resendUserFactor"></param>
        /// <param name="templateId">ID of an existing custom SMS template. See the [SMS Templates API](../Template). Only used by &#x60;sms&#x60; Factors. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResendUserFactor)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ResendUserFactor>> ResendEnrollFactorWithHttpInfoAsync(  string userId ,   string factorId ,   ResendUserFactor resendUserFactor ,   string templateId = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ResendEnrollFactor");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->ResendEnrollFactor");
            }

            // verify the required parameter 'resendUserFactor' is set
            if (resendUserFactor == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resendUserFactor' when calling UserFactorApi->ResendEnrollFactor");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Okta.Sdk.Client.ClientUtils.ParameterToString(factorId)); // path parameter
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }
            localVarRequestOptions.Data = resendUserFactor;

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/users/{userId}/factors/{factorId}/resend", "POST", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResendUserFactor>("/api/v1/users/{userId}/factors/{factorId}/resend", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResendEnrollFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unenroll a Factor Unenrolls an existing Factor for the specified user. This allows the user to enroll a new Factor.  &gt; **Note**: If you unenroll the &#x60;push&#x60; or the &#x60;signed_nonce&#x60; Factors, Okta also unenrolls any other &#x60;totp&#x60;, &#x60;signed_nonce&#x60;, or Okta Verify &#x60;push&#x60; Factors associated with the user.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="removeRecoveryEnrollment">If &#x60;true&#x60;, removes the the phone number as both a recovery method and a Factor. Only used for &#x60;sms&#x60; and &#x60;call&#x60; Factors. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnenrollFactorAsync(  string userId ,   string factorId ,   bool? removeRecoveryEnrollment = default(bool?) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnenrollFactorWithHttpInfoAsync(userId, factorId, removeRecoveryEnrollment, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Unenroll a Factor Unenrolls an existing Factor for the specified user. This allows the user to enroll a new Factor.  &gt; **Note**: If you unenroll the &#x60;push&#x60; or the &#x60;signed_nonce&#x60; Factors, Okta also unenrolls any other &#x60;totp&#x60;, &#x60;signed_nonce&#x60;, or Okta Verify &#x60;push&#x60; Factors associated with the user.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="removeRecoveryEnrollment">If &#x60;true&#x60;, removes the the phone number as both a recovery method and a Factor. Only used for &#x60;sms&#x60; and &#x60;call&#x60; Factors. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> UnenrollFactorWithHttpInfoAsync(  string userId ,   string factorId ,   bool? removeRecoveryEnrollment = default(bool?) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->UnenrollFactor");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->UnenrollFactor");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Okta.Sdk.Client.ClientUtils.ParameterToString(factorId)); // path parameter
            if (removeRecoveryEnrollment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "removeRecoveryEnrollment", removeRecoveryEnrollment));
            }

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/users/{userId}/factors/{factorId}", "DELETE", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/users/{userId}/factors/{factorId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnenrollFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify a Factor Verifies an OTP for a Factor. Some Factors (&#x60;call&#x60;, &#x60;email&#x60;, &#x60;push&#x60;, &#x60;sms&#x60;, &#x60;u2f&#x60;, and &#x60;webauthn&#x60;) must first issue a challenge before you can verify the Factor. Do this by making a request without a body. After a challenge is issued, make another request to verify the Factor.  **Note**: To verify a &#x60;push&#x60; factor, use the **poll** link returned when you issue the challenge. See [Retrieve a Factor Transaction Status](/openapi/okta-management/management/tag/UserFactor/#tag/UserFactor/operation/getFactorTransactionStatus).
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="templateId">ID of an existing custom SMS template. See the [SMS Templates API](../Template). Only used by &#x60;sms&#x60; Factors. (optional)</param>
        /// <param name="tokenLifetimeSeconds">Defines how long the token remains valid (optional, default to 300)</param>
        /// <param name="xForwardedFor">Public IP address for the user agent (optional)</param>
        /// <param name="userAgent">Type of user agent detected when the request is made. Required to verify &#x60;push&#x60; Factors. (optional)</param>
        /// <param name="acceptLanguage">An ISO 639-1 two-letter language code that defines a localized message to send. Only used by &#x60;sms&#x60; Factors. If a localized message doesn&#39;t exist or the &#x60;templateId&#x60; is incorrect, the default template is used instead. (optional)</param>
        /// <param name="body">Some Factors (&#x60;call&#x60;, &#x60;email&#x60;, &#x60;push&#x60;, &#x60;sms&#x60;, &#x60;u2f&#x60;, and &#x60;webauthn&#x60;) must first issue a challenge before you can verify the Factor. Do this by making a request without a body. After a challenge is issued, make another request to verify the Factor. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactorVerifyResponse</returns>
        public async System.Threading.Tasks.Task<UserFactorVerifyResponse> VerifyFactorAsync(  string userId ,   string factorId ,   string templateId = default(string) ,   int? tokenLifetimeSeconds = default(int?) ,   string xForwardedFor = default(string) ,   string userAgent = default(string) ,   string acceptLanguage = default(string) ,   UserFactorVerifyRequest body = default(UserFactorVerifyRequest) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<UserFactorVerifyResponse> localVarResponse = await VerifyFactorWithHttpInfoAsync(userId, factorId, templateId, tokenLifetimeSeconds, xForwardedFor, userAgent, acceptLanguage, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Verify a Factor Verifies an OTP for a Factor. Some Factors (&#x60;call&#x60;, &#x60;email&#x60;, &#x60;push&#x60;, &#x60;sms&#x60;, &#x60;u2f&#x60;, and &#x60;webauthn&#x60;) must first issue a challenge before you can verify the Factor. Do this by making a request without a body. After a challenge is issued, make another request to verify the Factor.  **Note**: To verify a &#x60;push&#x60; factor, use the **poll** link returned when you issue the challenge. See [Retrieve a Factor Transaction Status](/openapi/okta-management/management/tag/UserFactor/#tag/UserFactor/operation/getFactorTransactionStatus).
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of an existing Okta user</param>
        /// <param name="factorId">ID of an existing user Factor</param>
        /// <param name="templateId">ID of an existing custom SMS template. See the [SMS Templates API](../Template). Only used by &#x60;sms&#x60; Factors. (optional)</param>
        /// <param name="tokenLifetimeSeconds">Defines how long the token remains valid (optional, default to 300)</param>
        /// <param name="xForwardedFor">Public IP address for the user agent (optional)</param>
        /// <param name="userAgent">Type of user agent detected when the request is made. Required to verify &#x60;push&#x60; Factors. (optional)</param>
        /// <param name="acceptLanguage">An ISO 639-1 two-letter language code that defines a localized message to send. Only used by &#x60;sms&#x60; Factors. If a localized message doesn&#39;t exist or the &#x60;templateId&#x60; is incorrect, the default template is used instead. (optional)</param>
        /// <param name="body">Some Factors (&#x60;call&#x60;, &#x60;email&#x60;, &#x60;push&#x60;, &#x60;sms&#x60;, &#x60;u2f&#x60;, and &#x60;webauthn&#x60;) must first issue a challenge before you can verify the Factor. Do this by making a request without a body. After a challenge is issued, make another request to verify the Factor. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactorVerifyResponse)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<UserFactorVerifyResponse>> VerifyFactorWithHttpInfoAsync(  string userId ,   string factorId ,   string templateId = default(string) ,   int? tokenLifetimeSeconds = default(int?) ,   string xForwardedFor = default(string) ,   string userAgent = default(string) ,   string acceptLanguage = default(string) ,   UserFactorVerifyRequest body = default(UserFactorVerifyRequest) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->VerifyFactor");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->VerifyFactor");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Okta.Sdk.Client.ClientUtils.ParameterToString(factorId)); // path parameter
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }
            if (tokenLifetimeSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "tokenLifetimeSeconds", tokenLifetimeSeconds));
            }
            if (xForwardedFor != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Forwarded-For", Okta.Sdk.Client.ClientUtils.ParameterToString(xForwardedFor)); // header parameter
            }
            if (userAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", Okta.Sdk.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Okta.Sdk.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            localVarRequestOptions.Data = body;

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/users/{userId}/factors/{factorId}/verify", "POST", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserFactorVerifyResponse>("/api/v1/users/{userId}/factors/{factorId}/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
