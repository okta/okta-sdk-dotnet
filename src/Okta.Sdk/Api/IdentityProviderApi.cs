/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentityProviderApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate an Identity Provider
        /// </summary>
        /// <remarks>
        /// Activates an inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>IdentityProvider</returns>
        IdentityProvider ActivateIdentityProvider(string idpId);

        /// <summary>
        /// Activate an Identity Provider
        /// </summary>
        /// <remarks>
        /// Activates an inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        ApiResponse<IdentityProvider> ActivateIdentityProviderWithHttpInfo(string idpId);
        /// <summary>
        /// Clone a Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey CloneIdentityProviderKey(string idpId, string keyId, string targetIdpId);

        /// <summary>
        /// Clone a Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> CloneIdentityProviderKeyWithHttpInfo(string idpId, string keyId, string targetIdpId);
        /// <summary>
        /// Create an Identity Provider
        /// </summary>
        /// <remarks>
        /// Adds a new IdP to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider"></param>
        /// <returns>IdentityProvider</returns>
        IdentityProvider CreateIdentityProvider(IdentityProvider identityProvider);

        /// <summary>
        /// Create an Identity Provider
        /// </summary>
        /// <remarks>
        /// Adds a new IdP to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        ApiResponse<IdentityProvider> CreateIdentityProviderWithHttpInfo(IdentityProvider identityProvider);
        /// <summary>
        /// Create an X.509 Certificate Public Key
        /// </summary>
        /// <remarks>
        /// Adds a new X.509 certificate credential to the IdP key store.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonWebKey"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey CreateIdentityProviderKey(JsonWebKey jsonWebKey);

        /// <summary>
        /// Create an X.509 Certificate Public Key
        /// </summary>
        /// <remarks>
        /// Adds a new X.509 certificate credential to the IdP key store.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonWebKey"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> CreateIdentityProviderKeyWithHttpInfo(JsonWebKey jsonWebKey);
        /// <summary>
        /// Deactivate an Identity Provider
        /// </summary>
        /// <remarks>
        /// Deactivates an active IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>IdentityProvider</returns>
        IdentityProvider DeactivateIdentityProvider(string idpId);

        /// <summary>
        /// Deactivate an Identity Provider
        /// </summary>
        /// <remarks>
        /// Deactivates an active IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        ApiResponse<IdentityProvider> DeactivateIdentityProviderWithHttpInfo(string idpId);
        /// <summary>
        /// Delete an Identity Provider
        /// </summary>
        /// <remarks>
        /// Removes an IdP from your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns></returns>
        void DeleteIdentityProvider(string idpId);

        /// <summary>
        /// Delete an Identity Provider
        /// </summary>
        /// <remarks>
        /// Removes an IdP from your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityProviderWithHttpInfo(string idpId);
        /// <summary>
        /// Delete a Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns></returns>
        void DeleteIdentityProviderKey(string keyId);

        /// <summary>
        /// Delete a Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityProviderKeyWithHttpInfo(string keyId);
        /// <summary>
        /// Generate a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Generates a new key pair and returns a Certificate Signing Request for it.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="metadata"></param>
        /// <returns>Csr</returns>
        Csr GenerateCsrForIdentityProvider(string idpId, CsrMetadata metadata);

        /// <summary>
        /// Generate a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Generates a new key pair and returns a Certificate Signing Request for it.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="metadata"></param>
        /// <returns>ApiResponse of Csr</returns>
        ApiResponse<Csr> GenerateCsrForIdentityProviderWithHttpInfo(string idpId, CsrMetadata metadata);
        /// <summary>
        /// Generate a new Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey GenerateIdentityProviderSigningKey(string idpId, int validityYears);

        /// <summary>
        /// Generate a new Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> GenerateIdentityProviderSigningKeyWithHttpInfo(string idpId, int validityYears);
        /// <summary>
        /// Retrieve a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Gets a specific Certificate Signing Request model by id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Csr</returns>
        Csr GetCsrForIdentityProvider(string idpId, string csrId);

        /// <summary>
        /// Retrieve a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Gets a specific Certificate Signing Request model by id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of Csr</returns>
        ApiResponse<Csr> GetCsrForIdentityProviderWithHttpInfo(string idpId, string csrId);
        /// <summary>
        /// Retrieve an Identity Provider
        /// </summary>
        /// <remarks>
        /// Fetches an IdP by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>IdentityProvider</returns>
        IdentityProvider GetIdentityProvider(string idpId);

        /// <summary>
        /// Retrieve an Identity Provider
        /// </summary>
        /// <remarks>
        /// Fetches an IdP by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        ApiResponse<IdentityProvider> GetIdentityProviderWithHttpInfo(string idpId);
        /// <summary>
        /// Retrieve a User
        /// </summary>
        /// <remarks>
        /// Fetches a linked IdP user by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>IdentityProviderApplicationUser</returns>
        IdentityProviderApplicationUser GetIdentityProviderApplicationUser(string idpId, string userId);

        /// <summary>
        /// Retrieve a User
        /// </summary>
        /// <remarks>
        /// Fetches a linked IdP user by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of IdentityProviderApplicationUser</returns>
        ApiResponse<IdentityProviderApplicationUser> GetIdentityProviderApplicationUserWithHttpInfo(string idpId, string userId);
        /// <summary>
        /// Retrieve an Credential Key
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey GetIdentityProviderKey(string keyId);

        /// <summary>
        /// Retrieve an Credential Key
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> GetIdentityProviderKeyWithHttpInfo(string keyId);
        /// <summary>
        /// Retrieve a Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey GetIdentityProviderSigningKey(string idpId, string keyId);

        /// <summary>
        /// Retrieve a Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> GetIdentityProviderSigningKeyWithHttpInfo(string idpId, string keyId);
        /// <summary>
        /// Link a User to a Social IdP
        /// </summary>
        /// <remarks>
        /// Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="userIdentityProviderLinkRequest"></param>
        /// <returns>IdentityProviderApplicationUser</returns>
        IdentityProviderApplicationUser LinkUserToIdentityProvider(string idpId, string userId, UserIdentityProviderLinkRequest userIdentityProviderLinkRequest);

        /// <summary>
        /// Link a User to a Social IdP
        /// </summary>
        /// <remarks>
        /// Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="userIdentityProviderLinkRequest"></param>
        /// <returns>ApiResponse of IdentityProviderApplicationUser</returns>
        ApiResponse<IdentityProviderApplicationUser> LinkUserToIdentityProviderWithHttpInfo(string idpId, string userId, UserIdentityProviderLinkRequest userIdentityProviderLinkRequest);
        /// <summary>
        /// List all Certificate Signing Requests
        /// </summary>
        /// <remarks>
        /// Enumerates Certificate Signing Requests for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>List&lt;Csr&gt;</returns>
        List<Csr> ListCsrsForIdentityProvider(string idpId);

        /// <summary>
        /// List all Certificate Signing Requests
        /// </summary>
        /// <remarks>
        /// Enumerates Certificate Signing Requests for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of List&lt;Csr&gt;</returns>
        ApiResponse<List<Csr>> ListCsrsForIdentityProviderWithHttpInfo(string idpId);
        /// <summary>
        /// List all Users
        /// </summary>
        /// <remarks>
        /// Find all the users linked to an identity provider
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>List&lt;IdentityProviderApplicationUser&gt;</returns>
        List<IdentityProviderApplicationUser> ListIdentityProviderApplicationUsers(string idpId);

        /// <summary>
        /// List all Users
        /// </summary>
        /// <remarks>
        /// Find all the users linked to an identity provider
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of List&lt;IdentityProviderApplicationUser&gt;</returns>
        ApiResponse<List<IdentityProviderApplicationUser>> ListIdentityProviderApplicationUsersWithHttpInfo(string idpId);
        /// <summary>
        /// List all Credential Keys
        /// </summary>
        /// <remarks>
        /// Enumerates IdP key credentials.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional, default to 20)</param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        List<JsonWebKey> ListIdentityProviderKeys(string after = default(string), int? limit = default(int?));

        /// <summary>
        /// List all Credential Keys
        /// </summary>
        /// <remarks>
        /// Enumerates IdP key credentials.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional, default to 20)</param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        ApiResponse<List<JsonWebKey>> ListIdentityProviderKeysWithHttpInfo(string after = default(string), int? limit = default(int?));
        /// <summary>
        /// List all Signing Credential Keys
        /// </summary>
        /// <remarks>
        /// Enumerates signing key credentials for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        List<JsonWebKey> ListIdentityProviderSigningKeys(string idpId);

        /// <summary>
        /// List all Signing Credential Keys
        /// </summary>
        /// <remarks>
        /// Enumerates signing key credentials for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        ApiResponse<List<JsonWebKey>> ListIdentityProviderSigningKeysWithHttpInfo(string idpId);
        /// <summary>
        /// List all Identity Providers
        /// </summary>
        /// <remarks>
        /// Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional, default to 20)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <returns>List&lt;IdentityProvider&gt;</returns>
        List<IdentityProvider> ListIdentityProviders(string q = default(string), string after = default(string), int? limit = default(int?), string type = default(string));

        /// <summary>
        /// List all Identity Providers
        /// </summary>
        /// <remarks>
        /// Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional, default to 20)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <returns>ApiResponse of List&lt;IdentityProvider&gt;</returns>
        ApiResponse<List<IdentityProvider>> ListIdentityProvidersWithHttpInfo(string q = default(string), string after = default(string), int? limit = default(int?), string type = default(string));
        /// <summary>
        /// List all Tokens from a OIDC Identity Provider
        /// </summary>
        /// <remarks>
        /// Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>List&lt;SocialAuthToken&gt;</returns>
        List<SocialAuthToken> ListSocialAuthTokens(string idpId, string userId);

        /// <summary>
        /// List all Tokens from a OIDC Identity Provider
        /// </summary>
        /// <remarks>
        /// Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;SocialAuthToken&gt;</returns>
        ApiResponse<List<SocialAuthToken>> ListSocialAuthTokensWithHttpInfo(string idpId, string userId);
        /// <summary>
        /// Publish a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="body"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey PublishCsrForIdentityProvider(string idpId, string csrId, System.IO.Stream body);

        /// <summary>
        /// Publish a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> PublishCsrForIdentityProviderWithHttpInfo(string idpId, string csrId, System.IO.Stream body);
        /// <summary>
        /// Revoke a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns></returns>
        void RevokeCsrForIdentityProvider(string idpId, string csrId);

        /// <summary>
        /// Revoke a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeCsrForIdentityProviderWithHttpInfo(string idpId, string csrId);
        /// <summary>
        /// Unlink a User from IdP
        /// </summary>
        /// <remarks>
        /// Removes the link between the Okta user and the IdP user.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        void UnlinkUserFromIdentityProvider(string idpId, string userId);

        /// <summary>
        /// Unlink a User from IdP
        /// </summary>
        /// <remarks>
        /// Removes the link between the Okta user and the IdP user.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnlinkUserFromIdentityProviderWithHttpInfo(string idpId, string userId);
        /// <summary>
        /// Replace an Identity Provider
        /// </summary>
        /// <remarks>
        /// Updates the configuration for an IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="identityProvider"></param>
        /// <returns>IdentityProvider</returns>
        IdentityProvider UpdateIdentityProvider(string idpId, IdentityProvider identityProvider);

        /// <summary>
        /// Replace an Identity Provider
        /// </summary>
        /// <remarks>
        /// Updates the configuration for an IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="identityProvider"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        ApiResponse<IdentityProvider> UpdateIdentityProviderWithHttpInfo(string idpId, IdentityProvider identityProvider);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentityProviderApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Activate an Identity Provider
        /// </summary>
        /// <remarks>
        /// Activates an inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityProvider</returns>
        System.Threading.Tasks.Task<IdentityProvider> ActivateIdentityProviderAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Activate an Identity Provider
        /// </summary>
        /// <remarks>
        /// Activates an inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityProvider>> ActivateIdentityProviderWithHttpInfoAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clone a Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> CloneIdentityProviderKeyAsync(string idpId, string keyId, string targetIdpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clone a Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> CloneIdentityProviderKeyWithHttpInfoAsync(string idpId, string keyId, string targetIdpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an Identity Provider
        /// </summary>
        /// <remarks>
        /// Adds a new IdP to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityProvider</returns>
        System.Threading.Tasks.Task<IdentityProvider> CreateIdentityProviderAsync(IdentityProvider identityProvider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an Identity Provider
        /// </summary>
        /// <remarks>
        /// Adds a new IdP to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityProvider>> CreateIdentityProviderWithHttpInfoAsync(IdentityProvider identityProvider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an X.509 Certificate Public Key
        /// </summary>
        /// <remarks>
        /// Adds a new X.509 certificate credential to the IdP key store.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonWebKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> CreateIdentityProviderKeyAsync(JsonWebKey jsonWebKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an X.509 Certificate Public Key
        /// </summary>
        /// <remarks>
        /// Adds a new X.509 certificate credential to the IdP key store.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonWebKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> CreateIdentityProviderKeyWithHttpInfoAsync(JsonWebKey jsonWebKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deactivate an Identity Provider
        /// </summary>
        /// <remarks>
        /// Deactivates an active IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityProvider</returns>
        System.Threading.Tasks.Task<IdentityProvider> DeactivateIdentityProviderAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deactivate an Identity Provider
        /// </summary>
        /// <remarks>
        /// Deactivates an active IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityProvider>> DeactivateIdentityProviderWithHttpInfoAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Identity Provider
        /// </summary>
        /// <remarks>
        /// Removes an IdP from your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIdentityProviderAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Identity Provider
        /// </summary>
        /// <remarks>
        /// Removes an IdP from your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIdentityProviderWithHttpInfoAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIdentityProviderKeyAsync(string keyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIdentityProviderKeyWithHttpInfoAsync(string keyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Generates a new key pair and returns a Certificate Signing Request for it.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="metadata"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Csr</returns>
        System.Threading.Tasks.Task<Csr> GenerateCsrForIdentityProviderAsync(string idpId, CsrMetadata metadata, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Generates a new key pair and returns a Certificate Signing Request for it.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="metadata"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Csr)</returns>
        System.Threading.Tasks.Task<ApiResponse<Csr>> GenerateCsrForIdentityProviderWithHttpInfoAsync(string idpId, CsrMetadata metadata, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate a new Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> GenerateIdentityProviderSigningKeyAsync(string idpId, int validityYears, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate a new Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> GenerateIdentityProviderSigningKeyWithHttpInfoAsync(string idpId, int validityYears, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Gets a specific Certificate Signing Request model by id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Csr</returns>
        System.Threading.Tasks.Task<Csr> GetCsrForIdentityProviderAsync(string idpId, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Gets a specific Certificate Signing Request model by id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Csr)</returns>
        System.Threading.Tasks.Task<ApiResponse<Csr>> GetCsrForIdentityProviderWithHttpInfoAsync(string idpId, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Identity Provider
        /// </summary>
        /// <remarks>
        /// Fetches an IdP by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityProvider</returns>
        System.Threading.Tasks.Task<IdentityProvider> GetIdentityProviderAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Identity Provider
        /// </summary>
        /// <remarks>
        /// Fetches an IdP by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityProvider>> GetIdentityProviderWithHttpInfoAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a User
        /// </summary>
        /// <remarks>
        /// Fetches a linked IdP user by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityProviderApplicationUser</returns>
        System.Threading.Tasks.Task<IdentityProviderApplicationUser> GetIdentityProviderApplicationUserAsync(string idpId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a User
        /// </summary>
        /// <remarks>
        /// Fetches a linked IdP user by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityProviderApplicationUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityProviderApplicationUser>> GetIdentityProviderApplicationUserWithHttpInfoAsync(string idpId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Credential Key
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> GetIdentityProviderKeyAsync(string keyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Credential Key
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> GetIdentityProviderKeyWithHttpInfoAsync(string keyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> GetIdentityProviderSigningKeyAsync(string idpId, string keyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Signing Credential Key
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> GetIdentityProviderSigningKeyWithHttpInfoAsync(string idpId, string keyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Link a User to a Social IdP
        /// </summary>
        /// <remarks>
        /// Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="userIdentityProviderLinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityProviderApplicationUser</returns>
        System.Threading.Tasks.Task<IdentityProviderApplicationUser> LinkUserToIdentityProviderAsync(string idpId, string userId, UserIdentityProviderLinkRequest userIdentityProviderLinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Link a User to a Social IdP
        /// </summary>
        /// <remarks>
        /// Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="userIdentityProviderLinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityProviderApplicationUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityProviderApplicationUser>> LinkUserToIdentityProviderWithHttpInfoAsync(string idpId, string userId, UserIdentityProviderLinkRequest userIdentityProviderLinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Certificate Signing Requests
        /// </summary>
        /// <remarks>
        /// Enumerates Certificate Signing Requests for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Csr&gt;</returns>
        IOktaCollectionClient<Csr> ListCsrsForIdentityProviderAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Certificate Signing Requests
        /// </summary>
        /// <remarks>
        /// Enumerates Certificate Signing Requests for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Csr&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Csr>>> ListCsrsForIdentityProviderWithHttpInfoAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Users
        /// </summary>
        /// <remarks>
        /// Find all the users linked to an identity provider
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;IdentityProviderApplicationUser&gt;</returns>
        IOktaCollectionClient<IdentityProviderApplicationUser> ListIdentityProviderApplicationUsersAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Users
        /// </summary>
        /// <remarks>
        /// Find all the users linked to an identity provider
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;IdentityProviderApplicationUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IdentityProviderApplicationUser>>> ListIdentityProviderApplicationUsersWithHttpInfoAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Credential Keys
        /// </summary>
        /// <remarks>
        /// Enumerates IdP key credentials.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        IOktaCollectionClient<JsonWebKey> ListIdentityProviderKeysAsync(string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Credential Keys
        /// </summary>
        /// <remarks>
        /// Enumerates IdP key credentials.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JsonWebKey>>> ListIdentityProviderKeysWithHttpInfoAsync(string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Signing Credential Keys
        /// </summary>
        /// <remarks>
        /// Enumerates signing key credentials for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        IOktaCollectionClient<JsonWebKey> ListIdentityProviderSigningKeysAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Signing Credential Keys
        /// </summary>
        /// <remarks>
        /// Enumerates signing key credentials for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JsonWebKey>>> ListIdentityProviderSigningKeysWithHttpInfoAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Identity Providers
        /// </summary>
        /// <remarks>
        /// Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional, default to 20)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;IdentityProvider&gt;</returns>
        IOktaCollectionClient<IdentityProvider> ListIdentityProvidersAsync(string q = default(string), string after = default(string), int? limit = default(int?), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Identity Providers
        /// </summary>
        /// <remarks>
        /// Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional, default to 20)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;IdentityProvider&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IdentityProvider>>> ListIdentityProvidersWithHttpInfoAsync(string q = default(string), string after = default(string), int? limit = default(int?), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Tokens from a OIDC Identity Provider
        /// </summary>
        /// <remarks>
        /// Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SocialAuthToken&gt;</returns>
        IOktaCollectionClient<SocialAuthToken> ListSocialAuthTokensAsync(string idpId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Tokens from a OIDC Identity Provider
        /// </summary>
        /// <remarks>
        /// Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SocialAuthToken&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SocialAuthToken>>> ListSocialAuthTokensWithHttpInfoAsync(string idpId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Publish a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> PublishCsrForIdentityProviderAsync(string idpId, string csrId, System.IO.Stream body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Publish a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrForIdentityProviderWithHttpInfoAsync(string idpId, string csrId, System.IO.Stream body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeCsrForIdentityProviderAsync(string idpId, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke a Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeCsrForIdentityProviderWithHttpInfoAsync(string idpId, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unlink a User from IdP
        /// </summary>
        /// <remarks>
        /// Removes the link between the Okta user and the IdP user.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnlinkUserFromIdentityProviderAsync(string idpId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unlink a User from IdP
        /// </summary>
        /// <remarks>
        /// Removes the link between the Okta user and the IdP user.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnlinkUserFromIdentityProviderWithHttpInfoAsync(string idpId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace an Identity Provider
        /// </summary>
        /// <remarks>
        /// Updates the configuration for an IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="identityProvider"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityProvider</returns>
        System.Threading.Tasks.Task<IdentityProvider> UpdateIdentityProviderAsync(string idpId, IdentityProvider identityProvider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace an Identity Provider
        /// </summary>
        /// <remarks>
        /// Updates the configuration for an IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="identityProvider"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityProvider>> UpdateIdentityProviderWithHttpInfoAsync(string idpId, IdentityProvider identityProvider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentityProviderApi : IIdentityProviderApiSync, IIdentityProviderApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IdentityProviderApi : IIdentityProviderApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IdentityProviderApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            configuration = Sdk.Client.Configuration.GetConfigurationOrDefault(configuration);

            this.Configuration = Okta.Sdk.Client.Configuration.MergeConfigurations(
                Okta.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            
            Sdk.Client.Configuration.Validate((Configuration)this.Configuration);
            this.Client = new Okta.Sdk.Client.ApiClient(this.Configuration.OktaDomain);
            this.AsynchronousClient = new Okta.Sdk.Client.ApiClient(this.Configuration.OktaDomain);
            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IdentityProviderApi(Okta.Sdk.Client.ISynchronousClient client, Okta.Sdk.Client.IAsynchronousClient asyncClient, Okta.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Okta.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Okta.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.OktaDomain;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
         
        /// <summary>
        /// Activate an Identity Provider Activates an inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>IdentityProvider</returns>
        public IdentityProvider ActivateIdentityProvider(string idpId)
        {
            Okta.Sdk.Client.ApiResponse<IdentityProvider> localVarResponse = ActivateIdentityProviderWithHttpInfo(idpId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activate an Identity Provider Activates an inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        public Okta.Sdk.Client.ApiResponse<IdentityProvider> ActivateIdentityProviderWithHttpInfo(string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ActivateIdentityProvider");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IdentityProvider>("/api/v1/idps/{idpId}/lifecycle/activate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate an Identity Provider Activates an inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityProvider</returns>
        public async System.Threading.Tasks.Task<IdentityProvider> ActivateIdentityProviderAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<IdentityProvider> localVarResponse = await ActivateIdentityProviderWithHttpInfoAsync(idpId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Activate an Identity Provider Activates an inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<IdentityProvider>> ActivateIdentityProviderWithHttpInfoAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ActivateIdentityProvider");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdentityProvider>("/api/v1/idps/{idpId}/lifecycle/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clone a Signing Credential Key Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey CloneIdentityProviderKey(string idpId, string keyId, string targetIdpId)
        {
            Okta.Sdk.Client.ApiResponse<JsonWebKey> localVarResponse = CloneIdentityProviderKeyWithHttpInfo(idpId, keyId, targetIdpId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clone a Signing Credential Key Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public Okta.Sdk.Client.ApiResponse<JsonWebKey> CloneIdentityProviderKeyWithHttpInfo(string idpId, string keyId, string targetIdpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->CloneIdentityProviderKey");
            }

            // verify the required parameter 'keyId' is set
            if (keyId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->CloneIdentityProviderKey");
            }

            // verify the required parameter 'targetIdpId' is set
            if (targetIdpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'targetIdpId' when calling IdentityProviderApi->CloneIdentityProviderKey");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("keyId", Okta.Sdk.Client.ClientUtils.ParameterToString(keyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "targetIdpId", targetIdpId));

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonWebKey>("/api/v1/idps/{idpId}/credentials/keys/{keyId}/clone", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CloneIdentityProviderKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clone a Signing Credential Key Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> CloneIdentityProviderKeyAsync(string idpId, string keyId, string targetIdpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<JsonWebKey> localVarResponse = await CloneIdentityProviderKeyWithHttpInfoAsync(idpId, keyId, targetIdpId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Clone a Signing Credential Key Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<JsonWebKey>> CloneIdentityProviderKeyWithHttpInfoAsync(string idpId, string keyId, string targetIdpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->CloneIdentityProviderKey");
            }

            // verify the required parameter 'keyId' is set
            if (keyId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->CloneIdentityProviderKey");
            }

            // verify the required parameter 'targetIdpId' is set
            if (targetIdpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'targetIdpId' when calling IdentityProviderApi->CloneIdentityProviderKey");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("keyId", Okta.Sdk.Client.ClientUtils.ParameterToString(keyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "targetIdpId", targetIdpId));

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonWebKey>("/api/v1/idps/{idpId}/credentials/keys/{keyId}/clone", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CloneIdentityProviderKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Identity Provider Adds a new IdP to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider"></param>
        /// <returns>IdentityProvider</returns>
        public IdentityProvider CreateIdentityProvider(IdentityProvider identityProvider)
        {
            Okta.Sdk.Client.ApiResponse<IdentityProvider> localVarResponse = CreateIdentityProviderWithHttpInfo(identityProvider);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Identity Provider Adds a new IdP to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        public Okta.Sdk.Client.ApiResponse<IdentityProvider> CreateIdentityProviderWithHttpInfo(IdentityProvider identityProvider)
        {
            // verify the required parameter 'identityProvider' is set
            if (identityProvider == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'identityProvider' when calling IdentityProviderApi->CreateIdentityProvider");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = identityProvider;

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IdentityProvider>("/api/v1/idps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Identity Provider Adds a new IdP to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityProvider</returns>
        public async System.Threading.Tasks.Task<IdentityProvider> CreateIdentityProviderAsync(IdentityProvider identityProvider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<IdentityProvider> localVarResponse = await CreateIdentityProviderWithHttpInfoAsync(identityProvider, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Create an Identity Provider Adds a new IdP to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityProvider"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<IdentityProvider>> CreateIdentityProviderWithHttpInfoAsync(IdentityProvider identityProvider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identityProvider' is set
            if (identityProvider == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'identityProvider' when calling IdentityProviderApi->CreateIdentityProvider");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = identityProvider;

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdentityProvider>("/api/v1/idps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an X.509 Certificate Public Key Adds a new X.509 certificate credential to the IdP key store.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonWebKey"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey CreateIdentityProviderKey(JsonWebKey jsonWebKey)
        {
            Okta.Sdk.Client.ApiResponse<JsonWebKey> localVarResponse = CreateIdentityProviderKeyWithHttpInfo(jsonWebKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an X.509 Certificate Public Key Adds a new X.509 certificate credential to the IdP key store.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonWebKey"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public Okta.Sdk.Client.ApiResponse<JsonWebKey> CreateIdentityProviderKeyWithHttpInfo(JsonWebKey jsonWebKey)
        {
            // verify the required parameter 'jsonWebKey' is set
            if (jsonWebKey == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'jsonWebKey' when calling IdentityProviderApi->CreateIdentityProviderKey");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = jsonWebKey;

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonWebKey>("/api/v1/idps/credentials/keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIdentityProviderKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an X.509 Certificate Public Key Adds a new X.509 certificate credential to the IdP key store.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonWebKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> CreateIdentityProviderKeyAsync(JsonWebKey jsonWebKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<JsonWebKey> localVarResponse = await CreateIdentityProviderKeyWithHttpInfoAsync(jsonWebKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Create an X.509 Certificate Public Key Adds a new X.509 certificate credential to the IdP key store.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonWebKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<JsonWebKey>> CreateIdentityProviderKeyWithHttpInfoAsync(JsonWebKey jsonWebKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jsonWebKey' is set
            if (jsonWebKey == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'jsonWebKey' when calling IdentityProviderApi->CreateIdentityProviderKey");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = jsonWebKey;

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonWebKey>("/api/v1/idps/credentials/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIdentityProviderKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate an Identity Provider Deactivates an active IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>IdentityProvider</returns>
        public IdentityProvider DeactivateIdentityProvider(string idpId)
        {
            Okta.Sdk.Client.ApiResponse<IdentityProvider> localVarResponse = DeactivateIdentityProviderWithHttpInfo(idpId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deactivate an Identity Provider Deactivates an active IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        public Okta.Sdk.Client.ApiResponse<IdentityProvider> DeactivateIdentityProviderWithHttpInfo(string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->DeactivateIdentityProvider");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IdentityProvider>("/api/v1/idps/{idpId}/lifecycle/deactivate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate an Identity Provider Deactivates an active IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityProvider</returns>
        public async System.Threading.Tasks.Task<IdentityProvider> DeactivateIdentityProviderAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<IdentityProvider> localVarResponse = await DeactivateIdentityProviderWithHttpInfoAsync(idpId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Deactivate an Identity Provider Deactivates an active IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<IdentityProvider>> DeactivateIdentityProviderWithHttpInfoAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->DeactivateIdentityProvider");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdentityProvider>("/api/v1/idps/{idpId}/lifecycle/deactivate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Identity Provider Removes an IdP from your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns></returns>
        public void DeleteIdentityProvider(string idpId)
        {
            DeleteIdentityProviderWithHttpInfo(idpId);
        }

        /// <summary>
        /// Delete an Identity Provider Removes an IdP from your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Okta.Sdk.Client.ApiResponse<Object> DeleteIdentityProviderWithHttpInfo(string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->DeleteIdentityProvider");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/idps/{idpId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Identity Provider Removes an IdP from your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIdentityProviderAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteIdentityProviderWithHttpInfoAsync(idpId, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete an Identity Provider Removes an IdP from your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> DeleteIdentityProviderWithHttpInfoAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->DeleteIdentityProvider");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/idps/{idpId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Signing Credential Key Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns></returns>
        public void DeleteIdentityProviderKey(string keyId)
        {
            DeleteIdentityProviderKeyWithHttpInfo(keyId);
        }

        /// <summary>
        /// Delete a Signing Credential Key Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Okta.Sdk.Client.ApiResponse<Object> DeleteIdentityProviderKeyWithHttpInfo(string keyId)
        {
            // verify the required parameter 'keyId' is set
            if (keyId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->DeleteIdentityProviderKey");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("keyId", Okta.Sdk.Client.ClientUtils.ParameterToString(keyId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/idps/credentials/keys/{keyId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityProviderKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Signing Credential Key Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIdentityProviderKeyAsync(string keyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteIdentityProviderKeyWithHttpInfoAsync(keyId, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete a Signing Credential Key Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> DeleteIdentityProviderKeyWithHttpInfoAsync(string keyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'keyId' is set
            if (keyId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->DeleteIdentityProviderKey");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("keyId", Okta.Sdk.Client.ClientUtils.ParameterToString(keyId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/idps/credentials/keys/{keyId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityProviderKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a Certificate Signing Request Generates a new key pair and returns a Certificate Signing Request for it.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="metadata"></param>
        /// <returns>Csr</returns>
        public Csr GenerateCsrForIdentityProvider(string idpId, CsrMetadata metadata)
        {
            Okta.Sdk.Client.ApiResponse<Csr> localVarResponse = GenerateCsrForIdentityProviderWithHttpInfo(idpId, metadata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a Certificate Signing Request Generates a new key pair and returns a Certificate Signing Request for it.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="metadata"></param>
        /// <returns>ApiResponse of Csr</returns>
        public Okta.Sdk.Client.ApiResponse<Csr> GenerateCsrForIdentityProviderWithHttpInfo(string idpId, CsrMetadata metadata)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GenerateCsrForIdentityProvider");
            }

            // verify the required parameter 'metadata' is set
            if (metadata == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'metadata' when calling IdentityProviderApi->GenerateCsrForIdentityProvider");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.Data = metadata;

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Csr>("/api/v1/idps/{idpId}/credentials/csrs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateCsrForIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a Certificate Signing Request Generates a new key pair and returns a Certificate Signing Request for it.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="metadata"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Csr</returns>
        public async System.Threading.Tasks.Task<Csr> GenerateCsrForIdentityProviderAsync(string idpId, CsrMetadata metadata, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<Csr> localVarResponse = await GenerateCsrForIdentityProviderWithHttpInfoAsync(idpId, metadata, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Generate a Certificate Signing Request Generates a new key pair and returns a Certificate Signing Request for it.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="metadata"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Csr)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Csr>> GenerateCsrForIdentityProviderWithHttpInfoAsync(string idpId, CsrMetadata metadata, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GenerateCsrForIdentityProvider");
            }

            // verify the required parameter 'metadata' is set
            if (metadata == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'metadata' when calling IdentityProviderApi->GenerateCsrForIdentityProvider");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.Data = metadata;

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Csr>("/api/v1/idps/{idpId}/credentials/csrs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateCsrForIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a new Signing Credential Key Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey GenerateIdentityProviderSigningKey(string idpId, int validityYears)
        {
            Okta.Sdk.Client.ApiResponse<JsonWebKey> localVarResponse = GenerateIdentityProviderSigningKeyWithHttpInfo(idpId, validityYears);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a new Signing Credential Key Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public Okta.Sdk.Client.ApiResponse<JsonWebKey> GenerateIdentityProviderSigningKeyWithHttpInfo(string idpId, int validityYears)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GenerateIdentityProviderSigningKey");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "validityYears", validityYears));

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonWebKey>("/api/v1/idps/{idpId}/credentials/keys/generate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateIdentityProviderSigningKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a new Signing Credential Key Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> GenerateIdentityProviderSigningKeyAsync(string idpId, int validityYears, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<JsonWebKey> localVarResponse = await GenerateIdentityProviderSigningKeyWithHttpInfoAsync(idpId, validityYears, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Generate a new Signing Credential Key Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<JsonWebKey>> GenerateIdentityProviderSigningKeyWithHttpInfoAsync(string idpId, int validityYears, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GenerateIdentityProviderSigningKey");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "validityYears", validityYears));

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonWebKey>("/api/v1/idps/{idpId}/credentials/keys/generate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateIdentityProviderSigningKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Certificate Signing Request Gets a specific Certificate Signing Request model by id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Csr</returns>
        public Csr GetCsrForIdentityProvider(string idpId, string csrId)
        {
            Okta.Sdk.Client.ApiResponse<Csr> localVarResponse = GetCsrForIdentityProviderWithHttpInfo(idpId, csrId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Certificate Signing Request Gets a specific Certificate Signing Request model by id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of Csr</returns>
        public Okta.Sdk.Client.ApiResponse<Csr> GetCsrForIdentityProviderWithHttpInfo(string idpId, string csrId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetCsrForIdentityProvider");
            }

            // verify the required parameter 'csrId' is set
            if (csrId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->GetCsrForIdentityProvider");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("csrId", Okta.Sdk.Client.ClientUtils.ParameterToString(csrId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Csr>("/api/v1/idps/{idpId}/credentials/csrs/{csrId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCsrForIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Certificate Signing Request Gets a specific Certificate Signing Request model by id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Csr</returns>
        public async System.Threading.Tasks.Task<Csr> GetCsrForIdentityProviderAsync(string idpId, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<Csr> localVarResponse = await GetCsrForIdentityProviderWithHttpInfoAsync(idpId, csrId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a Certificate Signing Request Gets a specific Certificate Signing Request model by id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Csr)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Csr>> GetCsrForIdentityProviderWithHttpInfoAsync(string idpId, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetCsrForIdentityProvider");
            }

            // verify the required parameter 'csrId' is set
            if (csrId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->GetCsrForIdentityProvider");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("csrId", Okta.Sdk.Client.ClientUtils.ParameterToString(csrId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Csr>("/api/v1/idps/{idpId}/credentials/csrs/{csrId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCsrForIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Identity Provider Fetches an IdP by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>IdentityProvider</returns>
        public IdentityProvider GetIdentityProvider(string idpId)
        {
            Okta.Sdk.Client.ApiResponse<IdentityProvider> localVarResponse = GetIdentityProviderWithHttpInfo(idpId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Identity Provider Fetches an IdP by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        public Okta.Sdk.Client.ApiResponse<IdentityProvider> GetIdentityProviderWithHttpInfo(string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetIdentityProvider");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IdentityProvider>("/api/v1/idps/{idpId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Identity Provider Fetches an IdP by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityProvider</returns>
        public async System.Threading.Tasks.Task<IdentityProvider> GetIdentityProviderAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<IdentityProvider> localVarResponse = await GetIdentityProviderWithHttpInfoAsync(idpId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve an Identity Provider Fetches an IdP by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<IdentityProvider>> GetIdentityProviderWithHttpInfoAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetIdentityProvider");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IdentityProvider>("/api/v1/idps/{idpId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a User Fetches a linked IdP user by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>IdentityProviderApplicationUser</returns>
        public IdentityProviderApplicationUser GetIdentityProviderApplicationUser(string idpId, string userId)
        {
            Okta.Sdk.Client.ApiResponse<IdentityProviderApplicationUser> localVarResponse = GetIdentityProviderApplicationUserWithHttpInfo(idpId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a User Fetches a linked IdP user by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of IdentityProviderApplicationUser</returns>
        public Okta.Sdk.Client.ApiResponse<IdentityProviderApplicationUser> GetIdentityProviderApplicationUserWithHttpInfo(string idpId, string userId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetIdentityProviderApplicationUser");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->GetIdentityProviderApplicationUser");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IdentityProviderApplicationUser>("/api/v1/idps/{idpId}/users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityProviderApplicationUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a User Fetches a linked IdP user by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityProviderApplicationUser</returns>
        public async System.Threading.Tasks.Task<IdentityProviderApplicationUser> GetIdentityProviderApplicationUserAsync(string idpId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<IdentityProviderApplicationUser> localVarResponse = await GetIdentityProviderApplicationUserWithHttpInfoAsync(idpId, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a User Fetches a linked IdP user by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityProviderApplicationUser)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<IdentityProviderApplicationUser>> GetIdentityProviderApplicationUserWithHttpInfoAsync(string idpId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetIdentityProviderApplicationUser");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->GetIdentityProviderApplicationUser");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IdentityProviderApplicationUser>("/api/v1/idps/{idpId}/users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityProviderApplicationUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Credential Key Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey GetIdentityProviderKey(string keyId)
        {
            Okta.Sdk.Client.ApiResponse<JsonWebKey> localVarResponse = GetIdentityProviderKeyWithHttpInfo(keyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Credential Key Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public Okta.Sdk.Client.ApiResponse<JsonWebKey> GetIdentityProviderKeyWithHttpInfo(string keyId)
        {
            // verify the required parameter 'keyId' is set
            if (keyId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->GetIdentityProviderKey");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("keyId", Okta.Sdk.Client.ClientUtils.ParameterToString(keyId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JsonWebKey>("/api/v1/idps/credentials/keys/{keyId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityProviderKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Credential Key Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> GetIdentityProviderKeyAsync(string keyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<JsonWebKey> localVarResponse = await GetIdentityProviderKeyWithHttpInfoAsync(keyId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve an Credential Key Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<JsonWebKey>> GetIdentityProviderKeyWithHttpInfoAsync(string keyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'keyId' is set
            if (keyId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->GetIdentityProviderKey");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("keyId", Okta.Sdk.Client.ClientUtils.ParameterToString(keyId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JsonWebKey>("/api/v1/idps/credentials/keys/{keyId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityProviderKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Signing Credential Key Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey GetIdentityProviderSigningKey(string idpId, string keyId)
        {
            Okta.Sdk.Client.ApiResponse<JsonWebKey> localVarResponse = GetIdentityProviderSigningKeyWithHttpInfo(idpId, keyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Signing Credential Key Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public Okta.Sdk.Client.ApiResponse<JsonWebKey> GetIdentityProviderSigningKeyWithHttpInfo(string idpId, string keyId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetIdentityProviderSigningKey");
            }

            // verify the required parameter 'keyId' is set
            if (keyId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->GetIdentityProviderSigningKey");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("keyId", Okta.Sdk.Client.ClientUtils.ParameterToString(keyId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JsonWebKey>("/api/v1/idps/{idpId}/credentials/keys/{keyId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityProviderSigningKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Signing Credential Key Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> GetIdentityProviderSigningKeyAsync(string idpId, string keyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<JsonWebKey> localVarResponse = await GetIdentityProviderSigningKeyWithHttpInfoAsync(idpId, keyId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a Signing Credential Key Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<JsonWebKey>> GetIdentityProviderSigningKeyWithHttpInfoAsync(string idpId, string keyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetIdentityProviderSigningKey");
            }

            // verify the required parameter 'keyId' is set
            if (keyId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->GetIdentityProviderSigningKey");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("keyId", Okta.Sdk.Client.ClientUtils.ParameterToString(keyId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JsonWebKey>("/api/v1/idps/{idpId}/credentials/keys/{keyId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityProviderSigningKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Link a User to a Social IdP Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="userIdentityProviderLinkRequest"></param>
        /// <returns>IdentityProviderApplicationUser</returns>
        public IdentityProviderApplicationUser LinkUserToIdentityProvider(string idpId, string userId, UserIdentityProviderLinkRequest userIdentityProviderLinkRequest)
        {
            Okta.Sdk.Client.ApiResponse<IdentityProviderApplicationUser> localVarResponse = LinkUserToIdentityProviderWithHttpInfo(idpId, userId, userIdentityProviderLinkRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Link a User to a Social IdP Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="userIdentityProviderLinkRequest"></param>
        /// <returns>ApiResponse of IdentityProviderApplicationUser</returns>
        public Okta.Sdk.Client.ApiResponse<IdentityProviderApplicationUser> LinkUserToIdentityProviderWithHttpInfo(string idpId, string userId, UserIdentityProviderLinkRequest userIdentityProviderLinkRequest)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->LinkUserToIdentityProvider");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->LinkUserToIdentityProvider");
            }

            // verify the required parameter 'userIdentityProviderLinkRequest' is set
            if (userIdentityProviderLinkRequest == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userIdentityProviderLinkRequest' when calling IdentityProviderApi->LinkUserToIdentityProvider");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = userIdentityProviderLinkRequest;

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IdentityProviderApplicationUser>("/api/v1/idps/{idpId}/users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkUserToIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Link a User to a Social IdP Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="userIdentityProviderLinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityProviderApplicationUser</returns>
        public async System.Threading.Tasks.Task<IdentityProviderApplicationUser> LinkUserToIdentityProviderAsync(string idpId, string userId, UserIdentityProviderLinkRequest userIdentityProviderLinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<IdentityProviderApplicationUser> localVarResponse = await LinkUserToIdentityProviderWithHttpInfoAsync(idpId, userId, userIdentityProviderLinkRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Link a User to a Social IdP Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="userIdentityProviderLinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityProviderApplicationUser)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<IdentityProviderApplicationUser>> LinkUserToIdentityProviderWithHttpInfoAsync(string idpId, string userId, UserIdentityProviderLinkRequest userIdentityProviderLinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->LinkUserToIdentityProvider");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->LinkUserToIdentityProvider");
            }

            // verify the required parameter 'userIdentityProviderLinkRequest' is set
            if (userIdentityProviderLinkRequest == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userIdentityProviderLinkRequest' when calling IdentityProviderApi->LinkUserToIdentityProvider");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = userIdentityProviderLinkRequest;

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdentityProviderApplicationUser>("/api/v1/idps/{idpId}/users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkUserToIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Certificate Signing Requests Enumerates Certificate Signing Requests for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>List&lt;Csr&gt;</returns>
        public List<Csr> ListCsrsForIdentityProvider(string idpId)
        {
            Okta.Sdk.Client.ApiResponse<List<Csr>> localVarResponse = ListCsrsForIdentityProviderWithHttpInfo(idpId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Certificate Signing Requests Enumerates Certificate Signing Requests for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of List&lt;Csr&gt;</returns>
        public Okta.Sdk.Client.ApiResponse<List<Csr>> ListCsrsForIdentityProviderWithHttpInfo(string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListCsrsForIdentityProvider");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Csr>>("/api/v1/idps/{idpId}/credentials/csrs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCsrsForIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Certificate Signing Requests Enumerates Certificate Signing Requests for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Csr&gt;</returns>
        public IOktaCollectionClient<Csr> ListCsrsForIdentityProviderAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListCsrsForIdentityProvider");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            return new OktaCollectionClient<Csr>(localVarRequestOptions, "/api/v1/idps/{idpId}/credentials/csrs", this.AsynchronousClient);
        }
        /// <summary>
        /// List all Certificate Signing Requests Enumerates Certificate Signing Requests for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Csr&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<Csr>>> ListCsrsForIdentityProviderWithHttpInfoAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListCsrsForIdentityProvider");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Csr>>("/api/v1/idps/{idpId}/credentials/csrs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCsrsForIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Users Find all the users linked to an identity provider
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>List&lt;IdentityProviderApplicationUser&gt;</returns>
        public List<IdentityProviderApplicationUser> ListIdentityProviderApplicationUsers(string idpId)
        {
            Okta.Sdk.Client.ApiResponse<List<IdentityProviderApplicationUser>> localVarResponse = ListIdentityProviderApplicationUsersWithHttpInfo(idpId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Users Find all the users linked to an identity provider
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of List&lt;IdentityProviderApplicationUser&gt;</returns>
        public Okta.Sdk.Client.ApiResponse<List<IdentityProviderApplicationUser>> ListIdentityProviderApplicationUsersWithHttpInfo(string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListIdentityProviderApplicationUsers");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<IdentityProviderApplicationUser>>("/api/v1/idps/{idpId}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIdentityProviderApplicationUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Users Find all the users linked to an identity provider
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;IdentityProviderApplicationUser&gt;</returns>
        public IOktaCollectionClient<IdentityProviderApplicationUser> ListIdentityProviderApplicationUsersAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListIdentityProviderApplicationUsers");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            return new OktaCollectionClient<IdentityProviderApplicationUser>(localVarRequestOptions, "/api/v1/idps/{idpId}/users", this.AsynchronousClient);
        }
        /// <summary>
        /// List all Users Find all the users linked to an identity provider
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;IdentityProviderApplicationUser&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<IdentityProviderApplicationUser>>> ListIdentityProviderApplicationUsersWithHttpInfoAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListIdentityProviderApplicationUsers");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<IdentityProviderApplicationUser>>("/api/v1/idps/{idpId}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIdentityProviderApplicationUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Credential Keys Enumerates IdP key credentials.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional, default to 20)</param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        public List<JsonWebKey> ListIdentityProviderKeys(string after = default(string), int? limit = default(int?))
        {
            Okta.Sdk.Client.ApiResponse<List<JsonWebKey>> localVarResponse = ListIdentityProviderKeysWithHttpInfo(after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Credential Keys Enumerates IdP key credentials.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional, default to 20)</param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        public Okta.Sdk.Client.ApiResponse<List<JsonWebKey>> ListIdentityProviderKeysWithHttpInfo(string after = default(string), int? limit = default(int?))
        {
            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<JsonWebKey>>("/api/v1/idps/credentials/keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIdentityProviderKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Credential Keys Enumerates IdP key credentials.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        public IOktaCollectionClient<JsonWebKey> ListIdentityProviderKeysAsync(string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            return new OktaCollectionClient<JsonWebKey>(localVarRequestOptions, "/api/v1/idps/credentials/keys", this.AsynchronousClient);
        }
        /// <summary>
        /// List all Credential Keys Enumerates IdP key credentials.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<JsonWebKey>>> ListIdentityProviderKeysWithHttpInfoAsync(string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<JsonWebKey>>("/api/v1/idps/credentials/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIdentityProviderKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Signing Credential Keys Enumerates signing key credentials for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        public List<JsonWebKey> ListIdentityProviderSigningKeys(string idpId)
        {
            Okta.Sdk.Client.ApiResponse<List<JsonWebKey>> localVarResponse = ListIdentityProviderSigningKeysWithHttpInfo(idpId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Signing Credential Keys Enumerates signing key credentials for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        public Okta.Sdk.Client.ApiResponse<List<JsonWebKey>> ListIdentityProviderSigningKeysWithHttpInfo(string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListIdentityProviderSigningKeys");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<JsonWebKey>>("/api/v1/idps/{idpId}/credentials/keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIdentityProviderSigningKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Signing Credential Keys Enumerates signing key credentials for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        public IOktaCollectionClient<JsonWebKey> ListIdentityProviderSigningKeysAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListIdentityProviderSigningKeys");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            return new OktaCollectionClient<JsonWebKey>(localVarRequestOptions, "/api/v1/idps/{idpId}/credentials/keys", this.AsynchronousClient);
        }
        /// <summary>
        /// List all Signing Credential Keys Enumerates signing key credentials for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<JsonWebKey>>> ListIdentityProviderSigningKeysWithHttpInfoAsync(string idpId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListIdentityProviderSigningKeys");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<JsonWebKey>>("/api/v1/idps/{idpId}/credentials/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIdentityProviderSigningKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Identity Providers Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional, default to 20)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <returns>List&lt;IdentityProvider&gt;</returns>
        public List<IdentityProvider> ListIdentityProviders(string q = default(string), string after = default(string), int? limit = default(int?), string type = default(string))
        {
            Okta.Sdk.Client.ApiResponse<List<IdentityProvider>> localVarResponse = ListIdentityProvidersWithHttpInfo(q, after, limit, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Identity Providers Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional, default to 20)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <returns>ApiResponse of List&lt;IdentityProvider&gt;</returns>
        public Okta.Sdk.Client.ApiResponse<List<IdentityProvider>> ListIdentityProvidersWithHttpInfo(string q = default(string), string after = default(string), int? limit = default(int?), string type = default(string))
        {
            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<IdentityProvider>>("/api/v1/idps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIdentityProviders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Identity Providers Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional, default to 20)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;IdentityProvider&gt;</returns>
        public IOktaCollectionClient<IdentityProvider> ListIdentityProvidersAsync(string q = default(string), string after = default(string), int? limit = default(int?), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            return new OktaCollectionClient<IdentityProvider>(localVarRequestOptions, "/api/v1/idps", this.AsynchronousClient);
        }
        /// <summary>
        /// List all Identity Providers Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional, default to 20)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;IdentityProvider&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<IdentityProvider>>> ListIdentityProvidersWithHttpInfoAsync(string q = default(string), string after = default(string), int? limit = default(int?), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<IdentityProvider>>("/api/v1/idps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIdentityProviders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Tokens from a OIDC Identity Provider Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>List&lt;SocialAuthToken&gt;</returns>
        public List<SocialAuthToken> ListSocialAuthTokens(string idpId, string userId)
        {
            Okta.Sdk.Client.ApiResponse<List<SocialAuthToken>> localVarResponse = ListSocialAuthTokensWithHttpInfo(idpId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Tokens from a OIDC Identity Provider Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;SocialAuthToken&gt;</returns>
        public Okta.Sdk.Client.ApiResponse<List<SocialAuthToken>> ListSocialAuthTokensWithHttpInfo(string idpId, string userId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListSocialAuthTokens");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->ListSocialAuthTokens");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SocialAuthToken>>("/api/v1/idps/{idpId}/users/{userId}/credentials/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSocialAuthTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Tokens from a OIDC Identity Provider Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SocialAuthToken&gt;</returns>
        public IOktaCollectionClient<SocialAuthToken> ListSocialAuthTokensAsync(string idpId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListSocialAuthTokens");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->ListSocialAuthTokens");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            return new OktaCollectionClient<SocialAuthToken>(localVarRequestOptions, "/api/v1/idps/{idpId}/users/{userId}/credentials/tokens", this.AsynchronousClient);
        }
        /// <summary>
        /// List all Tokens from a OIDC Identity Provider Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SocialAuthToken&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<SocialAuthToken>>> ListSocialAuthTokensWithHttpInfoAsync(string idpId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListSocialAuthTokens");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->ListSocialAuthTokens");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SocialAuthToken>>("/api/v1/idps/{idpId}/users/{userId}/credentials/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSocialAuthTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a Certificate Signing Request Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="body"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey PublishCsrForIdentityProvider(string idpId, string csrId, System.IO.Stream body)
        {
            Okta.Sdk.Client.ApiResponse<JsonWebKey> localVarResponse = PublishCsrForIdentityProviderWithHttpInfo(idpId, csrId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Publish a Certificate Signing Request Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public Okta.Sdk.Client.ApiResponse<JsonWebKey> PublishCsrForIdentityProviderWithHttpInfo(string idpId, string csrId, System.IO.Stream body)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            }

            // verify the required parameter 'csrId' is set
            if (csrId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-x509-ca-cert",
                "application/pkix-cert",
                "application/x-pem-file"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("csrId", Okta.Sdk.Client.ClientUtils.ParameterToString(csrId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JsonWebKey>("/api/v1/idps/{idpId}/credentials/csrs/{csrId}/lifecycle/publish", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublishCsrForIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a Certificate Signing Request Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> PublishCsrForIdentityProviderAsync(string idpId, string csrId, System.IO.Stream body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<JsonWebKey> localVarResponse = await PublishCsrForIdentityProviderWithHttpInfoAsync(idpId, csrId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Publish a Certificate Signing Request Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<JsonWebKey>> PublishCsrForIdentityProviderWithHttpInfoAsync(string idpId, string csrId, System.IO.Stream body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            }

            // verify the required parameter 'csrId' is set
            if (csrId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("csrId", Okta.Sdk.Client.ClientUtils.ParameterToString(csrId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JsonWebKey>("/api/v1/idps/{idpId}/credentials/csrs/{csrId}/lifecycle/publish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublishCsrForIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke a Certificate Signing Request Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns></returns>
        public void RevokeCsrForIdentityProvider(string idpId, string csrId)
        {
            RevokeCsrForIdentityProviderWithHttpInfo(idpId, csrId);
        }

        /// <summary>
        /// Revoke a Certificate Signing Request Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Okta.Sdk.Client.ApiResponse<Object> RevokeCsrForIdentityProviderWithHttpInfo(string idpId, string csrId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->RevokeCsrForIdentityProvider");
            }

            // verify the required parameter 'csrId' is set
            if (csrId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->RevokeCsrForIdentityProvider");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("csrId", Okta.Sdk.Client.ClientUtils.ParameterToString(csrId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/idps/{idpId}/credentials/csrs/{csrId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeCsrForIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke a Certificate Signing Request Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeCsrForIdentityProviderAsync(string idpId, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeCsrForIdentityProviderWithHttpInfoAsync(idpId, csrId, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Revoke a Certificate Signing Request Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> RevokeCsrForIdentityProviderWithHttpInfoAsync(string idpId, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->RevokeCsrForIdentityProvider");
            }

            // verify the required parameter 'csrId' is set
            if (csrId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->RevokeCsrForIdentityProvider");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("csrId", Okta.Sdk.Client.ClientUtils.ParameterToString(csrId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/idps/{idpId}/credentials/csrs/{csrId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeCsrForIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlink a User from IdP Removes the link between the Okta user and the IdP user.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        public void UnlinkUserFromIdentityProvider(string idpId, string userId)
        {
            UnlinkUserFromIdentityProviderWithHttpInfo(idpId, userId);
        }

        /// <summary>
        /// Unlink a User from IdP Removes the link between the Okta user and the IdP user.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Okta.Sdk.Client.ApiResponse<Object> UnlinkUserFromIdentityProviderWithHttpInfo(string idpId, string userId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->UnlinkUserFromIdentityProvider");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->UnlinkUserFromIdentityProvider");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/idps/{idpId}/users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlinkUserFromIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlink a User from IdP Removes the link between the Okta user and the IdP user.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnlinkUserFromIdentityProviderAsync(string idpId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnlinkUserFromIdentityProviderWithHttpInfoAsync(idpId, userId, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Unlink a User from IdP Removes the link between the Okta user and the IdP user.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> UnlinkUserFromIdentityProviderWithHttpInfoAsync(string idpId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->UnlinkUserFromIdentityProvider");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->UnlinkUserFromIdentityProvider");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Okta.Sdk.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/idps/{idpId}/users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlinkUserFromIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace an Identity Provider Updates the configuration for an IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="identityProvider"></param>
        /// <returns>IdentityProvider</returns>
        public IdentityProvider UpdateIdentityProvider(string idpId, IdentityProvider identityProvider)
        {
            Okta.Sdk.Client.ApiResponse<IdentityProvider> localVarResponse = UpdateIdentityProviderWithHttpInfo(idpId, identityProvider);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace an Identity Provider Updates the configuration for an IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="identityProvider"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        public Okta.Sdk.Client.ApiResponse<IdentityProvider> UpdateIdentityProviderWithHttpInfo(string idpId, IdentityProvider identityProvider)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->UpdateIdentityProvider");
            }

            // verify the required parameter 'identityProvider' is set
            if (identityProvider == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'identityProvider' when calling IdentityProviderApi->UpdateIdentityProvider");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.Data = identityProvider;

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<IdentityProvider>("/api/v1/idps/{idpId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace an Identity Provider Updates the configuration for an IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="identityProvider"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityProvider</returns>
        public async System.Threading.Tasks.Task<IdentityProvider> UpdateIdentityProviderAsync(string idpId, IdentityProvider identityProvider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<IdentityProvider> localVarResponse = await UpdateIdentityProviderWithHttpInfoAsync(idpId, identityProvider, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Replace an Identity Provider Updates the configuration for an IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="identityProvider"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<IdentityProvider>> UpdateIdentityProviderWithHttpInfoAsync(string idpId, IdentityProvider identityProvider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->UpdateIdentityProvider");
            }

            // verify the required parameter 'identityProvider' is set
            if (identityProvider == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'identityProvider' when calling IdentityProviderApi->UpdateIdentityProvider");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("idpId", Okta.Sdk.Client.ClientUtils.ParameterToString(idpId)); // path parameter
            localVarRequestOptions.Data = identityProvider;

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<IdentityProvider>("/api/v1/idps/{idpId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
