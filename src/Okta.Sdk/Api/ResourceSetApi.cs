/*
 * Okta Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResourceSetApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add more Members to a binding
        /// </summary>
        /// <remarks>
        /// Adds more members to a resource set binding
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSetBindingResponse</returns>
        System.Threading.Tasks.Task<ResourceSetBindingResponse> AddMembersToBindingAsync(  string resourceSetId ,   string roleIdOrLabel ,   ResourceSetBindingAddMembersRequest instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add more Members to a binding
        /// </summary>
        /// <remarks>
        /// Adds more members to a resource set binding
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSetBindingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceSetBindingResponse>> AddMembersToBindingWithHttpInfoAsync(  string resourceSetId ,   string roleIdOrLabel ,   ResourceSetBindingAddMembersRequest instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a Resource to a resource set
        /// </summary>
        /// <remarks>
        /// Adds more resources to a resource set
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSet</returns>
        System.Threading.Tasks.Task<ResourceSet> AddResourceSetResourceAsync(  string resourceSetId ,   ResourceSetResourcePatchRequest instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a Resource to a resource set
        /// </summary>
        /// <remarks>
        /// Adds more resources to a resource set
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceSet>> AddResourceSetResourceWithHttpInfoAsync(  string resourceSetId ,   ResourceSetResourcePatchRequest instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a Resource Set
        /// </summary>
        /// <remarks>
        /// Creates a new resource set
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSet</returns>
        System.Threading.Tasks.Task<ResourceSet> CreateResourceSetAsync(  ResourceSet instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a Resource Set
        /// </summary>
        /// <remarks>
        /// Creates a new resource set
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceSet>> CreateResourceSetWithHttpInfoAsync(  ResourceSet instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a Resource Set Binding
        /// </summary>
        /// <remarks>
        /// Creates a new resource set binding
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSetBindingResponse</returns>
        System.Threading.Tasks.Task<ResourceSetBindingResponse> CreateResourceSetBindingAsync(  string resourceSetId ,   ResourceSetBindingCreateRequest instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a Resource Set Binding
        /// </summary>
        /// <remarks>
        /// Creates a new resource set binding
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSetBindingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceSetBindingResponse>> CreateResourceSetBindingWithHttpInfoAsync(  string resourceSetId ,   ResourceSetBindingCreateRequest instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Binding
        /// </summary>
        /// <remarks>
        /// Deletes a resource set binding by &#x60;resourceSetId&#x60; and &#x60;roleIdOrLabel&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBindingAsync(  string resourceSetId ,   string roleIdOrLabel , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Binding
        /// </summary>
        /// <remarks>
        /// Deletes a resource set binding by &#x60;resourceSetId&#x60; and &#x60;roleIdOrLabel&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBindingWithHttpInfoAsync(  string resourceSetId ,   string roleIdOrLabel , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Resource Set
        /// </summary>
        /// <remarks>
        /// Deletes a role by &#x60;resourceSetId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteResourceSetAsync(  string resourceSetId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Resource Set
        /// </summary>
        /// <remarks>
        /// Deletes a role by &#x60;resourceSetId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResourceSetWithHttpInfoAsync(  string resourceSetId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Resource from a resource set
        /// </summary>
        /// <remarks>
        /// Deletes a resource identified by &#x60;resourceId&#x60; from a resource set
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="resourceId">&#x60;id&#x60; of a resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteResourceSetResourceAsync(  string resourceSetId ,   string resourceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Resource from a resource set
        /// </summary>
        /// <remarks>
        /// Deletes a resource identified by &#x60;resourceId&#x60; from a resource set
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="resourceId">&#x60;id&#x60; of a resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResourceSetResourceWithHttpInfoAsync(  string resourceSetId ,   string resourceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Binding
        /// </summary>
        /// <remarks>
        /// Retrieves a resource set binding by &#x60;resourceSetId&#x60; and &#x60;roleIdOrLabel&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSetBindingResponse</returns>
        System.Threading.Tasks.Task<ResourceSetBindingResponse> GetBindingAsync(  string resourceSetId ,   string roleIdOrLabel , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Binding
        /// </summary>
        /// <remarks>
        /// Retrieves a resource set binding by &#x60;resourceSetId&#x60; and &#x60;roleIdOrLabel&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSetBindingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceSetBindingResponse>> GetBindingWithHttpInfoAsync(  string resourceSetId ,   string roleIdOrLabel , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Member of a binding
        /// </summary>
        /// <remarks>
        /// Retreieves a member identified by &#x60;memberId&#x60; for a binding
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="memberId">&#x60;id&#x60; of a member</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSetBindingMember</returns>
        System.Threading.Tasks.Task<ResourceSetBindingMember> GetMemberOfBindingAsync(  string resourceSetId ,   string roleIdOrLabel ,   string memberId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Member of a binding
        /// </summary>
        /// <remarks>
        /// Retreieves a member identified by &#x60;memberId&#x60; for a binding
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="memberId">&#x60;id&#x60; of a member</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSetBindingMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceSetBindingMember>> GetMemberOfBindingWithHttpInfoAsync(  string resourceSetId ,   string roleIdOrLabel ,   string memberId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Resource Set
        /// </summary>
        /// <remarks>
        /// Retrieve a resource set by &#x60;resourceSetId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSet</returns>
        System.Threading.Tasks.Task<ResourceSet> GetResourceSetAsync(  string resourceSetId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Resource Set
        /// </summary>
        /// <remarks>
        /// Retrieve a resource set by &#x60;resourceSetId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceSet>> GetResourceSetWithHttpInfoAsync(  string resourceSetId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Bindings
        /// </summary>
        /// <remarks>
        /// Lists all resource set bindings with pagination support
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSetBindings</returns>
        System.Threading.Tasks.Task<ResourceSetBindings> ListBindingsAsync(  string resourceSetId ,   string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Bindings
        /// </summary>
        /// <remarks>
        /// Lists all resource set bindings with pagination support
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSetBindings)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceSetBindings>> ListBindingsWithHttpInfoAsync(  string resourceSetId ,   string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Members of a binding
        /// </summary>
        /// <remarks>
        /// Lists all members of a resource set binding with pagination support
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSetBindingMembers</returns>
        System.Threading.Tasks.Task<ResourceSetBindingMembers> ListMembersOfBindingAsync(  string resourceSetId ,   string roleIdOrLabel ,   string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Members of a binding
        /// </summary>
        /// <remarks>
        /// Lists all members of a resource set binding with pagination support
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSetBindingMembers)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceSetBindingMembers>> ListMembersOfBindingWithHttpInfoAsync(  string resourceSetId ,   string roleIdOrLabel ,   string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Resources of a resource set
        /// </summary>
        /// <remarks>
        /// Lists all resources that make up the resource set
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSetResources</returns>
        System.Threading.Tasks.Task<ResourceSetResources> ListResourceSetResourcesAsync(  string resourceSetId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Resources of a resource set
        /// </summary>
        /// <remarks>
        /// Lists all resources that make up the resource set
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSetResources)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceSetResources>> ListResourceSetResourcesWithHttpInfoAsync(  string resourceSetId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Resource Sets
        /// </summary>
        /// <remarks>
        /// Lists all resource sets with pagination support
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSets</returns>
        System.Threading.Tasks.Task<ResourceSets> ListResourceSetsAsync(  string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Resource Sets
        /// </summary>
        /// <remarks>
        /// Lists all resource sets with pagination support
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSets)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceSets>> ListResourceSetsWithHttpInfoAsync(  string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace a Resource Set
        /// </summary>
        /// <remarks>
        /// Replaces a resource set by &#x60;resourceSetId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSet</returns>
        System.Threading.Tasks.Task<ResourceSet> ReplaceResourceSetAsync(  string resourceSetId ,   ResourceSet instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace a Resource Set
        /// </summary>
        /// <remarks>
        /// Replaces a resource set by &#x60;resourceSetId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceSet>> ReplaceResourceSetWithHttpInfoAsync(  string resourceSetId ,   ResourceSet instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unassign a Member from a binding
        /// </summary>
        /// <remarks>
        /// Unassigns a member identified by &#x60;memberId&#x60; from a binding
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="memberId">&#x60;id&#x60; of a member</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnassignMemberFromBindingAsync(  string resourceSetId ,   string roleIdOrLabel ,   string memberId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unassign a Member from a binding
        /// </summary>
        /// <remarks>
        /// Unassigns a member identified by &#x60;memberId&#x60; from a binding
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="memberId">&#x60;id&#x60; of a member</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnassignMemberFromBindingWithHttpInfoAsync(  string resourceSetId ,   string roleIdOrLabel ,   string memberId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResourceSetApi :  IResourceSetApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ResourceSetApi : IResourceSetApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        private IOAuthTokenProvider _oAuthTokenProvider;
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceSetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <param name="oAuthTokenProvider">The access token provider to be used when the AuthorizationMode is equals to Private Key. Optional./param>
        /// <param name="webProxy">The web proxy to be used by the HTTP client. Optional./param>
        /// <returns></returns>
        public ResourceSetApi(Okta.Sdk.Client.Configuration configuration = null, IOAuthTokenProvider oAuthTokenProvider = null, WebProxy webProxy = null)
        {
            configuration = Sdk.Client.Configuration.GetConfigurationOrDefault(configuration);

            this.Configuration = Okta.Sdk.Client.Configuration.MergeConfigurations(
                Okta.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            
            Sdk.Client.Configuration.Validate((Configuration)this.Configuration);
            
            _oAuthTokenProvider = NullOAuthTokenProvider.Instance;
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration))
            {
                _oAuthTokenProvider = oAuthTokenProvider ?? new DefaultOAuthTokenProvider(Configuration);
            }
            
            this.AsynchronousClient = new Okta.Sdk.Client.ApiClient(this.Configuration.OktaDomain, _oAuthTokenProvider, webProxy);
            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceSetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ResourceSetApi(Okta.Sdk.Client.IAsynchronousClient asyncClient, Okta.Sdk.Client.IReadableConfiguration configuration)
        {
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
             _oAuthTokenProvider = NullOAuthTokenProvider.Instance;
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration))
            {
                _oAuthTokenProvider = new DefaultOAuthTokenProvider(Configuration);
            }
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Okta.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.OktaDomain;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
         
        /// <summary>
        /// Add more Members to a binding Adds more members to a resource set binding
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSetBindingResponse</returns>
        public async System.Threading.Tasks.Task<ResourceSetBindingResponse> AddMembersToBindingAsync(  string resourceSetId ,   string roleIdOrLabel ,   ResourceSetBindingAddMembersRequest instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ResourceSetBindingResponse> localVarResponse = await AddMembersToBindingWithHttpInfoAsync(resourceSetId, roleIdOrLabel, instance, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Add more Members to a binding Adds more members to a resource set binding
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSetBindingResponse)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ResourceSetBindingResponse>> AddMembersToBindingWithHttpInfoAsync(  string resourceSetId ,   string roleIdOrLabel ,   ResourceSetBindingAddMembersRequest instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceSetId' is set
            if (resourceSetId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resourceSetId' when calling ResourceSetApi->AddMembersToBinding");
            }

            // verify the required parameter 'roleIdOrLabel' is set
            if (roleIdOrLabel == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'roleIdOrLabel' when calling ResourceSetApi->AddMembersToBinding");
            }

            // verify the required parameter 'instance' is set
            if (instance == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'instance' when calling ResourceSetApi->AddMembersToBinding");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceSetId", Okta.Sdk.Client.ClientUtils.ParameterToString(resourceSetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("roleIdOrLabel", Okta.Sdk.Client.ClientUtils.ParameterToString(roleIdOrLabel)); // path parameter
            localVarRequestOptions.Data = instance;

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ResourceSetBindingResponse>("/api/v1/iam/resource-sets/{resourceSetId}/bindings/{roleIdOrLabel}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMembersToBinding", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a Resource to a resource set Adds more resources to a resource set
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSet</returns>
        public async System.Threading.Tasks.Task<ResourceSet> AddResourceSetResourceAsync(  string resourceSetId ,   ResourceSetResourcePatchRequest instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ResourceSet> localVarResponse = await AddResourceSetResourceWithHttpInfoAsync(resourceSetId, instance, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Add a Resource to a resource set Adds more resources to a resource set
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSet)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ResourceSet>> AddResourceSetResourceWithHttpInfoAsync(  string resourceSetId ,   ResourceSetResourcePatchRequest instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceSetId' is set
            if (resourceSetId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resourceSetId' when calling ResourceSetApi->AddResourceSetResource");
            }

            // verify the required parameter 'instance' is set
            if (instance == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'instance' when calling ResourceSetApi->AddResourceSetResource");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceSetId", Okta.Sdk.Client.ClientUtils.ParameterToString(resourceSetId)); // path parameter
            localVarRequestOptions.Data = instance;

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ResourceSet>("/api/v1/iam/resource-sets/{resourceSetId}/resources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddResourceSetResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Resource Set Creates a new resource set
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSet</returns>
        public async System.Threading.Tasks.Task<ResourceSet> CreateResourceSetAsync(  ResourceSet instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ResourceSet> localVarResponse = await CreateResourceSetWithHttpInfoAsync(instance, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Create a Resource Set Creates a new resource set
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSet)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ResourceSet>> CreateResourceSetWithHttpInfoAsync(  ResourceSet instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instance' is set
            if (instance == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'instance' when calling ResourceSetApi->CreateResourceSet");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = instance;

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResourceSet>("/api/v1/iam/resource-sets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateResourceSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Resource Set Binding Creates a new resource set binding
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSetBindingResponse</returns>
        public async System.Threading.Tasks.Task<ResourceSetBindingResponse> CreateResourceSetBindingAsync(  string resourceSetId ,   ResourceSetBindingCreateRequest instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ResourceSetBindingResponse> localVarResponse = await CreateResourceSetBindingWithHttpInfoAsync(resourceSetId, instance, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Create a Resource Set Binding Creates a new resource set binding
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSetBindingResponse)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ResourceSetBindingResponse>> CreateResourceSetBindingWithHttpInfoAsync(  string resourceSetId ,   ResourceSetBindingCreateRequest instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceSetId' is set
            if (resourceSetId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resourceSetId' when calling ResourceSetApi->CreateResourceSetBinding");
            }

            // verify the required parameter 'instance' is set
            if (instance == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'instance' when calling ResourceSetApi->CreateResourceSetBinding");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceSetId", Okta.Sdk.Client.ClientUtils.ParameterToString(resourceSetId)); // path parameter
            localVarRequestOptions.Data = instance;

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResourceSetBindingResponse>("/api/v1/iam/resource-sets/{resourceSetId}/bindings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateResourceSetBinding", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Binding Deletes a resource set binding by &#x60;resourceSetId&#x60; and &#x60;roleIdOrLabel&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBindingAsync(  string resourceSetId ,   string roleIdOrLabel , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteBindingWithHttpInfoAsync(resourceSetId, roleIdOrLabel, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete a Binding Deletes a resource set binding by &#x60;resourceSetId&#x60; and &#x60;roleIdOrLabel&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> DeleteBindingWithHttpInfoAsync(  string resourceSetId ,   string roleIdOrLabel , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceSetId' is set
            if (resourceSetId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resourceSetId' when calling ResourceSetApi->DeleteBinding");
            }

            // verify the required parameter 'roleIdOrLabel' is set
            if (roleIdOrLabel == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'roleIdOrLabel' when calling ResourceSetApi->DeleteBinding");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceSetId", Okta.Sdk.Client.ClientUtils.ParameterToString(resourceSetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("roleIdOrLabel", Okta.Sdk.Client.ClientUtils.ParameterToString(roleIdOrLabel)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/iam/resource-sets/{resourceSetId}/bindings/{roleIdOrLabel}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBinding", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Resource Set Deletes a role by &#x60;resourceSetId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteResourceSetAsync(  string resourceSetId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteResourceSetWithHttpInfoAsync(resourceSetId, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete a Resource Set Deletes a role by &#x60;resourceSetId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> DeleteResourceSetWithHttpInfoAsync(  string resourceSetId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceSetId' is set
            if (resourceSetId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resourceSetId' when calling ResourceSetApi->DeleteResourceSet");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceSetId", Okta.Sdk.Client.ClientUtils.ParameterToString(resourceSetId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/iam/resource-sets/{resourceSetId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteResourceSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Resource from a resource set Deletes a resource identified by &#x60;resourceId&#x60; from a resource set
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="resourceId">&#x60;id&#x60; of a resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteResourceSetResourceAsync(  string resourceSetId ,   string resourceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteResourceSetResourceWithHttpInfoAsync(resourceSetId, resourceId, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete a Resource from a resource set Deletes a resource identified by &#x60;resourceId&#x60; from a resource set
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="resourceId">&#x60;id&#x60; of a resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> DeleteResourceSetResourceWithHttpInfoAsync(  string resourceSetId ,   string resourceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceSetId' is set
            if (resourceSetId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resourceSetId' when calling ResourceSetApi->DeleteResourceSetResource");
            }

            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resourceId' when calling ResourceSetApi->DeleteResourceSetResource");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceSetId", Okta.Sdk.Client.ClientUtils.ParameterToString(resourceSetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceId", Okta.Sdk.Client.ClientUtils.ParameterToString(resourceId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/iam/resource-sets/{resourceSetId}/resources/{resourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteResourceSetResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Binding Retrieves a resource set binding by &#x60;resourceSetId&#x60; and &#x60;roleIdOrLabel&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSetBindingResponse</returns>
        public async System.Threading.Tasks.Task<ResourceSetBindingResponse> GetBindingAsync(  string resourceSetId ,   string roleIdOrLabel , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ResourceSetBindingResponse> localVarResponse = await GetBindingWithHttpInfoAsync(resourceSetId, roleIdOrLabel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a Binding Retrieves a resource set binding by &#x60;resourceSetId&#x60; and &#x60;roleIdOrLabel&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSetBindingResponse)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ResourceSetBindingResponse>> GetBindingWithHttpInfoAsync(  string resourceSetId ,   string roleIdOrLabel , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceSetId' is set
            if (resourceSetId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resourceSetId' when calling ResourceSetApi->GetBinding");
            }

            // verify the required parameter 'roleIdOrLabel' is set
            if (roleIdOrLabel == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'roleIdOrLabel' when calling ResourceSetApi->GetBinding");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceSetId", Okta.Sdk.Client.ClientUtils.ParameterToString(resourceSetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("roleIdOrLabel", Okta.Sdk.Client.ClientUtils.ParameterToString(roleIdOrLabel)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceSetBindingResponse>("/api/v1/iam/resource-sets/{resourceSetId}/bindings/{roleIdOrLabel}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBinding", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Member of a binding Retreieves a member identified by &#x60;memberId&#x60; for a binding
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="memberId">&#x60;id&#x60; of a member</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSetBindingMember</returns>
        public async System.Threading.Tasks.Task<ResourceSetBindingMember> GetMemberOfBindingAsync(  string resourceSetId ,   string roleIdOrLabel ,   string memberId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ResourceSetBindingMember> localVarResponse = await GetMemberOfBindingWithHttpInfoAsync(resourceSetId, roleIdOrLabel, memberId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a Member of a binding Retreieves a member identified by &#x60;memberId&#x60; for a binding
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="memberId">&#x60;id&#x60; of a member</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSetBindingMember)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ResourceSetBindingMember>> GetMemberOfBindingWithHttpInfoAsync(  string resourceSetId ,   string roleIdOrLabel ,   string memberId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceSetId' is set
            if (resourceSetId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resourceSetId' when calling ResourceSetApi->GetMemberOfBinding");
            }

            // verify the required parameter 'roleIdOrLabel' is set
            if (roleIdOrLabel == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'roleIdOrLabel' when calling ResourceSetApi->GetMemberOfBinding");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'memberId' when calling ResourceSetApi->GetMemberOfBinding");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceSetId", Okta.Sdk.Client.ClientUtils.ParameterToString(resourceSetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("roleIdOrLabel", Okta.Sdk.Client.ClientUtils.ParameterToString(roleIdOrLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Okta.Sdk.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceSetBindingMember>("/api/v1/iam/resource-sets/{resourceSetId}/bindings/{roleIdOrLabel}/members/{memberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMemberOfBinding", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Resource Set Retrieve a resource set by &#x60;resourceSetId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSet</returns>
        public async System.Threading.Tasks.Task<ResourceSet> GetResourceSetAsync(  string resourceSetId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ResourceSet> localVarResponse = await GetResourceSetWithHttpInfoAsync(resourceSetId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a Resource Set Retrieve a resource set by &#x60;resourceSetId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSet)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ResourceSet>> GetResourceSetWithHttpInfoAsync(  string resourceSetId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceSetId' is set
            if (resourceSetId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resourceSetId' when calling ResourceSetApi->GetResourceSet");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceSetId", Okta.Sdk.Client.ClientUtils.ParameterToString(resourceSetId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceSet>("/api/v1/iam/resource-sets/{resourceSetId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Bindings Lists all resource set bindings with pagination support
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSetBindings</returns>
        public async System.Threading.Tasks.Task<ResourceSetBindings> ListBindingsAsync(  string resourceSetId ,   string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ResourceSetBindings> localVarResponse = await ListBindingsWithHttpInfoAsync(resourceSetId, after, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// List all Bindings Lists all resource set bindings with pagination support
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSetBindings)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ResourceSetBindings>> ListBindingsWithHttpInfoAsync(  string resourceSetId ,   string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceSetId' is set
            if (resourceSetId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resourceSetId' when calling ResourceSetApi->ListBindings");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceSetId", Okta.Sdk.Client.ClientUtils.ParameterToString(resourceSetId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceSetBindings>("/api/v1/iam/resource-sets/{resourceSetId}/bindings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBindings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Members of a binding Lists all members of a resource set binding with pagination support
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSetBindingMembers</returns>
        public async System.Threading.Tasks.Task<ResourceSetBindingMembers> ListMembersOfBindingAsync(  string resourceSetId ,   string roleIdOrLabel ,   string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ResourceSetBindingMembers> localVarResponse = await ListMembersOfBindingWithHttpInfoAsync(resourceSetId, roleIdOrLabel, after, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// List all Members of a binding Lists all members of a resource set binding with pagination support
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSetBindingMembers)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ResourceSetBindingMembers>> ListMembersOfBindingWithHttpInfoAsync(  string resourceSetId ,   string roleIdOrLabel ,   string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceSetId' is set
            if (resourceSetId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resourceSetId' when calling ResourceSetApi->ListMembersOfBinding");
            }

            // verify the required parameter 'roleIdOrLabel' is set
            if (roleIdOrLabel == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'roleIdOrLabel' when calling ResourceSetApi->ListMembersOfBinding");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceSetId", Okta.Sdk.Client.ClientUtils.ParameterToString(resourceSetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("roleIdOrLabel", Okta.Sdk.Client.ClientUtils.ParameterToString(roleIdOrLabel)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceSetBindingMembers>("/api/v1/iam/resource-sets/{resourceSetId}/bindings/{roleIdOrLabel}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMembersOfBinding", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Resources of a resource set Lists all resources that make up the resource set
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSetResources</returns>
        public async System.Threading.Tasks.Task<ResourceSetResources> ListResourceSetResourcesAsync(  string resourceSetId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ResourceSetResources> localVarResponse = await ListResourceSetResourcesWithHttpInfoAsync(resourceSetId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// List all Resources of a resource set Lists all resources that make up the resource set
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSetResources)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ResourceSetResources>> ListResourceSetResourcesWithHttpInfoAsync(  string resourceSetId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceSetId' is set
            if (resourceSetId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resourceSetId' when calling ResourceSetApi->ListResourceSetResources");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceSetId", Okta.Sdk.Client.ClientUtils.ParameterToString(resourceSetId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceSetResources>("/api/v1/iam/resource-sets/{resourceSetId}/resources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListResourceSetResources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Resource Sets Lists all resource sets with pagination support
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSets</returns>
        public async System.Threading.Tasks.Task<ResourceSets> ListResourceSetsAsync(  string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ResourceSets> localVarResponse = await ListResourceSetsWithHttpInfoAsync(after, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// List all Resource Sets Lists all resource sets with pagination support
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSets)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ResourceSets>> ListResourceSetsWithHttpInfoAsync(  string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceSets>("/api/v1/iam/resource-sets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListResourceSets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace a Resource Set Replaces a resource set by &#x60;resourceSetId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceSet</returns>
        public async System.Threading.Tasks.Task<ResourceSet> ReplaceResourceSetAsync(  string resourceSetId ,   ResourceSet instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ResourceSet> localVarResponse = await ReplaceResourceSetWithHttpInfoAsync(resourceSetId, instance, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Replace a Resource Set Replaces a resource set by &#x60;resourceSetId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceSet)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ResourceSet>> ReplaceResourceSetWithHttpInfoAsync(  string resourceSetId ,   ResourceSet instance , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceSetId' is set
            if (resourceSetId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resourceSetId' when calling ResourceSetApi->ReplaceResourceSet");
            }

            // verify the required parameter 'instance' is set
            if (instance == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'instance' when calling ResourceSetApi->ReplaceResourceSet");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceSetId", Okta.Sdk.Client.ClientUtils.ParameterToString(resourceSetId)); // path parameter
            localVarRequestOptions.Data = instance;

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ResourceSet>("/api/v1/iam/resource-sets/{resourceSetId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceResourceSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unassign a Member from a binding Unassigns a member identified by &#x60;memberId&#x60; from a binding
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="memberId">&#x60;id&#x60; of a member</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnassignMemberFromBindingAsync(  string resourceSetId ,   string roleIdOrLabel ,   string memberId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnassignMemberFromBindingWithHttpInfoAsync(resourceSetId, roleIdOrLabel, memberId, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Unassign a Member from a binding Unassigns a member identified by &#x60;memberId&#x60; from a binding
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSetId">&#x60;id&#x60; of a resource set</param>
        /// <param name="roleIdOrLabel">&#x60;id&#x60; or &#x60;label&#x60; of the role</param>
        /// <param name="memberId">&#x60;id&#x60; of a member</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> UnassignMemberFromBindingWithHttpInfoAsync(  string resourceSetId ,   string roleIdOrLabel ,   string memberId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceSetId' is set
            if (resourceSetId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'resourceSetId' when calling ResourceSetApi->UnassignMemberFromBinding");
            }

            // verify the required parameter 'roleIdOrLabel' is set
            if (roleIdOrLabel == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'roleIdOrLabel' when calling ResourceSetApi->UnassignMemberFromBinding");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'memberId' when calling ResourceSetApi->UnassignMemberFromBinding");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceSetId", Okta.Sdk.Client.ClientUtils.ParameterToString(resourceSetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("roleIdOrLabel", Okta.Sdk.Client.ClientUtils.ParameterToString(roleIdOrLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Okta.Sdk.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/iam/resource-sets/{resourceSetId}/bindings/{roleIdOrLabel}/members/{memberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnassignMemberFromBinding", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
