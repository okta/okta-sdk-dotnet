/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial interface IApiServiceIntegrationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Activate an API Service Integration instance Secret
        /// </summary>
        /// <remarks>
        /// Activates an API Service Integration instance Secret by &#x60;secretId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="secretId">&#x60;id&#x60; of the API Service Integration instance Secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of APIServiceIntegrationInstanceSecret</returns>
        System.Threading.Tasks.Task<APIServiceIntegrationInstanceSecret> ActivateApiServiceIntegrationInstanceSecretAsync(  string apiServiceId ,   string secretId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Activate an API Service Integration instance Secret
        /// </summary>
        /// <remarks>
        /// Activates an API Service Integration instance Secret by &#x60;secretId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="secretId">&#x60;id&#x60; of the API Service Integration instance Secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (APIServiceIntegrationInstanceSecret)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIServiceIntegrationInstanceSecret>> ActivateApiServiceIntegrationInstanceSecretWithHttpInfoAsync(  string apiServiceId ,   string secretId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an API Service Integration instance
        /// </summary>
        /// <remarks>
        /// Creates and authorizes an API Service Integration instance
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAPIServiceIntegrationInstanceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostAPIServiceIntegrationInstance</returns>
        System.Threading.Tasks.Task<PostAPIServiceIntegrationInstance> CreateApiServiceIntegrationInstanceAsync(  PostAPIServiceIntegrationInstanceRequest postAPIServiceIntegrationInstanceRequest , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an API Service Integration instance
        /// </summary>
        /// <remarks>
        /// Creates and authorizes an API Service Integration instance
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAPIServiceIntegrationInstanceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostAPIServiceIntegrationInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostAPIServiceIntegrationInstance>> CreateApiServiceIntegrationInstanceWithHttpInfoAsync(  PostAPIServiceIntegrationInstanceRequest postAPIServiceIntegrationInstanceRequest , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an API Service Integration instance Secret
        /// </summary>
        /// <remarks>
        /// Creates an API Service Integration instance Secret object with a new active client secret. You can create up to two Secret objects. An error is returned if you attempt to create more than two Secret objects.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of APIServiceIntegrationInstanceSecret</returns>
        System.Threading.Tasks.Task<APIServiceIntegrationInstanceSecret> CreateApiServiceIntegrationInstanceSecretAsync(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an API Service Integration instance Secret
        /// </summary>
        /// <remarks>
        /// Creates an API Service Integration instance Secret object with a new active client secret. You can create up to two Secret objects. An error is returned if you attempt to create more than two Secret objects.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (APIServiceIntegrationInstanceSecret)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIServiceIntegrationInstanceSecret>> CreateApiServiceIntegrationInstanceSecretWithHttpInfoAsync(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deactivate an API Service Integration instance Secret
        /// </summary>
        /// <remarks>
        /// Deactivates an API Service Integration instance Secret by &#x60;secretId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="secretId">&#x60;id&#x60; of the API Service Integration instance Secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of APIServiceIntegrationInstanceSecret</returns>
        System.Threading.Tasks.Task<APIServiceIntegrationInstanceSecret> DeactivateApiServiceIntegrationInstanceSecretAsync(  string apiServiceId ,   string secretId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deactivate an API Service Integration instance Secret
        /// </summary>
        /// <remarks>
        /// Deactivates an API Service Integration instance Secret by &#x60;secretId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="secretId">&#x60;id&#x60; of the API Service Integration instance Secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (APIServiceIntegrationInstanceSecret)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIServiceIntegrationInstanceSecret>> DeactivateApiServiceIntegrationInstanceSecretWithHttpInfoAsync(  string apiServiceId ,   string secretId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an API Service Integration instance
        /// </summary>
        /// <remarks>
        /// Deletes an API Service Integration instance by &#x60;id&#x60;. This operation also revokes access to scopes that were previously granted to this API Service Integration instance.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApiServiceIntegrationInstanceAsync(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an API Service Integration instance
        /// </summary>
        /// <remarks>
        /// Deletes an API Service Integration instance by &#x60;id&#x60;. This operation also revokes access to scopes that were previously granted to this API Service Integration instance.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiServiceIntegrationInstanceWithHttpInfoAsync(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an API Service Integration instance Secret
        /// </summary>
        /// <remarks>
        /// Deletes an API Service Integration instance Secret by &#x60;secretId&#x60;. You can only delete an inactive Secret.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="secretId">&#x60;id&#x60; of the API Service Integration instance Secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApiServiceIntegrationInstanceSecretAsync(  string apiServiceId ,   string secretId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an API Service Integration instance Secret
        /// </summary>
        /// <remarks>
        /// Deletes an API Service Integration instance Secret by &#x60;secretId&#x60;. You can only delete an inactive Secret.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="secretId">&#x60;id&#x60; of the API Service Integration instance Secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiServiceIntegrationInstanceSecretWithHttpInfoAsync(  string apiServiceId ,   string secretId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an API Service Integration instance
        /// </summary>
        /// <remarks>
        /// Retrieves an API Service Integration instance by &#x60;id&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of APIServiceIntegrationInstance</returns>
        System.Threading.Tasks.Task<APIServiceIntegrationInstance> GetApiServiceIntegrationInstanceAsync(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an API Service Integration instance
        /// </summary>
        /// <remarks>
        /// Retrieves an API Service Integration instance by &#x60;id&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (APIServiceIntegrationInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIServiceIntegrationInstance>> GetApiServiceIntegrationInstanceWithHttpInfoAsync(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all API Service Integration instance Secrets
        /// </summary>
        /// <remarks>
        /// Lists all client secrets for an API Service Integration instance by &#x60;apiServiceId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;APIServiceIntegrationInstanceSecret&gt;</returns>
        IOktaCollectionClient<APIServiceIntegrationInstanceSecret> ListApiServiceIntegrationInstanceSecrets(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all API Service Integration instance Secrets
        /// </summary>
        /// <remarks>
        /// Lists all client secrets for an API Service Integration instance by &#x60;apiServiceId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;APIServiceIntegrationInstanceSecret&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<APIServiceIntegrationInstanceSecret>>> ListApiServiceIntegrationInstanceSecretsWithHttpInfoAsync(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all API Service Integration instances
        /// </summary>
        /// <remarks>
        /// Lists all API Service Integration instances with a pagination option
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;APIServiceIntegrationInstance&gt;</returns>
        IOktaCollectionClient<APIServiceIntegrationInstance> ListApiServiceIntegrationInstances(  string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all API Service Integration instances
        /// </summary>
        /// <remarks>
        /// Lists all API Service Integration instances with a pagination option
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;APIServiceIntegrationInstance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<APIServiceIntegrationInstance>>> ListApiServiceIntegrationInstancesWithHttpInfoAsync(  string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial interface IApiServiceIntegrationsApi :  IApiServiceIntegrationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApiServiceIntegrationsApi : IApiServiceIntegrationsApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        private IOAuthTokenProvider _oAuthTokenProvider;
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiServiceIntegrationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <param name="oAuthTokenProvider">The access token provider to be used when the AuthorizationMode is equals to Private Key. Optional./param>
        /// <param name="webProxy">The web proxy to be used by the HTTP client. Optional./param>
        /// <returns></returns>
        public ApiServiceIntegrationsApi(Okta.Sdk.Client.Configuration configuration = null, IOAuthTokenProvider oAuthTokenProvider = null, WebProxy webProxy = null)
        {
            configuration = Sdk.Client.Configuration.GetConfigurationOrDefault(configuration);

            this.Configuration = Okta.Sdk.Client.Configuration.MergeConfigurations(
                Okta.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            
            Sdk.Client.Configuration.Validate((Configuration)this.Configuration);
            
            _oAuthTokenProvider = NullOAuthTokenProvider.Instance;
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration))
            {
                _oAuthTokenProvider = oAuthTokenProvider ?? new DefaultOAuthTokenProvider(Configuration);
            }
            
            this.AsynchronousClient = new Okta.Sdk.Client.ApiClient(this.Configuration.OktaDomain, _oAuthTokenProvider, webProxy);
            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiServiceIntegrationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApiServiceIntegrationsApi(Okta.Sdk.Client.IAsynchronousClient asyncClient, Okta.Sdk.Client.IReadableConfiguration configuration)
        {
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
             _oAuthTokenProvider = NullOAuthTokenProvider.Instance;
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration))
            {
                _oAuthTokenProvider = new DefaultOAuthTokenProvider(Configuration);
            }
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Okta.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.OktaDomain;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
         
        /// <summary>
        /// Activate an API Service Integration instance Secret Activates an API Service Integration instance Secret by &#x60;secretId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="secretId">&#x60;id&#x60; of the API Service Integration instance Secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of APIServiceIntegrationInstanceSecret</returns>
        public async System.Threading.Tasks.Task<APIServiceIntegrationInstanceSecret> ActivateApiServiceIntegrationInstanceSecretAsync(  string apiServiceId ,   string secretId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<APIServiceIntegrationInstanceSecret> localVarResponse = await ActivateApiServiceIntegrationInstanceSecretWithHttpInfoAsync(apiServiceId, secretId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Activate an API Service Integration instance Secret Activates an API Service Integration instance Secret by &#x60;secretId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="secretId">&#x60;id&#x60; of the API Service Integration instance Secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (APIServiceIntegrationInstanceSecret)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<APIServiceIntegrationInstanceSecret>> ActivateApiServiceIntegrationInstanceSecretWithHttpInfoAsync(  string apiServiceId ,   string secretId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiServiceId' is set
            if (apiServiceId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'apiServiceId' when calling ApiServiceIntegrationsApi->ActivateApiServiceIntegrationInstanceSecret");
            }

            // verify the required parameter 'secretId' is set
            if (secretId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'secretId' when calling ApiServiceIntegrationsApi->ActivateApiServiceIntegrationInstanceSecret");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiServiceId", Okta.Sdk.Client.ClientUtils.ParameterToString(apiServiceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("secretId", Okta.Sdk.Client.ClientUtils.ParameterToString(secretId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<APIServiceIntegrationInstanceSecret>("/integrations/api/v1/api-services/{apiServiceId}/credentials/secrets/{secretId}/lifecycle/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateApiServiceIntegrationInstanceSecret", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an API Service Integration instance Creates and authorizes an API Service Integration instance
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAPIServiceIntegrationInstanceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostAPIServiceIntegrationInstance</returns>
        public async System.Threading.Tasks.Task<PostAPIServiceIntegrationInstance> CreateApiServiceIntegrationInstanceAsync(  PostAPIServiceIntegrationInstanceRequest postAPIServiceIntegrationInstanceRequest , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<PostAPIServiceIntegrationInstance> localVarResponse = await CreateApiServiceIntegrationInstanceWithHttpInfoAsync(postAPIServiceIntegrationInstanceRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Create an API Service Integration instance Creates and authorizes an API Service Integration instance
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postAPIServiceIntegrationInstanceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostAPIServiceIntegrationInstance)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<PostAPIServiceIntegrationInstance>> CreateApiServiceIntegrationInstanceWithHttpInfoAsync(  PostAPIServiceIntegrationInstanceRequest postAPIServiceIntegrationInstanceRequest , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postAPIServiceIntegrationInstanceRequest' is set
            if (postAPIServiceIntegrationInstanceRequest == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'postAPIServiceIntegrationInstanceRequest' when calling ApiServiceIntegrationsApi->CreateApiServiceIntegrationInstance");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postAPIServiceIntegrationInstanceRequest;

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostAPIServiceIntegrationInstance>("/integrations/api/v1/api-services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApiServiceIntegrationInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an API Service Integration instance Secret Creates an API Service Integration instance Secret object with a new active client secret. You can create up to two Secret objects. An error is returned if you attempt to create more than two Secret objects.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of APIServiceIntegrationInstanceSecret</returns>
        public async System.Threading.Tasks.Task<APIServiceIntegrationInstanceSecret> CreateApiServiceIntegrationInstanceSecretAsync(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<APIServiceIntegrationInstanceSecret> localVarResponse = await CreateApiServiceIntegrationInstanceSecretWithHttpInfoAsync(apiServiceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Create an API Service Integration instance Secret Creates an API Service Integration instance Secret object with a new active client secret. You can create up to two Secret objects. An error is returned if you attempt to create more than two Secret objects.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (APIServiceIntegrationInstanceSecret)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<APIServiceIntegrationInstanceSecret>> CreateApiServiceIntegrationInstanceSecretWithHttpInfoAsync(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiServiceId' is set
            if (apiServiceId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'apiServiceId' when calling ApiServiceIntegrationsApi->CreateApiServiceIntegrationInstanceSecret");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiServiceId", Okta.Sdk.Client.ClientUtils.ParameterToString(apiServiceId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<APIServiceIntegrationInstanceSecret>("/integrations/api/v1/api-services/{apiServiceId}/credentials/secrets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApiServiceIntegrationInstanceSecret", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate an API Service Integration instance Secret Deactivates an API Service Integration instance Secret by &#x60;secretId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="secretId">&#x60;id&#x60; of the API Service Integration instance Secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of APIServiceIntegrationInstanceSecret</returns>
        public async System.Threading.Tasks.Task<APIServiceIntegrationInstanceSecret> DeactivateApiServiceIntegrationInstanceSecretAsync(  string apiServiceId ,   string secretId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<APIServiceIntegrationInstanceSecret> localVarResponse = await DeactivateApiServiceIntegrationInstanceSecretWithHttpInfoAsync(apiServiceId, secretId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Deactivate an API Service Integration instance Secret Deactivates an API Service Integration instance Secret by &#x60;secretId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="secretId">&#x60;id&#x60; of the API Service Integration instance Secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (APIServiceIntegrationInstanceSecret)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<APIServiceIntegrationInstanceSecret>> DeactivateApiServiceIntegrationInstanceSecretWithHttpInfoAsync(  string apiServiceId ,   string secretId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiServiceId' is set
            if (apiServiceId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'apiServiceId' when calling ApiServiceIntegrationsApi->DeactivateApiServiceIntegrationInstanceSecret");
            }

            // verify the required parameter 'secretId' is set
            if (secretId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'secretId' when calling ApiServiceIntegrationsApi->DeactivateApiServiceIntegrationInstanceSecret");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiServiceId", Okta.Sdk.Client.ClientUtils.ParameterToString(apiServiceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("secretId", Okta.Sdk.Client.ClientUtils.ParameterToString(secretId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<APIServiceIntegrationInstanceSecret>("/integrations/api/v1/api-services/{apiServiceId}/credentials/secrets/{secretId}/lifecycle/deactivate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateApiServiceIntegrationInstanceSecret", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an API Service Integration instance Deletes an API Service Integration instance by &#x60;id&#x60;. This operation also revokes access to scopes that were previously granted to this API Service Integration instance.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApiServiceIntegrationInstanceAsync(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteApiServiceIntegrationInstanceWithHttpInfoAsync(apiServiceId, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete an API Service Integration instance Deletes an API Service Integration instance by &#x60;id&#x60;. This operation also revokes access to scopes that were previously granted to this API Service Integration instance.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> DeleteApiServiceIntegrationInstanceWithHttpInfoAsync(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiServiceId' is set
            if (apiServiceId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'apiServiceId' when calling ApiServiceIntegrationsApi->DeleteApiServiceIntegrationInstance");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiServiceId", Okta.Sdk.Client.ClientUtils.ParameterToString(apiServiceId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/integrations/api/v1/api-services/{apiServiceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiServiceIntegrationInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an API Service Integration instance Secret Deletes an API Service Integration instance Secret by &#x60;secretId&#x60;. You can only delete an inactive Secret.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="secretId">&#x60;id&#x60; of the API Service Integration instance Secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApiServiceIntegrationInstanceSecretAsync(  string apiServiceId ,   string secretId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteApiServiceIntegrationInstanceSecretWithHttpInfoAsync(apiServiceId, secretId, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete an API Service Integration instance Secret Deletes an API Service Integration instance Secret by &#x60;secretId&#x60;. You can only delete an inactive Secret.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="secretId">&#x60;id&#x60; of the API Service Integration instance Secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> DeleteApiServiceIntegrationInstanceSecretWithHttpInfoAsync(  string apiServiceId ,   string secretId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiServiceId' is set
            if (apiServiceId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'apiServiceId' when calling ApiServiceIntegrationsApi->DeleteApiServiceIntegrationInstanceSecret");
            }

            // verify the required parameter 'secretId' is set
            if (secretId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'secretId' when calling ApiServiceIntegrationsApi->DeleteApiServiceIntegrationInstanceSecret");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiServiceId", Okta.Sdk.Client.ClientUtils.ParameterToString(apiServiceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("secretId", Okta.Sdk.Client.ClientUtils.ParameterToString(secretId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/integrations/api/v1/api-services/{apiServiceId}/credentials/secrets/{secretId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiServiceIntegrationInstanceSecret", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an API Service Integration instance Retrieves an API Service Integration instance by &#x60;id&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of APIServiceIntegrationInstance</returns>
        public async System.Threading.Tasks.Task<APIServiceIntegrationInstance> GetApiServiceIntegrationInstanceAsync(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<APIServiceIntegrationInstance> localVarResponse = await GetApiServiceIntegrationInstanceWithHttpInfoAsync(apiServiceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve an API Service Integration instance Retrieves an API Service Integration instance by &#x60;id&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (APIServiceIntegrationInstance)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<APIServiceIntegrationInstance>> GetApiServiceIntegrationInstanceWithHttpInfoAsync(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiServiceId' is set
            if (apiServiceId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'apiServiceId' when calling ApiServiceIntegrationsApi->GetApiServiceIntegrationInstance");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiServiceId", Okta.Sdk.Client.ClientUtils.ParameterToString(apiServiceId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                var token = await _oAuthTokenProvider.GetAccessTokenAsync(cancellationToken: cancellationToken);
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<APIServiceIntegrationInstance>("/integrations/api/v1/api-services/{apiServiceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiServiceIntegrationInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all API Service Integration instance Secrets Lists all client secrets for an API Service Integration instance by &#x60;apiServiceId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;APIServiceIntegrationInstanceSecret&gt;</returns>
        //a
        public IOktaCollectionClient<APIServiceIntegrationInstanceSecret> ListApiServiceIntegrationInstanceSecrets(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiServiceId' is set
            if (apiServiceId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'apiServiceId' when calling ApiServiceIntegrationsApi->ListApiServiceIntegrationInstanceSecrets");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiServiceId", Okta.Sdk.Client.ClientUtils.ParameterToString(apiServiceId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            // If AuthorizationMode is equals to PrivateKey, the authorization header is set in the enumerator for collections.
            
            return new OktaCollectionClient<APIServiceIntegrationInstanceSecret>(localVarRequestOptions, "/integrations/api/v1/api-services/{apiServiceId}/credentials/secrets", this.AsynchronousClient, this.Configuration, this._oAuthTokenProvider);
        }
        /// <summary>
        /// List all API Service Integration instance Secrets Lists all client secrets for an API Service Integration instance by &#x60;apiServiceId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiServiceId">&#x60;id&#x60; of the API Service Integration instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;APIServiceIntegrationInstanceSecret&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<APIServiceIntegrationInstanceSecret>>> ListApiServiceIntegrationInstanceSecretsWithHttpInfoAsync(  string apiServiceId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiServiceId' is set
            if (apiServiceId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'apiServiceId' when calling ApiServiceIntegrationsApi->ListApiServiceIntegrationInstanceSecrets");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiServiceId", Okta.Sdk.Client.ClientUtils.ParameterToString(apiServiceId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            // If AuthorizationMode is equals to PrivateKey, the authorization header is set in the enumerator for collections.

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<APIServiceIntegrationInstanceSecret>>("/integrations/api/v1/api-services/{apiServiceId}/credentials/secrets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListApiServiceIntegrationInstanceSecrets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all API Service Integration instances Lists all API Service Integration instances with a pagination option
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;APIServiceIntegrationInstance&gt;</returns>
        //a
        public IOktaCollectionClient<APIServiceIntegrationInstance> ListApiServiceIntegrationInstances(  string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            // If AuthorizationMode is equals to PrivateKey, the authorization header is set in the enumerator for collections.
            
            return new OktaCollectionClient<APIServiceIntegrationInstance>(localVarRequestOptions, "/integrations/api/v1/api-services", this.AsynchronousClient, this.Configuration, this._oAuthTokenProvider);
        }
        /// <summary>
        /// List all API Service Integration instances Lists all API Service Integration instances with a pagination option
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;APIServiceIntegrationInstance&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<APIServiceIntegrationInstance>>> ListApiServiceIntegrationInstancesWithHttpInfoAsync(  string after = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            // If AuthorizationMode is equals to PrivateKey, the authorization header is set in the enumerator for collections.

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<APIServiceIntegrationInstance>>("/integrations/api/v1/api-services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListApiServiceIntegrationInstances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
