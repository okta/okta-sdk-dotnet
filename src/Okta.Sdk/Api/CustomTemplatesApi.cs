/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial interface ICustomTemplatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an Email Customization
        /// </summary>
        /// <remarks>
        /// Creates a new Email Customization  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled, you can create a customization for any BCP47 language in addition to the Okta-supported languages. 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="instance"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailCustomization</returns>
        System.Threading.Tasks.Task<EmailCustomization> CreateEmailCustomizationAsync(  string brandId ,   string templateName ,   EmailCustomization instance = default(EmailCustomization) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an Email Customization
        /// </summary>
        /// <remarks>
        /// Creates a new Email Customization  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled, you can create a customization for any BCP47 language in addition to the Okta-supported languages. 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="instance"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomization>> CreateEmailCustomizationWithHttpInfoAsync(  string brandId ,   string templateName ,   EmailCustomization instance = default(EmailCustomization) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all Email Customizations
        /// </summary>
        /// <remarks>
        /// Deletes all customizations for an email template  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled, all customizations are deleted, including customizations for additional languages. If disabled, only customizations in Okta-supported languages are deleted. 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllCustomizationsAsync(  string brandId ,   string templateName , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all Email Customizations
        /// </summary>
        /// <remarks>
        /// Deletes all customizations for an email template  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled, all customizations are deleted, including customizations for additional languages. If disabled, only customizations in Okta-supported languages are deleted. 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllCustomizationsWithHttpInfoAsync(  string brandId ,   string templateName , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Email Customization
        /// </summary>
        /// <remarks>
        /// Deletes an Email Customization by its unique identifier  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, deletion of an existing additional language customization by ID doesn&#39;t register. 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEmailCustomizationAsync(  string brandId ,   string templateName ,   string customizationId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Email Customization
        /// </summary>
        /// <remarks>
        /// Deletes an Email Customization by its unique identifier  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, deletion of an existing additional language customization by ID doesn&#39;t register. 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailCustomizationWithHttpInfoAsync(  string brandId ,   string templateName ,   string customizationId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Preview of an Email Customization
        /// </summary>
        /// <remarks>
        /// Retrieves a Preview of an Email Customization. All variable references are populated from the current user&#39;s context. For example, &#x60;${user.profile.firstName}&#x60;.  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, requests for the preview of an additional language customization by ID return a &#x60;404 Not Found&#x60; error response. 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailPreview</returns>
        System.Threading.Tasks.Task<EmailPreview> GetCustomizationPreviewAsync(  string brandId ,   string templateName ,   string customizationId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Preview of an Email Customization
        /// </summary>
        /// <remarks>
        /// Retrieves a Preview of an Email Customization. All variable references are populated from the current user&#39;s context. For example, &#x60;${user.profile.firstName}&#x60;.  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, requests for the preview of an additional language customization by ID return a &#x60;404 Not Found&#x60; error response. 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailPreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailPreview>> GetCustomizationPreviewWithHttpInfoAsync(  string brandId ,   string templateName ,   string customizationId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Email Customization
        /// </summary>
        /// <remarks>
        /// Retrieves an email customization by its unique identifier  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, requests to retrieve an additional language customization by ID result in a &#x60;404 Not Found&#x60; error response. 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailCustomization</returns>
        System.Threading.Tasks.Task<EmailCustomization> GetEmailCustomizationAsync(  string brandId ,   string templateName ,   string customizationId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Email Customization
        /// </summary>
        /// <remarks>
        /// Retrieves an email customization by its unique identifier  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, requests to retrieve an additional language customization by ID result in a &#x60;404 Not Found&#x60; error response. 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomization>> GetEmailCustomizationWithHttpInfoAsync(  string brandId ,   string templateName ,   string customizationId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Email Template Default Content
        /// </summary>
        /// <remarks>
        /// Retrieves an email template&#39;s default content  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; Defaults to the current user&#39;s language given the following:  - Custom languages for Okta Email Templates is enabled - An additional language is specified for the &#x60;language&#x60; parameter 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDefaultContent</returns>
        System.Threading.Tasks.Task<EmailDefaultContent> GetEmailDefaultContentAsync(  string brandId ,   string templateName ,   string language = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Email Template Default Content
        /// </summary>
        /// <remarks>
        /// Retrieves an email template&#39;s default content  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; Defaults to the current user&#39;s language given the following:  - Custom languages for Okta Email Templates is enabled - An additional language is specified for the &#x60;language&#x60; parameter 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDefaultContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDefaultContent>> GetEmailDefaultContentWithHttpInfoAsync(  string brandId ,   string templateName ,   string language = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Preview of the Email Template default content
        /// </summary>
        /// <remarks>
        /// Retrieves a preview of an Email Template&#39;s default content. All variable references are populated using the current user&#39;s context. For example, &#x60;${user.profile.firstName}&#x60;.  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; Defaults to the current user&#39;s language given the following: - Custom languages for Okta Email Templates is enabled - An additional language is specified for the &#x60;language&#x60; parameter 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailPreview</returns>
        System.Threading.Tasks.Task<EmailPreview> GetEmailDefaultPreviewAsync(  string brandId ,   string templateName ,   string language = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Preview of the Email Template default content
        /// </summary>
        /// <remarks>
        /// Retrieves a preview of an Email Template&#39;s default content. All variable references are populated using the current user&#39;s context. For example, &#x60;${user.profile.firstName}&#x60;.  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; Defaults to the current user&#39;s language given the following: - Custom languages for Okta Email Templates is enabled - An additional language is specified for the &#x60;language&#x60; parameter 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailPreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailPreview>> GetEmailDefaultPreviewWithHttpInfoAsync(  string brandId ,   string templateName ,   string language = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the Email Template Settings
        /// </summary>
        /// <remarks>
        /// Retrieves an email template&#39;s settings
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSettingsResponse</returns>
        System.Threading.Tasks.Task<EmailSettingsResponse> GetEmailSettingsAsync(  string brandId ,   string templateName , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the Email Template Settings
        /// </summary>
        /// <remarks>
        /// Retrieves an email template&#39;s settings
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSettingsResponse>> GetEmailSettingsWithHttpInfoAsync(  string brandId ,   string templateName , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Email Template
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an email template by name
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="expand">Specifies additional metadata to be included in the response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailTemplateResponse</returns>
        System.Threading.Tasks.Task<EmailTemplateResponse> GetEmailTemplateAsync(  string brandId ,   string templateName , List<string> expand = default(List<string>) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Email Template
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an email template by name
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="expand">Specifies additional metadata to be included in the response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailTemplateResponse>> GetEmailTemplateWithHttpInfoAsync(  string brandId ,   string templateName , List<string> expand = default(List<string>) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Email Customizations
        /// </summary>
        /// <remarks>
        /// Lists all customizations of an email template  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled, all existing customizations are retrieved, including customizations for additional languages. If disabled, only customizations for Okta-supported languages are returned. 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination). (optional)</param>
        /// <param name="limit">A limit on the number of objects to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EmailCustomization&gt;</returns>
        IOktaCollectionClient<EmailCustomization> ListEmailCustomizations(  string brandId ,   string templateName ,   string after = default(string) ,   int? limit = default(int?) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Email Customizations
        /// </summary>
        /// <remarks>
        /// Lists all customizations of an email template  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled, all existing customizations are retrieved, including customizations for additional languages. If disabled, only customizations for Okta-supported languages are returned. 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination). (optional)</param>
        /// <param name="limit">A limit on the number of objects to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EmailCustomization&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EmailCustomization>>> ListEmailCustomizationsWithHttpInfoAsync(  string brandId ,   string templateName ,   string after = default(string) ,   int? limit = default(int?) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Email Templates
        /// </summary>
        /// <remarks>
        /// Lists all supported email templates
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination). (optional)</param>
        /// <param name="limit">A limit on the number of objects to return (optional, default to 20)</param>
        /// <param name="expand">Specifies additional metadata to be included in the response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EmailTemplateResponse&gt;</returns>
        IOktaCollectionClient<EmailTemplateResponse> ListEmailTemplates(  string brandId ,   string after = default(string) ,   int? limit = default(int?) , List<string> expand = default(List<string>) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Email Templates
        /// </summary>
        /// <remarks>
        /// Lists all supported email templates
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination). (optional)</param>
        /// <param name="limit">A limit on the number of objects to return (optional, default to 20)</param>
        /// <param name="expand">Specifies additional metadata to be included in the response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EmailTemplateResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EmailTemplateResponse>>> ListEmailTemplatesWithHttpInfoAsync(  string brandId ,   string after = default(string) ,   int? limit = default(int?) , List<string> expand = default(List<string>) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace an Email Customization
        /// </summary>
        /// <remarks>
        /// Replaces an email customization using property values  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, requests to update a customization for an additional language return a &#x60;404 Not Found&#x60; error response. 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="instance">Request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailCustomization</returns>
        System.Threading.Tasks.Task<EmailCustomization> ReplaceEmailCustomizationAsync(  string brandId ,   string templateName ,   string customizationId ,   EmailCustomization instance = default(EmailCustomization) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace an Email Customization
        /// </summary>
        /// <remarks>
        /// Replaces an email customization using property values  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, requests to update a customization for an additional language return a &#x60;404 Not Found&#x60; error response. 
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="instance">Request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomization>> ReplaceEmailCustomizationWithHttpInfoAsync(  string brandId ,   string templateName ,   string customizationId ,   EmailCustomization instance = default(EmailCustomization) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace the Email Template Settings
        /// </summary>
        /// <remarks>
        /// Replaces an email template&#39;s settings
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="emailSettings"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSettings</returns>
        System.Threading.Tasks.Task<EmailSettings> ReplaceEmailSettingsAsync(  string brandId ,   string templateName ,   EmailSettings emailSettings = default(EmailSettings) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace the Email Template Settings
        /// </summary>
        /// <remarks>
        /// Replaces an email template&#39;s settings
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="emailSettings"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSettings>> ReplaceEmailSettingsWithHttpInfoAsync(  string brandId ,   string templateName ,   EmailSettings emailSettings = default(EmailSettings) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send a Test Email
        /// </summary>
        /// <remarks>
        /// Sends a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. The email customization for the language specified in the &#x60;language&#x60; query parameter. &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled and the &#x60;language&#x60; parameter is an additional language, the test email uses the customization corresponding to the language. 2. The email template&#39;s default customization. 3. The email template’s default content, translated to the current user&#39;s language.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendTestEmailAsync(  string brandId ,   string templateName ,   string language = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send a Test Email
        /// </summary>
        /// <remarks>
        /// Sends a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. The email customization for the language specified in the &#x60;language&#x60; query parameter. &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled and the &#x60;language&#x60; parameter is an additional language, the test email uses the customization corresponding to the language. 2. The email template&#39;s default customization. 3. The email template’s default content, translated to the current user&#39;s language.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendTestEmailWithHttpInfoAsync(  string brandId ,   string templateName ,   string language = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial interface ICustomTemplatesApi :  ICustomTemplatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomTemplatesApi : ICustomTemplatesApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        private IOAuthTokenProvider _oAuthTokenProvider;
        
        public CustomTemplatesApi(Okta.Sdk.Client.OktaApiClientOptions options) : this(options.Configuration, options.OAuthTokenProvider, options.WebProxy)
        {
            this.AsynchronousClient = new Okta.Sdk.Client.ApiClient(options);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomTemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <param name="oAuthTokenProvider">The access token provider to be used when the AuthorizationMode is equals to Private Key. Optional./param>
        /// <param name="webProxy">The web proxy to be used by the HTTP client. Optional./param>
        /// <returns></returns>
        public CustomTemplatesApi(Okta.Sdk.Client.Configuration configuration = null, IOAuthTokenProvider oAuthTokenProvider = null, WebProxy webProxy = null)
        {
            configuration = Sdk.Client.Configuration.GetConfigurationOrDefault(configuration);

            this.Configuration = Okta.Sdk.Client.Configuration.MergeConfigurations(
                Okta.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            
            Sdk.Client.Configuration.Validate((Configuration)this.Configuration);
            
            _oAuthTokenProvider = NullOAuthTokenProvider.Instance;
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration))
            {
                _oAuthTokenProvider = oAuthTokenProvider ?? new DefaultOAuthTokenProvider(Configuration);
            }
            
            this.AsynchronousClient = new Okta.Sdk.Client.ApiClient(this.Configuration.OktaDomain, _oAuthTokenProvider, webProxy);
            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomTemplatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CustomTemplatesApi(Okta.Sdk.Client.IAsynchronousClient asyncClient, Okta.Sdk.Client.IReadableConfiguration configuration)
        {
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
             _oAuthTokenProvider = NullOAuthTokenProvider.Instance;
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration))
            {
                _oAuthTokenProvider = new DefaultOAuthTokenProvider(Configuration);
            }
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Okta.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.OktaDomain;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
         
        /// <summary>
        /// Create an Email Customization Creates a new Email Customization  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled, you can create a customization for any BCP47 language in addition to the Okta-supported languages. 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="instance"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailCustomization</returns>
        public async System.Threading.Tasks.Task<EmailCustomization> CreateEmailCustomizationAsync(  string brandId ,   string templateName ,   EmailCustomization instance = default(EmailCustomization) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailCustomization> localVarResponse = await CreateEmailCustomizationWithHttpInfoAsync(brandId, templateName, instance, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Create an Email Customization Creates a new Email Customization  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled, you can create a customization for any BCP47 language in addition to the Okta-supported languages. 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="instance"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailCustomization>> CreateEmailCustomizationWithHttpInfoAsync(  string brandId ,   string templateName ,   EmailCustomization instance = default(EmailCustomization) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->CreateEmailCustomization");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomTemplatesApi->CreateEmailCustomization");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.Data = instance;

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/brands/{brandId}/templates/email/{templateName}/customizations", "POST", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailCustomization>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmailCustomization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all Email Customizations Deletes all customizations for an email template  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled, all customizations are deleted, including customizations for additional languages. If disabled, only customizations in Okta-supported languages are deleted. 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllCustomizationsAsync(  string brandId ,   string templateName , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAllCustomizationsWithHttpInfoAsync(brandId, templateName, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete all Email Customizations Deletes all customizations for an email template  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled, all customizations are deleted, including customizations for additional languages. If disabled, only customizations in Okta-supported languages are deleted. 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> DeleteAllCustomizationsWithHttpInfoAsync(  string brandId ,   string templateName , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->DeleteAllCustomizations");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomTemplatesApi->DeleteAllCustomizations");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/brands/{brandId}/templates/email/{templateName}/customizations", "DELETE", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllCustomizations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Email Customization Deletes an Email Customization by its unique identifier  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, deletion of an existing additional language customization by ID doesn&#39;t register. 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEmailCustomizationAsync(  string brandId ,   string templateName ,   string customizationId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteEmailCustomizationWithHttpInfoAsync(brandId, templateName, customizationId, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete an Email Customization Deletes an Email Customization by its unique identifier  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, deletion of an existing additional language customization by ID doesn&#39;t register. 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> DeleteEmailCustomizationWithHttpInfoAsync(  string brandId ,   string templateName ,   string customizationId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->DeleteEmailCustomization");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomTemplatesApi->DeleteEmailCustomization");
            }

            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'customizationId' when calling CustomTemplatesApi->DeleteEmailCustomization");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.PathParameters.Add("customizationId", Okta.Sdk.Client.ClientUtils.ParameterToString(customizationId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}", "DELETE", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmailCustomization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Preview of an Email Customization Retrieves a Preview of an Email Customization. All variable references are populated from the current user&#39;s context. For example, &#x60;${user.profile.firstName}&#x60;.  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, requests for the preview of an additional language customization by ID return a &#x60;404 Not Found&#x60; error response. 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailPreview</returns>
        public async System.Threading.Tasks.Task<EmailPreview> GetCustomizationPreviewAsync(  string brandId ,   string templateName ,   string customizationId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailPreview> localVarResponse = await GetCustomizationPreviewWithHttpInfoAsync(brandId, templateName, customizationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a Preview of an Email Customization Retrieves a Preview of an Email Customization. All variable references are populated from the current user&#39;s context. For example, &#x60;${user.profile.firstName}&#x60;.  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, requests for the preview of an additional language customization by ID return a &#x60;404 Not Found&#x60; error response. 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailPreview)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailPreview>> GetCustomizationPreviewWithHttpInfoAsync(  string brandId ,   string templateName ,   string customizationId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->GetCustomizationPreview");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomTemplatesApi->GetCustomizationPreview");
            }

            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'customizationId' when calling CustomTemplatesApi->GetCustomizationPreview");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.PathParameters.Add("customizationId", Okta.Sdk.Client.ClientUtils.ParameterToString(customizationId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}/preview", "GET", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailPreview>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}/preview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomizationPreview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Email Customization Retrieves an email customization by its unique identifier  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, requests to retrieve an additional language customization by ID result in a &#x60;404 Not Found&#x60; error response. 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailCustomization</returns>
        public async System.Threading.Tasks.Task<EmailCustomization> GetEmailCustomizationAsync(  string brandId ,   string templateName ,   string customizationId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailCustomization> localVarResponse = await GetEmailCustomizationWithHttpInfoAsync(brandId, templateName, customizationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve an Email Customization Retrieves an email customization by its unique identifier  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, requests to retrieve an additional language customization by ID result in a &#x60;404 Not Found&#x60; error response. 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailCustomization>> GetEmailCustomizationWithHttpInfoAsync(  string brandId ,   string templateName ,   string customizationId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->GetEmailCustomization");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomTemplatesApi->GetEmailCustomization");
            }

            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'customizationId' when calling CustomTemplatesApi->GetEmailCustomization");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.PathParameters.Add("customizationId", Okta.Sdk.Client.ClientUtils.ParameterToString(customizationId)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}", "GET", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailCustomization>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCustomization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Email Template Default Content Retrieves an email template&#39;s default content  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; Defaults to the current user&#39;s language given the following:  - Custom languages for Okta Email Templates is enabled - An additional language is specified for the &#x60;language&#x60; parameter 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDefaultContent</returns>
        public async System.Threading.Tasks.Task<EmailDefaultContent> GetEmailDefaultContentAsync(  string brandId ,   string templateName ,   string language = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailDefaultContent> localVarResponse = await GetEmailDefaultContentWithHttpInfoAsync(brandId, templateName, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve an Email Template Default Content Retrieves an email template&#39;s default content  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; Defaults to the current user&#39;s language given the following:  - Custom languages for Okta Email Templates is enabled - An additional language is specified for the &#x60;language&#x60; parameter 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDefaultContent)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailDefaultContent>> GetEmailDefaultContentWithHttpInfoAsync(  string brandId ,   string templateName ,   string language = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->GetEmailDefaultContent");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomTemplatesApi->GetEmailDefaultContent");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/brands/{brandId}/templates/email/{templateName}/default-content", "GET", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailDefaultContent>("/api/v1/brands/{brandId}/templates/email/{templateName}/default-content", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailDefaultContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Preview of the Email Template default content Retrieves a preview of an Email Template&#39;s default content. All variable references are populated using the current user&#39;s context. For example, &#x60;${user.profile.firstName}&#x60;.  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; Defaults to the current user&#39;s language given the following: - Custom languages for Okta Email Templates is enabled - An additional language is specified for the &#x60;language&#x60; parameter 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailPreview</returns>
        public async System.Threading.Tasks.Task<EmailPreview> GetEmailDefaultPreviewAsync(  string brandId ,   string templateName ,   string language = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailPreview> localVarResponse = await GetEmailDefaultPreviewWithHttpInfoAsync(brandId, templateName, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a Preview of the Email Template default content Retrieves a preview of an Email Template&#39;s default content. All variable references are populated using the current user&#39;s context. For example, &#x60;${user.profile.firstName}&#x60;.  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; Defaults to the current user&#39;s language given the following: - Custom languages for Okta Email Templates is enabled - An additional language is specified for the &#x60;language&#x60; parameter 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailPreview)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailPreview>> GetEmailDefaultPreviewWithHttpInfoAsync(  string brandId ,   string templateName ,   string language = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->GetEmailDefaultPreview");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomTemplatesApi->GetEmailDefaultPreview");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/brands/{brandId}/templates/email/{templateName}/default-content/preview", "GET", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailPreview>("/api/v1/brands/{brandId}/templates/email/{templateName}/default-content/preview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailDefaultPreview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the Email Template Settings Retrieves an email template&#39;s settings
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSettingsResponse</returns>
        public async System.Threading.Tasks.Task<EmailSettingsResponse> GetEmailSettingsAsync(  string brandId ,   string templateName , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailSettingsResponse> localVarResponse = await GetEmailSettingsWithHttpInfoAsync(brandId, templateName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve the Email Template Settings Retrieves an email template&#39;s settings
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailSettingsResponse>> GetEmailSettingsWithHttpInfoAsync(  string brandId ,   string templateName , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->GetEmailSettings");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomTemplatesApi->GetEmailSettings");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/brands/{brandId}/templates/email/{templateName}/settings", "GET", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailSettingsResponse>("/api/v1/brands/{brandId}/templates/email/{templateName}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Email Template Retrieves the details of an email template by name
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="expand">Specifies additional metadata to be included in the response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailTemplateResponse</returns>
        public async System.Threading.Tasks.Task<EmailTemplateResponse> GetEmailTemplateAsync(  string brandId ,   string templateName , List<string> expand = default(List<string>) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailTemplateResponse> localVarResponse = await GetEmailTemplateWithHttpInfoAsync(brandId, templateName, expand, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve an Email Template Retrieves the details of an email template by name
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="expand">Specifies additional metadata to be included in the response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailTemplateResponse>> GetEmailTemplateWithHttpInfoAsync(  string brandId ,   string templateName , List<string> expand = default(List<string>) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->GetEmailTemplate");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomTemplatesApi->GetEmailTemplate");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "expand", expand));
            }

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/brands/{brandId}/templates/email/{templateName}", "GET", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailTemplateResponse>("/api/v1/brands/{brandId}/templates/email/{templateName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Email Customizations Lists all customizations of an email template  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled, all existing customizations are retrieved, including customizations for additional languages. If disabled, only customizations for Okta-supported languages are returned. 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination). (optional)</param>
        /// <param name="limit">A limit on the number of objects to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EmailCustomization&gt;</returns>
        //a
        public IOktaCollectionClient<EmailCustomization> ListEmailCustomizations(  string brandId ,   string templateName ,   string after = default(string) ,   int? limit = default(int?) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->ListEmailCustomizations");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomTemplatesApi->ListEmailCustomizations");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            // If AuthorizationMode is equals to PrivateKey, the authorization header is set in the enumerator for collections.
            
            return new OktaCollectionClient<EmailCustomization>(localVarRequestOptions, "/api/v1/brands/{brandId}/templates/email/{templateName}/customizations", this.AsynchronousClient, this.Configuration, this._oAuthTokenProvider);
        }
        /// <summary>
        /// List all Email Customizations Lists all customizations of an email template  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled, all existing customizations are retrieved, including customizations for additional languages. If disabled, only customizations for Okta-supported languages are returned. 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination). (optional)</param>
        /// <param name="limit">A limit on the number of objects to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EmailCustomization&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<EmailCustomization>>> ListEmailCustomizationsWithHttpInfoAsync(  string brandId ,   string templateName ,   string after = default(string) ,   int? limit = default(int?) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->ListEmailCustomizations");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomTemplatesApi->ListEmailCustomizations");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            // If AuthorizationMode is equals to PrivateKey, the authorization header is set in the enumerator for collections.

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EmailCustomization>>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListEmailCustomizations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Email Templates Lists all supported email templates
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination). (optional)</param>
        /// <param name="limit">A limit on the number of objects to return (optional, default to 20)</param>
        /// <param name="expand">Specifies additional metadata to be included in the response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EmailTemplateResponse&gt;</returns>
        //a
        public IOktaCollectionClient<EmailTemplateResponse> ListEmailTemplates(  string brandId ,   string after = default(string) ,   int? limit = default(int?) , List<string> expand = default(List<string>) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->ListEmailTemplates");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "expand", expand));
            }

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            // If AuthorizationMode is equals to PrivateKey, the authorization header is set in the enumerator for collections.
            
            return new OktaCollectionClient<EmailTemplateResponse>(localVarRequestOptions, "/api/v1/brands/{brandId}/templates/email", this.AsynchronousClient, this.Configuration, this._oAuthTokenProvider);
        }
        /// <summary>
        /// List all Email Templates Lists all supported email templates
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](/#pagination). (optional)</param>
        /// <param name="limit">A limit on the number of objects to return (optional, default to 20)</param>
        /// <param name="expand">Specifies additional metadata to be included in the response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EmailTemplateResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<EmailTemplateResponse>>> ListEmailTemplatesWithHttpInfoAsync(  string brandId ,   string after = default(string) ,   int? limit = default(int?) , List<string> expand = default(List<string>) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->ListEmailTemplates");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "expand", expand));
            }

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            // If AuthorizationMode is equals to PrivateKey, the authorization header is set in the enumerator for collections.

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EmailTemplateResponse>>("/api/v1/brands/{brandId}/templates/email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListEmailTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace an Email Customization Replaces an email customization using property values  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, requests to update a customization for an additional language return a &#x60;404 Not Found&#x60; error response. 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="instance">Request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailCustomization</returns>
        public async System.Threading.Tasks.Task<EmailCustomization> ReplaceEmailCustomizationAsync(  string brandId ,   string templateName ,   string customizationId ,   EmailCustomization instance = default(EmailCustomization) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailCustomization> localVarResponse = await ReplaceEmailCustomizationWithHttpInfoAsync(brandId, templateName, customizationId, instance, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Replace an Email Customization Replaces an email customization using property values  &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is disabled, requests to update a customization for an additional language return a &#x60;404 Not Found&#x60; error response. 
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="customizationId">The ID of the email customization</param>
        /// <param name="instance">Request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailCustomization>> ReplaceEmailCustomizationWithHttpInfoAsync(  string brandId ,   string templateName ,   string customizationId ,   EmailCustomization instance = default(EmailCustomization) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->ReplaceEmailCustomization");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomTemplatesApi->ReplaceEmailCustomization");
            }

            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'customizationId' when calling CustomTemplatesApi->ReplaceEmailCustomization");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.PathParameters.Add("customizationId", Okta.Sdk.Client.ClientUtils.ParameterToString(customizationId)); // path parameter
            localVarRequestOptions.Data = instance;

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}", "PUT", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EmailCustomization>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceEmailCustomization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace the Email Template Settings Replaces an email template&#39;s settings
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="emailSettings"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSettings</returns>
        public async System.Threading.Tasks.Task<EmailSettings> ReplaceEmailSettingsAsync(  string brandId ,   string templateName ,   EmailSettings emailSettings = default(EmailSettings) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailSettings> localVarResponse = await ReplaceEmailSettingsWithHttpInfoAsync(brandId, templateName, emailSettings, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Replace the Email Template Settings Replaces an email template&#39;s settings
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="emailSettings"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSettings)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailSettings>> ReplaceEmailSettingsWithHttpInfoAsync(  string brandId ,   string templateName ,   EmailSettings emailSettings = default(EmailSettings) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->ReplaceEmailSettings");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomTemplatesApi->ReplaceEmailSettings");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.Data = emailSettings;

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/brands/{brandId}/templates/email/{templateName}/settings", "PUT", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EmailSettings>("/api/v1/brands/{brandId}/templates/email/{templateName}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceEmailSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a Test Email Sends a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. The email customization for the language specified in the &#x60;language&#x60; query parameter. &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled and the &#x60;language&#x60; parameter is an additional language, the test email uses the customization corresponding to the language. 2. The email template&#39;s default customization. 3. The email template’s default content, translated to the current user&#39;s language.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendTestEmailAsync(  string brandId ,   string templateName ,   string language = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SendTestEmailWithHttpInfoAsync(brandId, templateName, language, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Send a Test Email Sends a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. The email customization for the language specified in the &#x60;language&#x60; query parameter. &lt;x-lifecycle class&#x3D;\&quot;ea\&quot;&gt;&lt;/x-lifecycle&gt; If Custom languages for Okta Email Templates is enabled and the &#x60;language&#x60; parameter is an additional language, the test email uses the customization corresponding to the language. 2. The email template&#39;s default customization. 3. The email template’s default content, translated to the current user&#39;s language.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand</param>
        /// <param name="templateName">The name of the email template</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> SendTestEmailWithHttpInfoAsync(  string brandId ,   string templateName ,   string language = default(string) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomTemplatesApi->SendTestEmail");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomTemplatesApi->SendTestEmail");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            // authentication (apiToken) required
            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $"/api/v1/brands/{brandId}/templates/email/{templateName}/test", "POST", cancellationToken = default);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/brands/{brandId}/templates/email/{templateName}/test", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTestEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
