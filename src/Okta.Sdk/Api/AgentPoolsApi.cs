/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgentPoolsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Activate an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Activates scheduled Agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        System.Threading.Tasks.Task<AgentPoolUpdate> ActivateAgentPoolsUpdateAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Activate an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Activates scheduled Agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolUpdate>> ActivateAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Creates an Agent pool update \\n For user flow 2 manual update, starts the update immediately. \\n For user flow 3, schedules the update based on the configured update window and delay.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="agentPoolUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        System.Threading.Tasks.Task<AgentPoolUpdate> CreateAgentPoolsUpdateAsync(string poolId, AgentPoolUpdate agentPoolUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Creates an Agent pool update \\n For user flow 2 manual update, starts the update immediately. \\n For user flow 3, schedules the update based on the configured update window and delay.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="agentPoolUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolUpdate>> CreateAgentPoolsUpdateWithHttpInfoAsync(string poolId, AgentPoolUpdate agentPoolUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deactivate an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Deactivates scheduled Agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        System.Threading.Tasks.Task<AgentPoolUpdate> DeactivateAgentPoolsUpdateAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deactivate an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Deactivates scheduled Agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolUpdate>> DeactivateAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Deletes Agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAgentPoolsUpdateAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Deletes Agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Agent Pools
        /// </summary>
        /// <remarks>
        /// Fetches AgentPools based on request parameters for a given org
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitPerPoolType">Maximum number of AgentPools being returned (optional, default to 5)</param>
        /// <param name="poolType">Agent type to search for (optional)</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AgentPool&gt;</returns>
        IOktaCollectionClient<AgentPool> GetAgentPoolsAsync(int? limitPerPoolType = default(int?), string poolType = default(string), string after = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Agent Pools
        /// </summary>
        /// <remarks>
        /// Fetches AgentPools based on request parameters for a given org
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitPerPoolType">Maximum number of AgentPools being returned (optional, default to 5)</param>
        /// <param name="poolType">Agent type to search for (optional)</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AgentPool&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AgentPool>>> GetAgentPoolsWithHttpInfoAsync(int? limitPerPoolType = default(int?), string poolType = default(string), string after = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Agent Pool update by id
        /// </summary>
        /// <remarks>
        /// Gets Agent pool update from updateId
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        System.Threading.Tasks.Task<AgentPoolUpdate> GetAgentPoolsUpdateInstanceAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Agent Pool update by id
        /// </summary>
        /// <remarks>
        /// Gets Agent pool update from updateId
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolUpdate>> GetAgentPoolsUpdateInstanceWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Agent Pool update&#39;s settings
        /// </summary>
        /// <remarks>
        /// Gets the current state of the agent pool update instance settings
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdateSetting</returns>
        System.Threading.Tasks.Task<AgentPoolUpdateSetting> GetAgentPoolsUpdateSettingsAsync(string poolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Agent Pool update&#39;s settings
        /// </summary>
        /// <remarks>
        /// Gets the current state of the agent pool update instance settings
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdateSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolUpdateSetting>> GetAgentPoolsUpdateSettingsWithHttpInfoAsync(string poolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Agent Pool updates
        /// </summary>
        /// <remarks>
        /// Gets List of Agent pool updates
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="scheduled">Scope the list only to scheduled or ad-hoc updates. If the parameter is not provided we will return the whole list of updates. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AgentPoolUpdate&gt;</returns>
        IOktaCollectionClient<AgentPoolUpdate> GetAgentPoolsUpdatesAsync(string poolId, bool? scheduled = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Agent Pool updates
        /// </summary>
        /// <remarks>
        /// Gets List of Agent pool updates
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="scheduled">Scope the list only to scheduled or ad-hoc updates. If the parameter is not provided we will return the whole list of updates. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AgentPoolUpdate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AgentPoolUpdate>>> GetAgentPoolsUpdatesWithHttpInfoAsync(string poolId, bool? scheduled = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pause an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Pauses running or queued Agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        System.Threading.Tasks.Task<AgentPoolUpdate> PauseAgentPoolsUpdateAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pause an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Pauses running or queued Agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolUpdate>> PauseAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resume an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Resumes running or queued Agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        System.Threading.Tasks.Task<AgentPoolUpdate> ResumeAgentPoolsUpdateAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resume an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Resumes running or queued Agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolUpdate>> ResumeAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retry an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Retries Agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        System.Threading.Tasks.Task<AgentPoolUpdate> RetryAgentPoolsUpdateAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retry an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Retries Agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolUpdate>> RetryAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an Agent pool update settings
        /// </summary>
        /// <remarks>
        /// Updates Agent pool update settings
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="agentPoolUpdateSetting"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdateSetting</returns>
        System.Threading.Tasks.Task<AgentPoolUpdateSetting> SetAgentPoolsUpdateSettingsAsync(string poolId, AgentPoolUpdateSetting agentPoolUpdateSetting, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an Agent pool update settings
        /// </summary>
        /// <remarks>
        /// Updates Agent pool update settings
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="agentPoolUpdateSetting"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdateSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolUpdateSetting>> SetAgentPoolsUpdateSettingsWithHttpInfoAsync(string poolId, AgentPoolUpdateSetting agentPoolUpdateSetting, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stop an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Stops Agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        System.Threading.Tasks.Task<AgentPoolUpdate> StopAgentPoolsUpdateAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stop an Agent Pool update
        /// </summary>
        /// <remarks>
        /// Stops Agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolUpdate>> StopAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an Agent Pool update by id
        /// </summary>
        /// <remarks>
        /// Updates Agent pool update and return latest agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="agentPoolUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        System.Threading.Tasks.Task<AgentPoolUpdate> UpdateAgentPoolsUpdateAsync(string poolId, string updateId, AgentPoolUpdate agentPoolUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an Agent Pool update by id
        /// </summary>
        /// <remarks>
        /// Updates Agent pool update and return latest agent pool update
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="agentPoolUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolUpdate>> UpdateAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, AgentPoolUpdate agentPoolUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgentPoolsApi :  IAgentPoolsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AgentPoolsApi : IAgentPoolsApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AgentPoolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AgentPoolsApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            configuration = Sdk.Client.Configuration.GetConfigurationOrDefault(configuration);

            this.Configuration = Okta.Sdk.Client.Configuration.MergeConfigurations(
                Okta.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            
            Sdk.Client.Configuration.Validate((Configuration)this.Configuration);
            this.AsynchronousClient = new Okta.Sdk.Client.ApiClient(this.Configuration.OktaDomain);
            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgentPoolsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AgentPoolsApi(Okta.Sdk.Client.IAsynchronousClient asyncClient, Okta.Sdk.Client.IReadableConfiguration configuration)
        {
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Okta.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.OktaDomain;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
         
        /// <summary>
        /// Activate an Agent Pool update Activates scheduled Agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        public async System.Threading.Tasks.Task<AgentPoolUpdate> ActivateAgentPoolsUpdateAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<AgentPoolUpdate> localVarResponse = await ActivateAgentPoolsUpdateWithHttpInfoAsync(poolId, updateId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Activate an Agent Pool update Activates scheduled Agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<AgentPoolUpdate>> ActivateAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling AgentPoolsApi->ActivateAgentPoolsUpdate");
            }

            // verify the required parameter 'updateId' is set
            if (updateId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'updateId' when calling AgentPoolsApi->ActivateAgentPoolsUpdate");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poolId", Okta.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("updateId", Okta.Sdk.Client.ClientUtils.ParameterToString(updateId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AgentPoolUpdate>("/api/v1/agentPools/{poolId}/updates/{updateId}/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateAgentPoolsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Agent Pool update Creates an Agent pool update \\n For user flow 2 manual update, starts the update immediately. \\n For user flow 3, schedules the update based on the configured update window and delay.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="agentPoolUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        public async System.Threading.Tasks.Task<AgentPoolUpdate> CreateAgentPoolsUpdateAsync(string poolId, AgentPoolUpdate agentPoolUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<AgentPoolUpdate> localVarResponse = await CreateAgentPoolsUpdateWithHttpInfoAsync(poolId, agentPoolUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Create an Agent Pool update Creates an Agent pool update \\n For user flow 2 manual update, starts the update immediately. \\n For user flow 3, schedules the update based on the configured update window and delay.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="agentPoolUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<AgentPoolUpdate>> CreateAgentPoolsUpdateWithHttpInfoAsync(string poolId, AgentPoolUpdate agentPoolUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling AgentPoolsApi->CreateAgentPoolsUpdate");
            }

            // verify the required parameter 'agentPoolUpdate' is set
            if (agentPoolUpdate == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'agentPoolUpdate' when calling AgentPoolsApi->CreateAgentPoolsUpdate");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poolId", Okta.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.Data = agentPoolUpdate;

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AgentPoolUpdate>("/api/v1/agentPools/{poolId}/updates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAgentPoolsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate an Agent Pool update Deactivates scheduled Agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        public async System.Threading.Tasks.Task<AgentPoolUpdate> DeactivateAgentPoolsUpdateAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<AgentPoolUpdate> localVarResponse = await DeactivateAgentPoolsUpdateWithHttpInfoAsync(poolId, updateId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Deactivate an Agent Pool update Deactivates scheduled Agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<AgentPoolUpdate>> DeactivateAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling AgentPoolsApi->DeactivateAgentPoolsUpdate");
            }

            // verify the required parameter 'updateId' is set
            if (updateId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'updateId' when calling AgentPoolsApi->DeactivateAgentPoolsUpdate");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poolId", Okta.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("updateId", Okta.Sdk.Client.ClientUtils.ParameterToString(updateId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AgentPoolUpdate>("/api/v1/agentPools/{poolId}/updates/{updateId}/deactivate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateAgentPoolsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Agent Pool update Deletes Agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAgentPoolsUpdateAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAgentPoolsUpdateWithHttpInfoAsync(poolId, updateId, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete an Agent Pool update Deletes Agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> DeleteAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling AgentPoolsApi->DeleteAgentPoolsUpdate");
            }

            // verify the required parameter 'updateId' is set
            if (updateId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'updateId' when calling AgentPoolsApi->DeleteAgentPoolsUpdate");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poolId", Okta.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("updateId", Okta.Sdk.Client.ClientUtils.ParameterToString(updateId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/agentPools/{poolId}/updates/{updateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAgentPoolsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Agent Pools Fetches AgentPools based on request parameters for a given org
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitPerPoolType">Maximum number of AgentPools being returned (optional, default to 5)</param>
        /// <param name="poolType">Agent type to search for (optional)</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AgentPool&gt;</returns>
        public IOktaCollectionClient<AgentPool> GetAgentPoolsAsync(int? limitPerPoolType = default(int?), string poolType = default(string), string after = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limitPerPoolType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limitPerPoolType", limitPerPoolType));
            }
            if (poolType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "poolType", poolType));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            return new OktaCollectionClient<AgentPool>(localVarRequestOptions, "/api/v1/agentPools", this.AsynchronousClient);
        }
        /// <summary>
        /// List all Agent Pools Fetches AgentPools based on request parameters for a given org
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitPerPoolType">Maximum number of AgentPools being returned (optional, default to 5)</param>
        /// <param name="poolType">Agent type to search for (optional)</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AgentPool&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<AgentPool>>> GetAgentPoolsWithHttpInfoAsync(int? limitPerPoolType = default(int?), string poolType = default(string), string after = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limitPerPoolType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limitPerPoolType", limitPerPoolType));
            }
            if (poolType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "poolType", poolType));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AgentPool>>("/api/v1/agentPools", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAgentPools", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Agent Pool update by id Gets Agent pool update from updateId
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        public async System.Threading.Tasks.Task<AgentPoolUpdate> GetAgentPoolsUpdateInstanceAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<AgentPoolUpdate> localVarResponse = await GetAgentPoolsUpdateInstanceWithHttpInfoAsync(poolId, updateId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve an Agent Pool update by id Gets Agent pool update from updateId
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<AgentPoolUpdate>> GetAgentPoolsUpdateInstanceWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling AgentPoolsApi->GetAgentPoolsUpdateInstance");
            }

            // verify the required parameter 'updateId' is set
            if (updateId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'updateId' when calling AgentPoolsApi->GetAgentPoolsUpdateInstance");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poolId", Okta.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("updateId", Okta.Sdk.Client.ClientUtils.ParameterToString(updateId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AgentPoolUpdate>("/api/v1/agentPools/{poolId}/updates/{updateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAgentPoolsUpdateInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Agent Pool update&#39;s settings Gets the current state of the agent pool update instance settings
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdateSetting</returns>
        public async System.Threading.Tasks.Task<AgentPoolUpdateSetting> GetAgentPoolsUpdateSettingsAsync(string poolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<AgentPoolUpdateSetting> localVarResponse = await GetAgentPoolsUpdateSettingsWithHttpInfoAsync(poolId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve an Agent Pool update&#39;s settings Gets the current state of the agent pool update instance settings
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdateSetting)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<AgentPoolUpdateSetting>> GetAgentPoolsUpdateSettingsWithHttpInfoAsync(string poolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling AgentPoolsApi->GetAgentPoolsUpdateSettings");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poolId", Okta.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AgentPoolUpdateSetting>("/api/v1/agentPools/{poolId}/updates/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAgentPoolsUpdateSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Agent Pool updates Gets List of Agent pool updates
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="scheduled">Scope the list only to scheduled or ad-hoc updates. If the parameter is not provided we will return the whole list of updates. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AgentPoolUpdate&gt;</returns>
        public IOktaCollectionClient<AgentPoolUpdate> GetAgentPoolsUpdatesAsync(string poolId, bool? scheduled = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling AgentPoolsApi->GetAgentPoolsUpdates");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poolId", Okta.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (scheduled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scheduled", scheduled));
            }

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            
            return new OktaCollectionClient<AgentPoolUpdate>(localVarRequestOptions, "/api/v1/agentPools/{poolId}/updates", this.AsynchronousClient);
        }
        /// <summary>
        /// List all Agent Pool updates Gets List of Agent pool updates
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="scheduled">Scope the list only to scheduled or ad-hoc updates. If the parameter is not provided we will return the whole list of updates. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AgentPoolUpdate&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<AgentPoolUpdate>>> GetAgentPoolsUpdatesWithHttpInfoAsync(string poolId, bool? scheduled = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling AgentPoolsApi->GetAgentPoolsUpdates");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poolId", Okta.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (scheduled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scheduled", scheduled));
            }

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AgentPoolUpdate>>("/api/v1/agentPools/{poolId}/updates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAgentPoolsUpdates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause an Agent Pool update Pauses running or queued Agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        public async System.Threading.Tasks.Task<AgentPoolUpdate> PauseAgentPoolsUpdateAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<AgentPoolUpdate> localVarResponse = await PauseAgentPoolsUpdateWithHttpInfoAsync(poolId, updateId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Pause an Agent Pool update Pauses running or queued Agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<AgentPoolUpdate>> PauseAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling AgentPoolsApi->PauseAgentPoolsUpdate");
            }

            // verify the required parameter 'updateId' is set
            if (updateId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'updateId' when calling AgentPoolsApi->PauseAgentPoolsUpdate");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poolId", Okta.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("updateId", Okta.Sdk.Client.ClientUtils.ParameterToString(updateId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AgentPoolUpdate>("/api/v1/agentPools/{poolId}/updates/{updateId}/pause", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseAgentPoolsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume an Agent Pool update Resumes running or queued Agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        public async System.Threading.Tasks.Task<AgentPoolUpdate> ResumeAgentPoolsUpdateAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<AgentPoolUpdate> localVarResponse = await ResumeAgentPoolsUpdateWithHttpInfoAsync(poolId, updateId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Resume an Agent Pool update Resumes running or queued Agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<AgentPoolUpdate>> ResumeAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling AgentPoolsApi->ResumeAgentPoolsUpdate");
            }

            // verify the required parameter 'updateId' is set
            if (updateId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'updateId' when calling AgentPoolsApi->ResumeAgentPoolsUpdate");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poolId", Okta.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("updateId", Okta.Sdk.Client.ClientUtils.ParameterToString(updateId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AgentPoolUpdate>("/api/v1/agentPools/{poolId}/updates/{updateId}/resume", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeAgentPoolsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retry an Agent Pool update Retries Agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        public async System.Threading.Tasks.Task<AgentPoolUpdate> RetryAgentPoolsUpdateAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<AgentPoolUpdate> localVarResponse = await RetryAgentPoolsUpdateWithHttpInfoAsync(poolId, updateId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Retry an Agent Pool update Retries Agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<AgentPoolUpdate>> RetryAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling AgentPoolsApi->RetryAgentPoolsUpdate");
            }

            // verify the required parameter 'updateId' is set
            if (updateId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'updateId' when calling AgentPoolsApi->RetryAgentPoolsUpdate");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poolId", Okta.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("updateId", Okta.Sdk.Client.ClientUtils.ParameterToString(updateId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AgentPoolUpdate>("/api/v1/agentPools/{poolId}/updates/{updateId}/retry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetryAgentPoolsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Agent pool update settings Updates Agent pool update settings
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="agentPoolUpdateSetting"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdateSetting</returns>
        public async System.Threading.Tasks.Task<AgentPoolUpdateSetting> SetAgentPoolsUpdateSettingsAsync(string poolId, AgentPoolUpdateSetting agentPoolUpdateSetting, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<AgentPoolUpdateSetting> localVarResponse = await SetAgentPoolsUpdateSettingsWithHttpInfoAsync(poolId, agentPoolUpdateSetting, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Update an Agent pool update settings Updates Agent pool update settings
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="agentPoolUpdateSetting"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdateSetting)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<AgentPoolUpdateSetting>> SetAgentPoolsUpdateSettingsWithHttpInfoAsync(string poolId, AgentPoolUpdateSetting agentPoolUpdateSetting, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling AgentPoolsApi->SetAgentPoolsUpdateSettings");
            }

            // verify the required parameter 'agentPoolUpdateSetting' is set
            if (agentPoolUpdateSetting == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'agentPoolUpdateSetting' when calling AgentPoolsApi->SetAgentPoolsUpdateSettings");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poolId", Okta.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.Data = agentPoolUpdateSetting;

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AgentPoolUpdateSetting>("/api/v1/agentPools/{poolId}/updates/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAgentPoolsUpdateSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop an Agent Pool update Stops Agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        public async System.Threading.Tasks.Task<AgentPoolUpdate> StopAgentPoolsUpdateAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<AgentPoolUpdate> localVarResponse = await StopAgentPoolsUpdateWithHttpInfoAsync(poolId, updateId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Stop an Agent Pool update Stops Agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<AgentPoolUpdate>> StopAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling AgentPoolsApi->StopAgentPoolsUpdate");
            }

            // verify the required parameter 'updateId' is set
            if (updateId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'updateId' when calling AgentPoolsApi->StopAgentPoolsUpdate");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poolId", Okta.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("updateId", Okta.Sdk.Client.ClientUtils.ParameterToString(updateId)); // path parameter

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AgentPoolUpdate>("/api/v1/agentPools/{poolId}/updates/{updateId}/stop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopAgentPoolsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Agent Pool update by id Updates Agent pool update and return latest agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="agentPoolUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgentPoolUpdate</returns>
        public async System.Threading.Tasks.Task<AgentPoolUpdate> UpdateAgentPoolsUpdateAsync(string poolId, string updateId, AgentPoolUpdate agentPoolUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<AgentPoolUpdate> localVarResponse = await UpdateAgentPoolsUpdateWithHttpInfoAsync(poolId, updateId, agentPoolUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Update an Agent Pool update by id Updates Agent pool update and return latest agent pool update
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Id of the agent pool for which the settings will apply</param>
        /// <param name="updateId">Id of the update</param>
        /// <param name="agentPoolUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgentPoolUpdate)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<AgentPoolUpdate>> UpdateAgentPoolsUpdateWithHttpInfoAsync(string poolId, string updateId, AgentPoolUpdate agentPoolUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling AgentPoolsApi->UpdateAgentPoolsUpdate");
            }

            // verify the required parameter 'updateId' is set
            if (updateId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'updateId' when calling AgentPoolsApi->UpdateAgentPoolsUpdate");
            }

            // verify the required parameter 'agentPoolUpdate' is set
            if (agentPoolUpdate == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'agentPoolUpdate' when calling AgentPoolsApi->UpdateAgentPoolsUpdate");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("poolId", Okta.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("updateId", Okta.Sdk.Client.ClientUtils.ParameterToString(updateId)); // path parameter
            localVarRequestOptions.Data = agentPoolUpdate;

            // authentication (API_Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth_2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AgentPoolUpdate>("/api/v1/agentPools/{poolId}/updates/{updateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAgentPoolsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
