/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// The authentication scheme used for this request.  To use Basic Auth for authentication, set &#x60;type&#x60; to &#x60;HEADER&#x60;, &#x60;key&#x60; to &#x60;Authorization&#x60;, and &#x60;value&#x60; to the Base64-encoded string of \&quot;username:password\&quot;. Ensure that you include the scheme (including space) as part of the &#x60;value&#x60; parameter. For example, &#x60;Basic YWRtaW46c3VwZXJzZWNyZXQ&#x3D;&#x60;. See [HTTP Basic Authentication](/books/api-security/authn/api-authentication-options/#http-basic-authentication).
    /// </summary>
    [DataContract(Name = "EventHookChannelConfigAuthScheme")]
    
    public partial class EventHookChannelConfigAuthScheme : IEquatable<EventHookChannelConfigAuthScheme>
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        
        public EventHookChannelConfigAuthSchemeType Type { get; set; }
        
        /// <summary>
        /// The name for the authorization header
        /// </summary>
        /// <value>The name for the authorization header</value>
        [DataMember(Name = "key", EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// The header value. This secret key is passed to your external service endpoint for security verification. This property is not returned in the response.
        /// </summary>
        /// <value>The header value. This secret key is passed to your external service endpoint for security verification. This property is not returned in the response.</value>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventHookChannelConfigAuthScheme {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventHookChannelConfigAuthScheme);
        }

        /// <summary>
        /// Returns true if EventHookChannelConfigAuthScheme instances are equal
        /// </summary>
        /// <param name="input">Instance of EventHookChannelConfigAuthScheme to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventHookChannelConfigAuthScheme input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
