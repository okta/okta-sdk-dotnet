/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// OSVersionConstraint
    /// </summary>
    [DataContract(Name = "OSVersionConstraint")]
    
    public partial class OSVersionConstraint : IEquatable<OSVersionConstraint>
    {
        /// <summary>
        /// Indicates the Windows major version
        /// </summary>
        /// <value>Indicates the Windows major version</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class MajorVersionConstraintEnum : StringEnum
        {
            /// <summary>
            /// StringEnum _11 for value: WINDOWS_11
            /// </summary>
            
            public static MajorVersionConstraintEnum _11 = new MajorVersionConstraintEnum("WINDOWS_11");

            /// <summary>
            /// StringEnum _10 for value: WINDOWS_10
            /// </summary>
            
            public static MajorVersionConstraintEnum _10 = new MajorVersionConstraintEnum("WINDOWS_10");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="MajorVersionConstraintEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator MajorVersionConstraintEnum(string value) => new MajorVersionConstraintEnum(value);

            /// <summary>
            /// Creates a new <see cref="MajorVersionConstraint"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public MajorVersionConstraintEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// Indicates the Windows major version
        /// </summary>
        /// <value>Indicates the Windows major version</value>
        [DataMember(Name = "majorVersionConstraint", EmitDefaultValue = true)]
        
        public MajorVersionConstraintEnum MajorVersionConstraint { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OSVersionConstraint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public OSVersionConstraint() { }
        
        /// <summary>
        /// Gets or Sets DynamicVersionRequirement
        /// </summary>
        [DataMember(Name = "dynamicVersionRequirement", EmitDefaultValue = true)]
        public OSVersionConstraintDynamicVersionRequirement DynamicVersionRequirement { get; set; }

        /// <summary>
        /// The Windows device version must be equal to or newer than the specified version
        /// </summary>
        /// <value>The Windows device version must be equal to or newer than the specified version</value>
        [DataMember(Name = "minimum", EmitDefaultValue = true)]
        public string Minimum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OSVersionConstraint {\n");
            sb.Append("  DynamicVersionRequirement: ").Append(DynamicVersionRequirement).Append("\n");
            sb.Append("  MajorVersionConstraint: ").Append(MajorVersionConstraint).Append("\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OSVersionConstraint);
        }

        /// <summary>
        /// Returns true if OSVersionConstraint instances are equal
        /// </summary>
        /// <param name="input">Instance of OSVersionConstraint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OSVersionConstraint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DynamicVersionRequirement == input.DynamicVersionRequirement ||
                    (this.DynamicVersionRequirement != null &&
                    this.DynamicVersionRequirement.Equals(input.DynamicVersionRequirement))
                ) && 
                (
                    this.MajorVersionConstraint == input.MajorVersionConstraint ||
                    this.MajorVersionConstraint.Equals(input.MajorVersionConstraint)
                ) && 
                (
                    this.Minimum == input.Minimum ||
                    (this.Minimum != null &&
                    this.Minimum.Equals(input.Minimum))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.DynamicVersionRequirement != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicVersionRequirement.GetHashCode();
                }
                if (this.MajorVersionConstraint != null)
                {
                    hashCode = (hashCode * 59) + this.MajorVersionConstraint.GetHashCode();
                }
                if (this.Minimum != null)
                {
                    hashCode = (hashCode * 59) + this.Minimum.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
