/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// LogAuthenticationContext
    /// </summary>
    [DataContract(Name = "LogAuthenticationContext")]
    
    public partial class LogAuthenticationContext : IEquatable<LogAuthenticationContext>
    {
        
        /// <summary>
        /// Gets or Sets AuthenticationProvider
        /// </summary>
        [DataMember(Name = "authenticationProvider", EmitDefaultValue = false)]
        public string AuthenticationProvider { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationStep
        /// </summary>
        [DataMember(Name = "authenticationStep", EmitDefaultValue = false)]
        public int AuthenticationStep { get; private set; }

        /// <summary>
        /// Returns false as AuthenticationStep should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAuthenticationStep()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CredentialProvider
        /// </summary>
        [DataMember(Name = "credentialProvider", EmitDefaultValue = false)]
        public string CredentialProvider { get; set; }

        /// <summary>
        /// Gets or Sets CredentialType
        /// </summary>
        [DataMember(Name = "credentialType", EmitDefaultValue = false)]
        public string CredentialType { get; set; }

        /// <summary>
        /// Gets or Sets ExternalSessionId
        /// </summary>
        [DataMember(Name = "externalSessionId", EmitDefaultValue = false)]
        public string ExternalSessionId { get; private set; }

        /// <summary>
        /// Returns false as ExternalSessionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExternalSessionId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Interface
        /// </summary>
        [DataMember(Name = "interface", EmitDefaultValue = false)]
        public string Interface { get; private set; }

        /// <summary>
        /// Returns false as Interface should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInterface()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name = "issuer", EmitDefaultValue = false)]
        public LogIssuer Issuer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogAuthenticationContext {\n");
            sb.Append("  AuthenticationProvider: ").Append(AuthenticationProvider).Append("\n");
            sb.Append("  AuthenticationStep: ").Append(AuthenticationStep).Append("\n");
            sb.Append("  CredentialProvider: ").Append(CredentialProvider).Append("\n");
            sb.Append("  CredentialType: ").Append(CredentialType).Append("\n");
            sb.Append("  ExternalSessionId: ").Append(ExternalSessionId).Append("\n");
            sb.Append("  Interface: ").Append(Interface).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogAuthenticationContext);
        }

        /// <summary>
        /// Returns true if LogAuthenticationContext instances are equal
        /// </summary>
        /// <param name="input">Instance of LogAuthenticationContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogAuthenticationContext input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthenticationProvider == input.AuthenticationProvider ||
                    (this.AuthenticationProvider != null &&
                    this.AuthenticationProvider.Equals(input.AuthenticationProvider))
                ) && 
                (
                    this.AuthenticationStep == input.AuthenticationStep ||
                    this.AuthenticationStep.Equals(input.AuthenticationStep)
                ) && 
                (
                    this.CredentialProvider == input.CredentialProvider ||
                    (this.CredentialProvider != null &&
                    this.CredentialProvider.Equals(input.CredentialProvider))
                ) && 
                (
                    this.CredentialType == input.CredentialType ||
                    (this.CredentialType != null &&
                    this.CredentialType.Equals(input.CredentialType))
                ) && 
                (
                    this.ExternalSessionId == input.ExternalSessionId ||
                    (this.ExternalSessionId != null &&
                    this.ExternalSessionId.Equals(input.ExternalSessionId))
                ) && 
                (
                    this.Interface == input.Interface ||
                    (this.Interface != null &&
                    this.Interface.Equals(input.Interface))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.AuthenticationProvider != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticationProvider.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AuthenticationStep.GetHashCode();
                if (this.CredentialProvider != null)
                {
                    hashCode = (hashCode * 59) + this.CredentialProvider.GetHashCode();
                }
                if (this.CredentialType != null)
                {
                    hashCode = (hashCode * 59) + this.CredentialType.GetHashCode();
                }
                if (this.ExternalSessionId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalSessionId.GetHashCode();
                }
                if (this.Interface != null)
                {
                    hashCode = (hashCode * 59) + this.Interface.GetHashCode();
                }
                if (this.Issuer != null)
                {
                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
