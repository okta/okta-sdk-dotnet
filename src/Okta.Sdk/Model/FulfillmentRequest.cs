/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// Fulfillment Request
    /// </summary>
    [DataContract(Name = "FulfillmentRequest")]
    
    public partial class FulfillmentRequest : IEquatable<FulfillmentRequest>
    {
        /// <summary>
        /// Name of the fulfillment provider for the WebAuthn Preregistration Factor
        /// </summary>
        /// <value>Name of the fulfillment provider for the WebAuthn Preregistration Factor</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class FulfillmentProviderEnum : StringEnum
        {
            /// <summary>
            /// StringEnum Yubico for value: yubico
            /// </summary>
            
            public static FulfillmentProviderEnum Yubico = new FulfillmentProviderEnum("yubico");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="FulfillmentProviderEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator FulfillmentProviderEnum(string value) => new FulfillmentProviderEnum(value);

            /// <summary>
            /// Creates a new <see cref="FulfillmentProvider"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public FulfillmentProviderEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// Name of the fulfillment provider for the WebAuthn Preregistration Factor
        /// </summary>
        /// <value>Name of the fulfillment provider for the WebAuthn Preregistration Factor</value>
        [DataMember(Name = "fulfillmentProvider", EmitDefaultValue = true)]
        
        public FulfillmentProviderEnum FulfillmentProvider { get; set; }
        
        /// <summary>
        /// Gets or Sets FulfillmentData
        /// </summary>
        [DataMember(Name = "fulfillmentData", EmitDefaultValue = true)]
        public FulfillmentData FulfillmentData { get; set; }

        /// <summary>
        /// ID of an existing Okta user
        /// </summary>
        /// <value>ID of an existing Okta user</value>
        [DataMember(Name = "userId", EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FulfillmentRequest {\n");
            sb.Append("  FulfillmentData: ").Append(FulfillmentData).Append("\n");
            sb.Append("  FulfillmentProvider: ").Append(FulfillmentProvider).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentRequest);
        }

        /// <summary>
        /// Returns true if FulfillmentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FulfillmentData == input.FulfillmentData ||
                    (this.FulfillmentData != null &&
                    this.FulfillmentData.Equals(input.FulfillmentData))
                ) && 
                (
                    this.FulfillmentProvider == input.FulfillmentProvider ||
                    this.FulfillmentProvider.Equals(input.FulfillmentProvider)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.FulfillmentData != null)
                {
                    hashCode = (hashCode * 59) + this.FulfillmentData.GetHashCode();
                }
                if (this.FulfillmentProvider != null)
                {
                    hashCode = (hashCode * 59) + this.FulfillmentProvider.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
