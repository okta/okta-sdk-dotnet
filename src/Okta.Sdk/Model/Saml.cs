/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// SAML configuration details
    /// </summary>
    [DataContract(Name = "Saml")]
    
    public partial class Saml : IEquatable<Saml>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Saml" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Saml() { }
        
        /// <summary>
        /// List of Assertion Consumer Service (ACS) URLs. The default ACS URL is required and is indicated by a null &#x60;index&#x60; value. You can use the org-level variables you defined in the &#x60;config&#x60; array in the URL. For example: &#x60;https://${org.subdomain}.example.com/saml/login&#x60;
        /// </summary>
        /// <value>List of Assertion Consumer Service (ACS) URLs. The default ACS URL is required and is indicated by a null &#x60;index&#x60; value. You can use the org-level variables you defined in the &#x60;config&#x60; array in the URL. For example: &#x60;https://${org.subdomain}.example.com/saml/login&#x60;</value>
        [DataMember(Name = "acs", EmitDefaultValue = true)]
        public List<SamlAcsInner> Acs { get; set; }

        /// <summary>
        /// The URL to your customer-facing instructions for configuring your SAML integration. See [Customer configuration document guidelines](https://developer.okta.com/docs/guides/submit-app-prereq/main/#customer-configuration-document-guidelines).
        /// </summary>
        /// <value>The URL to your customer-facing instructions for configuring your SAML integration. See [Customer configuration document guidelines](https://developer.okta.com/docs/guides/submit-app-prereq/main/#customer-configuration-document-guidelines).</value>
        [DataMember(Name = "doc", EmitDefaultValue = true)]
        public string Doc { get; set; }

        /// <summary>
        /// Globally unique name for your SAML entity. For instance, your Identity Provider (IdP) or Service Provider (SP) URL.
        /// </summary>
        /// <value>Globally unique name for your SAML entity. For instance, your Identity Provider (IdP) or Service Provider (SP) URL.</value>
        [DataMember(Name = "entityId", EmitDefaultValue = true)]
        public string EntityId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Saml {\n");
            sb.Append("  Acs: ").Append(Acs).Append("\n");
            sb.Append("  Doc: ").Append(Doc).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Saml);
        }

        /// <summary>
        /// Returns true if Saml instances are equal
        /// </summary>
        /// <param name="input">Instance of Saml to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Saml input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Acs == input.Acs ||
                    this.Acs != null &&
                    input.Acs != null &&
                    this.Acs.SequenceEqual(input.Acs)
                ) && 
                (
                    this.Doc == input.Doc ||
                    (this.Doc != null &&
                    this.Doc.Equals(input.Doc))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Acs != null)
                {
                    hashCode = (hashCode * 59) + this.Acs.GetHashCode();
                }
                if (this.Doc != null)
                {
                    hashCode = (hashCode * 59) + this.Doc.GetHashCode();
                }
                if (this.EntityId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityId.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
