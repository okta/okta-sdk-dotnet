/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// The parameter value of the command. * To indicate that the supplied credentials are valid, supply a type property set to &#x60;com.okta.action.update&#x60; together with a value property set to &#x60;{\&quot;credential\&quot;: \&quot;VERIFIED\&quot;}&#x60;. * To indicate that the supplied credentials are invalid, supply a type property set to &#x60;com.okta.action.update&#x60; together with a value property set to &#x60;{\&quot;credential\&quot;: \&quot;UNVERIFIED\&quot;}&#x60;.   Alternatively, you can send an empty response (&#x60;204&#x60;). By default, the &#x60;data.action.credential&#x60; is always set to &#x60;UNVERIFIED&#x60;.
    /// </summary>
    [DataContract(Name = "PasswordImportResponse_commands_inner_value")]
    
    public partial class PasswordImportResponseCommandsInnerValue : IEquatable<PasswordImportResponseCommandsInnerValue>
    {
        /// <summary>
        /// Defines Credential
        /// </summary>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class CredentialEnum : StringEnum
        {
            /// <summary>
            /// StringEnum UNVERIFIED for value: UNVERIFIED
            /// </summary>
            
            public static CredentialEnum UNVERIFIED = new CredentialEnum("UNVERIFIED");

            /// <summary>
            /// StringEnum VERIFIED for value: VERIFIED
            /// </summary>
            
            public static CredentialEnum VERIFIED = new CredentialEnum("VERIFIED");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="CredentialEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator CredentialEnum(string value) => new CredentialEnum(value);

            /// <summary>
            /// Creates a new <see cref="Credential"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public CredentialEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// Gets or Sets Credential
        /// </summary>
        [DataMember(Name = "credential", EmitDefaultValue = true)]
        
        public CredentialEnum Credential { get; set; }
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PasswordImportResponseCommandsInnerValue {\n");
            sb.Append("  Credential: ").Append(Credential).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PasswordImportResponseCommandsInnerValue);
        }

        /// <summary>
        /// Returns true if PasswordImportResponseCommandsInnerValue instances are equal
        /// </summary>
        /// <param name="input">Instance of PasswordImportResponseCommandsInnerValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PasswordImportResponseCommandsInnerValue input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Credential == input.Credential ||
                    this.Credential.Equals(input.Credential)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Credential != null)
                {
                    hashCode = (hashCode * 59) + this.Credential.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
