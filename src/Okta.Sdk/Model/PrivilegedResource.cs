/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// PrivilegedResource
    /// </summary>
    [DataContract(Name = "PrivilegedResource")]
    [JsonConverter(typeof(JsonSubtypes), "ResourceType")]
    [JsonSubtypes.KnownSubType(typeof(PrivilegedResourceAccountApp), "APP_ACCOUNT")]
    [JsonSubtypes.KnownSubType(typeof(PrivilegedResourceAccountOkta), "OKTA_USER_ACCOUNT")]
    [JsonSubtypes.KnownSubType(typeof(PrivilegedResourceAccountApp), "PrivilegedResourceAccountApp")]
    [JsonSubtypes.KnownSubType(typeof(PrivilegedResourceAccountOkta), "PrivilegedResourceAccountOkta")]
    
    public partial class PrivilegedResource : IEquatable<PrivilegedResource>
    {

        /// <summary>
        /// Gets or Sets CredentialSyncState
        /// </summary>
        [DataMember(Name = "credentialSyncState", EmitDefaultValue = true)]
        
        public CredentialSyncState CredentialSyncState { get; set; }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [DataMember(Name = "resourceType", EmitDefaultValue = true)]
        
        public PrivilegedResourceType ResourceType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        
        public PrivilegedResourceStatus Status { get; set; }
        
        /// <summary>
        /// Timestamp when the object was created
        /// </summary>
        /// <value>Timestamp when the object was created</value>
        [DataMember(Name = "created", EmitDefaultValue = true)]
        public DateTimeOffset Created { get; private set; }

        /// <summary>
        /// Returns false as Created should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreated()
        {
            return false;
        }
        /// <summary>
        /// Timestamp when the credential was changed
        /// </summary>
        /// <value>Timestamp when the credential was changed</value>
        [DataMember(Name = "credentialChanged", EmitDefaultValue = true)]
        public DateTimeOffset CredentialChanged { get; private set; }

        /// <summary>
        /// Returns false as CredentialChanged should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCredentialChanged()
        {
            return false;
        }
        /// <summary>
        /// ID of the privileged resource
        /// </summary>
        /// <value>ID of the privileged resource</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Timestamp when the object was last updated
        /// </summary>
        /// <value>Timestamp when the object was last updated</value>
        [DataMember(Name = "lastUpdated", EmitDefaultValue = true)]
        public DateTimeOffset LastUpdated { get; private set; }

        /// <summary>
        /// Returns false as LastUpdated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastUpdated()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrivilegedResource {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CredentialChanged: ").Append(CredentialChanged).Append("\n");
            sb.Append("  CredentialSyncState: ").Append(CredentialSyncState).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrivilegedResource);
        }

        /// <summary>
        /// Returns true if PrivilegedResource instances are equal
        /// </summary>
        /// <param name="input">Instance of PrivilegedResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrivilegedResource input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CredentialChanged == input.CredentialChanged ||
                    (this.CredentialChanged != null &&
                    this.CredentialChanged.Equals(input.CredentialChanged))
                ) && 
                (
                    this.CredentialSyncState == input.CredentialSyncState ||
                    this.CredentialSyncState.Equals(input.CredentialSyncState)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    this.ResourceType.Equals(input.ResourceType)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Created != null)
                {
                    hashCode = (hashCode * 59) + this.Created.GetHashCode();
                }
                if (this.CredentialChanged != null)
                {
                    hashCode = (hashCode * 59) + this.CredentialChanged.GetHashCode();
                }
                if (this.CredentialSyncState != null)
                {
                    hashCode = (hashCode * 59) + this.CredentialSyncState.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.LastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdated.GetHashCode();
                }
                if (this.ResourceType != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceType.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
