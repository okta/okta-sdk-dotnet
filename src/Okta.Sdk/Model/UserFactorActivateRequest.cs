/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template" ModelOneOf
    /// UserFactorActivateRequest
    /// </summary>
    [JsonConverter(typeof(UserFactorActivateRequestJsonConverter))]
    [DataContract(Name = "UserFactorActivateRequest")]
    public partial class UserFactorActivateRequest : AbstractOpenAPISchema, IEquatable<UserFactorActivateRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorActivateRequest" /> class
        /// with the <see cref="Call" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Call.</param>
        public UserFactorActivateRequest(Call actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorActivateRequest" /> class
        /// with the <see cref="Email" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Email.</param>
        public UserFactorActivateRequest(Email actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorActivateRequest" /> class
        /// with the <see cref="Object" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Object.</param>
        public UserFactorActivateRequest(Object actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorActivateRequest" /> class
        /// with the <see cref="Sms" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Sms.</param>
        public UserFactorActivateRequest(Sms actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorActivateRequest" /> class
        /// with the <see cref="TokenSoftwareTotp" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of TokenSoftwareTotp.</param>
        public UserFactorActivateRequest(TokenSoftwareTotp actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorActivateRequest" /> class
        /// with the <see cref="U2f" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of U2f.</param>
        public UserFactorActivateRequest(U2f actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorActivateRequest" /> class
        /// with the <see cref="Webauthn" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Webauthn.</param>
        public UserFactorActivateRequest(Webauthn actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(Call))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Email))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Object))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Sms))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(TokenSoftwareTotp))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(U2f))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Webauthn))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: Call, Email, Object, Sms, TokenSoftwareTotp, U2f, Webauthn");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `Call`. If the actual instance is not `Call`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Call</returns>
        public Call GetCall()
        {
            return (Call)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Email`. If the actual instance is not `Email`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Email</returns>
        public Email GetEmail()
        {
            return (Email)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Object`. If the actual instance is not `Object`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Object</returns>
        public Object GetObject()
        {
            return (Object)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Sms`. If the actual instance is not `Sms`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Sms</returns>
        public Sms GetSms()
        {
            return (Sms)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `TokenSoftwareTotp`. If the actual instance is not `TokenSoftwareTotp`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of TokenSoftwareTotp</returns>
        public TokenSoftwareTotp GetTokenSoftwareTotp()
        {
            return (TokenSoftwareTotp)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `U2f`. If the actual instance is not `U2f`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of U2f</returns>
        public U2f GetU2f()
        {
            return (U2f)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Webauthn`. If the actual instance is not `Webauthn`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Webauthn</returns>
        public Webauthn GetWebauthn()
        {
            return (Webauthn)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserFactorActivateRequest {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, UserFactorActivateRequest.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of UserFactorActivateRequest
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of UserFactorActivateRequest</returns>
        public static UserFactorActivateRequest FromJson(string jsonString)
        {
            UserFactorActivateRequest newUserFactorActivateRequest = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newUserFactorActivateRequest;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(Call).GetProperty("AdditionalProperties") == null)
                {
                    newUserFactorActivateRequest = new UserFactorActivateRequest(JsonConvert.DeserializeObject<Call>(jsonString, UserFactorActivateRequest.SerializerSettings));
                }
                else
                {
                    newUserFactorActivateRequest = new UserFactorActivateRequest(JsonConvert.DeserializeObject<Call>(jsonString, UserFactorActivateRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("Call");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Call: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(Email).GetProperty("AdditionalProperties") == null)
                {
                    newUserFactorActivateRequest = new UserFactorActivateRequest(JsonConvert.DeserializeObject<Email>(jsonString, UserFactorActivateRequest.SerializerSettings));
                }
                else
                {
                    newUserFactorActivateRequest = new UserFactorActivateRequest(JsonConvert.DeserializeObject<Email>(jsonString, UserFactorActivateRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("Email");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Email: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(Object).GetProperty("AdditionalProperties") == null)
                {
                    newUserFactorActivateRequest = new UserFactorActivateRequest(JsonConvert.DeserializeObject<Object>(jsonString, UserFactorActivateRequest.SerializerSettings));
                }
                else
                {
                    newUserFactorActivateRequest = new UserFactorActivateRequest(JsonConvert.DeserializeObject<Object>(jsonString, UserFactorActivateRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("Object");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Object: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(Sms).GetProperty("AdditionalProperties") == null)
                {
                    newUserFactorActivateRequest = new UserFactorActivateRequest(JsonConvert.DeserializeObject<Sms>(jsonString, UserFactorActivateRequest.SerializerSettings));
                }
                else
                {
                    newUserFactorActivateRequest = new UserFactorActivateRequest(JsonConvert.DeserializeObject<Sms>(jsonString, UserFactorActivateRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("Sms");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Sms: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(TokenSoftwareTotp).GetProperty("AdditionalProperties") == null)
                {
                    newUserFactorActivateRequest = new UserFactorActivateRequest(JsonConvert.DeserializeObject<TokenSoftwareTotp>(jsonString, UserFactorActivateRequest.SerializerSettings));
                }
                else
                {
                    newUserFactorActivateRequest = new UserFactorActivateRequest(JsonConvert.DeserializeObject<TokenSoftwareTotp>(jsonString, UserFactorActivateRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("TokenSoftwareTotp");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into TokenSoftwareTotp: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(U2f).GetProperty("AdditionalProperties") == null)
                {
                    newUserFactorActivateRequest = new UserFactorActivateRequest(JsonConvert.DeserializeObject<U2f>(jsonString, UserFactorActivateRequest.SerializerSettings));
                }
                else
                {
                    newUserFactorActivateRequest = new UserFactorActivateRequest(JsonConvert.DeserializeObject<U2f>(jsonString, UserFactorActivateRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("U2f");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into U2f: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(Webauthn).GetProperty("AdditionalProperties") == null)
                {
                    newUserFactorActivateRequest = new UserFactorActivateRequest(JsonConvert.DeserializeObject<Webauthn>(jsonString, UserFactorActivateRequest.SerializerSettings));
                }
                else
                {
                    newUserFactorActivateRequest = new UserFactorActivateRequest(JsonConvert.DeserializeObject<Webauthn>(jsonString, UserFactorActivateRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("Webauthn");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Webauthn: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newUserFactorActivateRequest;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserFactorActivateRequest);
        }

        /// <summary>
        /// Returns true if UserFactorActivateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UserFactorActivateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserFactorActivateRequest input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

    }

    /// <summary>
    /// Custom JSON converter for UserFactorActivateRequest
    /// </summary>
    public class UserFactorActivateRequestJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(UserFactorActivateRequest).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return UserFactorActivateRequest.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
