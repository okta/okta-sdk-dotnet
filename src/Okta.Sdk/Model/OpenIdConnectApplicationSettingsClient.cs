/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// OpenIdConnectApplicationSettingsClient
    /// </summary>
    [DataContract(Name = "OpenIdConnectApplicationSettingsClient")]
    
    public partial class OpenIdConnectApplicationSettingsClient : IEquatable<OpenIdConnectApplicationSettingsClient>
    {

        /// <summary>
        /// Gets or Sets ApplicationType
        /// </summary>
        [DataMember(Name = "application_type", EmitDefaultValue = true)]
        
        public OpenIdConnectApplicationType ApplicationType { get; set; }

        /// <summary>
        /// Gets or Sets ConsentMethod
        /// </summary>
        [DataMember(Name = "consent_method", EmitDefaultValue = true)]
        
        public OpenIdConnectApplicationConsentMethod ConsentMethod { get; set; }

        /// <summary>
        /// Gets or Sets IssuerMode
        /// </summary>
        [DataMember(Name = "issuer_mode", EmitDefaultValue = true)]
        
        public OpenIdConnectApplicationIssuerMode IssuerMode { get; set; }
        
        /// <summary>
        /// Gets or Sets ClientUri
        /// </summary>
        [DataMember(Name = "client_uri", EmitDefaultValue = true)]
        public string ClientUri { get; set; }

        /// <summary>
        /// Indicates that the client application uses Demonstrating Proof-of-Possession (DPoP) for token requests. If &#x60;true&#x60;, the authorization server rejects token requests from this client that don&#39;t contain the DPoP header.
        /// </summary>
        /// <value>Indicates that the client application uses Demonstrating Proof-of-Possession (DPoP) for token requests. If &#x60;true&#x60;, the authorization server rejects token requests from this client that don&#39;t contain the DPoP header.</value>
        [DataMember(Name = "dpop_bound_access_tokens", EmitDefaultValue = true)]
        public bool DpopBoundAccessTokens { get; set; }

        /// <summary>
        /// Include user session details.
        /// </summary>
        /// <value>Include user session details.</value>
        [DataMember(Name = "frontchannel_logout_session_required", EmitDefaultValue = true)]
        public bool FrontchannelLogoutSessionRequired { get; set; }

        /// <summary>
        /// URL where Okta sends the logout request.
        /// </summary>
        /// <value>URL where Okta sends the logout request.</value>
        [DataMember(Name = "frontchannel_logout_uri", EmitDefaultValue = true)]
        public string FrontchannelLogoutUri { get; set; }

        /// <summary>
        /// Gets or Sets GrantTypes
        /// </summary>
        [DataMember(Name = "grant_types", EmitDefaultValue = true)]
        public List<OAuthGrantType> GrantTypes { get; set; }

        /// <summary>
        /// Gets or Sets IdpInitiatedLogin
        /// </summary>
        [DataMember(Name = "idp_initiated_login", EmitDefaultValue = true)]
        public OpenIdConnectApplicationIdpInitiatedLogin IdpInitiatedLogin { get; set; }

        /// <summary>
        /// Gets or Sets InitiateLoginUri
        /// </summary>
        [DataMember(Name = "initiate_login_uri", EmitDefaultValue = true)]
        public string InitiateLoginUri { get; set; }

        /// <summary>
        /// Gets or Sets Jwks
        /// </summary>
        [DataMember(Name = "jwks", EmitDefaultValue = true)]
        public OpenIdConnectApplicationSettingsClientKeys Jwks { get; set; }

        /// <summary>
        /// URL string that references a JSON Web Key Set for validating JWTs presented to Okta.
        /// </summary>
        /// <value>URL string that references a JSON Web Key Set for validating JWTs presented to Okta.</value>
        [DataMember(Name = "jwks_uri", EmitDefaultValue = true)]
        public string JwksUri { get; set; }

        /// <summary>
        /// Gets or Sets LogoUri
        /// </summary>
        [DataMember(Name = "logo_uri", EmitDefaultValue = true)]
        public string LogoUri { get; set; }

        /// <summary>
        /// Allows the app to participate in front-channel single logout.
        /// </summary>
        /// <value>Allows the app to participate in front-channel single logout.</value>
        [DataMember(Name = "participate_slo", EmitDefaultValue = true)]
        public bool ParticipateSlo { get; set; }

        /// <summary>
        /// Gets or Sets PolicyUri
        /// </summary>
        [DataMember(Name = "policy_uri", EmitDefaultValue = true)]
        public string PolicyUri { get; set; }

        /// <summary>
        /// Gets or Sets PostLogoutRedirectUris
        /// </summary>
        [DataMember(Name = "post_logout_redirect_uris", EmitDefaultValue = true)]
        public List<string> PostLogoutRedirectUris { get; set; }

        /// <summary>
        /// Gets or Sets RedirectUris
        /// </summary>
        [DataMember(Name = "redirect_uris", EmitDefaultValue = true)]
        public List<string> RedirectUris { get; set; }

        /// <summary>
        /// Gets or Sets RefreshToken
        /// </summary>
        [DataMember(Name = "refresh_token", EmitDefaultValue = true)]
        public OpenIdConnectApplicationSettingsRefreshToken RefreshToken { get; set; }

        /// <summary>
        /// Gets or Sets ResponseTypes
        /// </summary>
        [DataMember(Name = "response_types", EmitDefaultValue = true)]
        public List<OAuthResponseType> ResponseTypes { get; set; }

        /// <summary>
        /// Gets or Sets TosUri
        /// </summary>
        [DataMember(Name = "tos_uri", EmitDefaultValue = true)]
        public string TosUri { get; set; }

        /// <summary>
        /// Gets or Sets WildcardRedirect
        /// </summary>
        [DataMember(Name = "wildcard_redirect", EmitDefaultValue = true)]
        public string WildcardRedirect { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenIdConnectApplicationSettingsClient {\n");
            sb.Append("  ApplicationType: ").Append(ApplicationType).Append("\n");
            sb.Append("  ClientUri: ").Append(ClientUri).Append("\n");
            sb.Append("  ConsentMethod: ").Append(ConsentMethod).Append("\n");
            sb.Append("  DpopBoundAccessTokens: ").Append(DpopBoundAccessTokens).Append("\n");
            sb.Append("  FrontchannelLogoutSessionRequired: ").Append(FrontchannelLogoutSessionRequired).Append("\n");
            sb.Append("  FrontchannelLogoutUri: ").Append(FrontchannelLogoutUri).Append("\n");
            sb.Append("  GrantTypes: ").Append(GrantTypes).Append("\n");
            sb.Append("  IdpInitiatedLogin: ").Append(IdpInitiatedLogin).Append("\n");
            sb.Append("  InitiateLoginUri: ").Append(InitiateLoginUri).Append("\n");
            sb.Append("  IssuerMode: ").Append(IssuerMode).Append("\n");
            sb.Append("  Jwks: ").Append(Jwks).Append("\n");
            sb.Append("  JwksUri: ").Append(JwksUri).Append("\n");
            sb.Append("  LogoUri: ").Append(LogoUri).Append("\n");
            sb.Append("  ParticipateSlo: ").Append(ParticipateSlo).Append("\n");
            sb.Append("  PolicyUri: ").Append(PolicyUri).Append("\n");
            sb.Append("  PostLogoutRedirectUris: ").Append(PostLogoutRedirectUris).Append("\n");
            sb.Append("  RedirectUris: ").Append(RedirectUris).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  ResponseTypes: ").Append(ResponseTypes).Append("\n");
            sb.Append("  TosUri: ").Append(TosUri).Append("\n");
            sb.Append("  WildcardRedirect: ").Append(WildcardRedirect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenIdConnectApplicationSettingsClient);
        }

        /// <summary>
        /// Returns true if OpenIdConnectApplicationSettingsClient instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenIdConnectApplicationSettingsClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenIdConnectApplicationSettingsClient input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplicationType == input.ApplicationType ||
                    this.ApplicationType.Equals(input.ApplicationType)
                ) && 
                (
                    this.ClientUri == input.ClientUri ||
                    (this.ClientUri != null &&
                    this.ClientUri.Equals(input.ClientUri))
                ) && 
                (
                    this.ConsentMethod == input.ConsentMethod ||
                    this.ConsentMethod.Equals(input.ConsentMethod)
                ) && 
                (
                    this.DpopBoundAccessTokens == input.DpopBoundAccessTokens ||
                    this.DpopBoundAccessTokens.Equals(input.DpopBoundAccessTokens)
                ) && 
                (
                    this.FrontchannelLogoutSessionRequired == input.FrontchannelLogoutSessionRequired ||
                    this.FrontchannelLogoutSessionRequired.Equals(input.FrontchannelLogoutSessionRequired)
                ) && 
                (
                    this.FrontchannelLogoutUri == input.FrontchannelLogoutUri ||
                    (this.FrontchannelLogoutUri != null &&
                    this.FrontchannelLogoutUri.Equals(input.FrontchannelLogoutUri))
                ) && 
                (
                    this.GrantTypes == input.GrantTypes ||
                    this.GrantTypes != null &&
                    input.GrantTypes != null &&
                    this.GrantTypes.SequenceEqual(input.GrantTypes)
                ) && 
                (
                    this.IdpInitiatedLogin == input.IdpInitiatedLogin ||
                    (this.IdpInitiatedLogin != null &&
                    this.IdpInitiatedLogin.Equals(input.IdpInitiatedLogin))
                ) && 
                (
                    this.InitiateLoginUri == input.InitiateLoginUri ||
                    (this.InitiateLoginUri != null &&
                    this.InitiateLoginUri.Equals(input.InitiateLoginUri))
                ) && 
                (
                    this.IssuerMode == input.IssuerMode ||
                    this.IssuerMode.Equals(input.IssuerMode)
                ) && 
                (
                    this.Jwks == input.Jwks ||
                    (this.Jwks != null &&
                    this.Jwks.Equals(input.Jwks))
                ) && 
                (
                    this.JwksUri == input.JwksUri ||
                    (this.JwksUri != null &&
                    this.JwksUri.Equals(input.JwksUri))
                ) && 
                (
                    this.LogoUri == input.LogoUri ||
                    (this.LogoUri != null &&
                    this.LogoUri.Equals(input.LogoUri))
                ) && 
                (
                    this.ParticipateSlo == input.ParticipateSlo ||
                    this.ParticipateSlo.Equals(input.ParticipateSlo)
                ) && 
                (
                    this.PolicyUri == input.PolicyUri ||
                    (this.PolicyUri != null &&
                    this.PolicyUri.Equals(input.PolicyUri))
                ) && 
                (
                    this.PostLogoutRedirectUris == input.PostLogoutRedirectUris ||
                    this.PostLogoutRedirectUris != null &&
                    input.PostLogoutRedirectUris != null &&
                    this.PostLogoutRedirectUris.SequenceEqual(input.PostLogoutRedirectUris)
                ) && 
                (
                    this.RedirectUris == input.RedirectUris ||
                    this.RedirectUris != null &&
                    input.RedirectUris != null &&
                    this.RedirectUris.SequenceEqual(input.RedirectUris)
                ) && 
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                ) && 
                (
                    this.ResponseTypes == input.ResponseTypes ||
                    this.ResponseTypes != null &&
                    input.ResponseTypes != null &&
                    this.ResponseTypes.SequenceEqual(input.ResponseTypes)
                ) && 
                (
                    this.TosUri == input.TosUri ||
                    (this.TosUri != null &&
                    this.TosUri.Equals(input.TosUri))
                ) && 
                (
                    this.WildcardRedirect == input.WildcardRedirect ||
                    (this.WildcardRedirect != null &&
                    this.WildcardRedirect.Equals(input.WildcardRedirect))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.ApplicationType != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationType.GetHashCode();
                }
                if (this.ClientUri != null)
                {
                    hashCode = (hashCode * 59) + this.ClientUri.GetHashCode();
                }
                if (this.ConsentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentMethod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DpopBoundAccessTokens.GetHashCode();
                hashCode = (hashCode * 59) + this.FrontchannelLogoutSessionRequired.GetHashCode();
                if (this.FrontchannelLogoutUri != null)
                {
                    hashCode = (hashCode * 59) + this.FrontchannelLogoutUri.GetHashCode();
                }
                if (this.GrantTypes != null)
                {
                    hashCode = (hashCode * 59) + this.GrantTypes.GetHashCode();
                }
                if (this.IdpInitiatedLogin != null)
                {
                    hashCode = (hashCode * 59) + this.IdpInitiatedLogin.GetHashCode();
                }
                if (this.InitiateLoginUri != null)
                {
                    hashCode = (hashCode * 59) + this.InitiateLoginUri.GetHashCode();
                }
                if (this.IssuerMode != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerMode.GetHashCode();
                }
                if (this.Jwks != null)
                {
                    hashCode = (hashCode * 59) + this.Jwks.GetHashCode();
                }
                if (this.JwksUri != null)
                {
                    hashCode = (hashCode * 59) + this.JwksUri.GetHashCode();
                }
                if (this.LogoUri != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUri.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ParticipateSlo.GetHashCode();
                if (this.PolicyUri != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyUri.GetHashCode();
                }
                if (this.PostLogoutRedirectUris != null)
                {
                    hashCode = (hashCode * 59) + this.PostLogoutRedirectUris.GetHashCode();
                }
                if (this.RedirectUris != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectUris.GetHashCode();
                }
                if (this.RefreshToken != null)
                {
                    hashCode = (hashCode * 59) + this.RefreshToken.GetHashCode();
                }
                if (this.ResponseTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseTypes.GetHashCode();
                }
                if (this.TosUri != null)
                {
                    hashCode = (hashCode * 59) + this.TosUri.GetHashCode();
                }
                if (this.WildcardRedirect != null)
                {
                    hashCode = (hashCode * 59) + this.WildcardRedirect.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
