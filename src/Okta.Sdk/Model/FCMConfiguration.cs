/*
 * Okta Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// FCMConfiguration
    /// </summary>
    [DataContract(Name = "FCMConfiguration")]
    
    public partial class FCMConfiguration : IEquatable<FCMConfiguration>
    {
        
        /// <summary>
        /// (Optional) File name for Admin Console display
        /// </summary>
        /// <value>(Optional) File name for Admin Console display</value>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Project ID of FCM configuration
        /// </summary>
        /// <value>Project ID of FCM configuration</value>
        [DataMember(Name = "projectId", EmitDefaultValue = false)]
        public string ProjectId { get; private set; }

        /// <summary>
        /// Returns false as ProjectId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProjectId()
        {
            return false;
        }
        /// <summary>
        /// JSON containing the private service account key and service account details. See [Creating and managing service account keys](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) for more information on creating service account keys in JSON.
        /// </summary>
        /// <value>JSON containing the private service account key and service account details. See [Creating and managing service account keys](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) for more information on creating service account keys in JSON.</value>
        [DataMember(Name = "serviceAccountJson", EmitDefaultValue = false)]
        public Object ServiceAccountJson { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FCMConfiguration {\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ServiceAccountJson: ").Append(ServiceAccountJson).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FCMConfiguration);
        }

        /// <summary>
        /// Returns true if FCMConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of FCMConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FCMConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.ServiceAccountJson == input.ServiceAccountJson ||
                    (this.ServiceAccountJson != null &&
                    this.ServiceAccountJson.Equals(input.ServiceAccountJson))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                if (this.ServiceAccountJson != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceAccountJson.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
