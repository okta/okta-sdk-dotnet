/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// Settings required for the Office 365 provisioning connection
    /// </summary>
    [DataContract(Name = "Office365ProvisioningSettings")]
    
    public partial class Office365ProvisioningSettings : IEquatable<Office365ProvisioningSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Office365ProvisioningSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Office365ProvisioningSettings() { }
        
        /// <summary>
        /// Office 365 global administrator user name
        /// </summary>
        /// <value>Office 365 global administrator user name</value>
        [DataMember(Name = "adminUsername", EmitDefaultValue = true)]
        public string AdminUsername { get; set; }

        /// <summary>
        /// Office 365 global administrator password
        /// </summary>
        /// <value>Office 365 global administrator password</value>
        [DataMember(Name = "adminPassword", EmitDefaultValue = true)]
        public string AdminPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Office365ProvisioningSettings {\n");
            sb.Append("  AdminUsername: ").Append(AdminUsername).Append("\n");
            sb.Append("  AdminPassword: ").Append(AdminPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Office365ProvisioningSettings);
        }

        /// <summary>
        /// Returns true if Office365ProvisioningSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of Office365ProvisioningSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Office365ProvisioningSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdminUsername == input.AdminUsername ||
                    (this.AdminUsername != null &&
                    this.AdminUsername.Equals(input.AdminUsername))
                ) && 
                (
                    this.AdminPassword == input.AdminPassword ||
                    (this.AdminPassword != null &&
                    this.AdminPassword.Equals(input.AdminPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.AdminUsername != null)
                {
                    hashCode = (hashCode * 59) + this.AdminUsername.GetHashCode();
                }
                if (this.AdminPassword != null)
                {
                    hashCode = (hashCode * 59) + this.AdminPassword.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
