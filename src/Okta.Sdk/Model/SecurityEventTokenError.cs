/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// Error object thrown when parsing the Security Event Token
    /// </summary>
    [DataContract(Name = "SecurityEventTokenError")]
    
    public partial class SecurityEventTokenError : IEquatable<SecurityEventTokenError>
    {
        /// <summary>
        /// A code that describes the category of the error
        /// </summary>
        /// <value>A code that describes the category of the error</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class ErrEnum : StringEnum
        {
            /// <summary>
            /// StringEnum AuthenticationFailed for value: authentication_failed
            /// </summary>
            
            public static ErrEnum AuthenticationFailed = new ErrEnum("authentication_failed");

            /// <summary>
            /// StringEnum InvalidAudience for value: invalid_audience
            /// </summary>
            
            public static ErrEnum InvalidAudience = new ErrEnum("invalid_audience");

            /// <summary>
            /// StringEnum InvalidIssuer for value: invalid_issuer
            /// </summary>
            
            public static ErrEnum InvalidIssuer = new ErrEnum("invalid_issuer");

            /// <summary>
            /// StringEnum InvalidKey for value: invalid_key
            /// </summary>
            
            public static ErrEnum InvalidKey = new ErrEnum("invalid_key");

            /// <summary>
            /// StringEnum InvalidRequest for value: invalid_request
            /// </summary>
            
            public static ErrEnum InvalidRequest = new ErrEnum("invalid_request");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="ErrEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator ErrEnum(string value) => new ErrEnum(value);

            /// <summary>
            /// Creates a new <see cref="Err"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public ErrEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// A code that describes the category of the error
        /// </summary>
        /// <value>A code that describes the category of the error</value>
        [DataMember(Name = "err", EmitDefaultValue = true)]
        
        public ErrEnum Err { get; set; }
        
        /// <summary>
        /// Describes the error &gt; **Note:** SET claim fields with underscores (snake case) are presented in camelcase. For example, &#x60;previous_status&#x60; appears as &#x60;previousStatus&#x60;. 
        /// </summary>
        /// <value>Describes the error &gt; **Note:** SET claim fields with underscores (snake case) are presented in camelcase. For example, &#x60;previous_status&#x60; appears as &#x60;previousStatus&#x60;. </value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityEventTokenError {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Err: ").Append(Err).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityEventTokenError);
        }

        /// <summary>
        /// Returns true if SecurityEventTokenError instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityEventTokenError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityEventTokenError input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Err == input.Err ||
                    this.Err.Equals(input.Err)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Err != null)
                {
                    hashCode = (hashCode * 59) + this.Err.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
