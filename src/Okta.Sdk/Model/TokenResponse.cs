/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// TokenResponse
    /// </summary>
    [DataContract(Name = "TokenResponse")]
    
    public partial class TokenResponse : IEquatable<TokenResponse>
    {

        /// <summary>
        /// Gets or Sets IssuedTokenType
        /// </summary>
        [DataMember(Name = "issued_token_type", EmitDefaultValue = true)]
        
        public TokenType IssuedTokenType { get; set; }

        /// <summary>
        /// Gets or Sets TokenType
        /// </summary>
        [DataMember(Name = "token_type", EmitDefaultValue = true)]
        
        public TokenResponseTokenType TokenType { get; set; }
        
        /// <summary>
        /// An access token.
        /// </summary>
        /// <value>An access token.</value>
        [DataMember(Name = "access_token", EmitDefaultValue = true)]
        public string AccessToken { get; set; }

        /// <summary>
        /// An opaque device secret. This is returned if the &#x60;device_sso&#x60; scope is granted.
        /// </summary>
        /// <value>An opaque device secret. This is returned if the &#x60;device_sso&#x60; scope is granted.</value>
        [DataMember(Name = "device_secret", EmitDefaultValue = true)]
        public string DeviceSecret { get; set; }

        /// <summary>
        /// The expiration time of the access token in seconds.
        /// </summary>
        /// <value>The expiration time of the access token in seconds.</value>
        [DataMember(Name = "expires_in", EmitDefaultValue = true)]
        public int ExpiresIn { get; set; }

        /// <summary>
        /// An ID token. This is returned if the &#x60;openid&#x60; scope is granted.
        /// </summary>
        /// <value>An ID token. This is returned if the &#x60;openid&#x60; scope is granted.</value>
        [DataMember(Name = "id_token", EmitDefaultValue = true)]
        public string IdToken { get; set; }

        /// <summary>
        /// An opaque refresh token. This is returned if the &#x60;offline_access&#x60; scope is granted.
        /// </summary>
        /// <value>An opaque refresh token. This is returned if the &#x60;offline_access&#x60; scope is granted.</value>
        [DataMember(Name = "refresh_token", EmitDefaultValue = true)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// The scopes contained in the access token.
        /// </summary>
        /// <value>The scopes contained in the access token.</value>
        [DataMember(Name = "scope", EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenResponse {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  DeviceSecret: ").Append(DeviceSecret).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  IdToken: ").Append(IdToken).Append("\n");
            sb.Append("  IssuedTokenType: ").Append(IssuedTokenType).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenResponse);
        }

        /// <summary>
        /// Returns true if TokenResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.DeviceSecret == input.DeviceSecret ||
                    (this.DeviceSecret != null &&
                    this.DeviceSecret.Equals(input.DeviceSecret))
                ) && 
                (
                    this.ExpiresIn == input.ExpiresIn ||
                    this.ExpiresIn.Equals(input.ExpiresIn)
                ) && 
                (
                    this.IdToken == input.IdToken ||
                    (this.IdToken != null &&
                    this.IdToken.Equals(input.IdToken))
                ) && 
                (
                    this.IssuedTokenType == input.IssuedTokenType ||
                    this.IssuedTokenType.Equals(input.IssuedTokenType)
                ) && 
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.TokenType == input.TokenType ||
                    this.TokenType.Equals(input.TokenType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.AccessToken != null)
                {
                    hashCode = (hashCode * 59) + this.AccessToken.GetHashCode();
                }
                if (this.DeviceSecret != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceSecret.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpiresIn.GetHashCode();
                if (this.IdToken != null)
                {
                    hashCode = (hashCode * 59) + this.IdToken.GetHashCode();
                }
                if (this.IssuedTokenType != null)
                {
                    hashCode = (hashCode * 59) + this.IssuedTokenType.GetHashCode();
                }
                if (this.RefreshToken != null)
                {
                    hashCode = (hashCode * 59) + this.RefreshToken.GetHashCode();
                }
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.TokenType != null)
                {
                    hashCode = (hashCode * 59) + this.TokenType.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
