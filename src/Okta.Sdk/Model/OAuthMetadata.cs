/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// OAuthMetadata
    /// </summary>
    [DataContract(Name = "OAuthMetadata")]
    
    public partial class OAuthMetadata : IEquatable<OAuthMetadata>
    {
        /// <summary>
        /// Defines DpopSigningAlgValuesSupported
        /// </summary>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class DpopSigningAlgValuesSupportedEnum : StringEnum
        {
            /// <summary>
            /// StringEnum ES256 for value: ES256
            /// </summary>
            
            public static DpopSigningAlgValuesSupportedEnum ES256 = new DpopSigningAlgValuesSupportedEnum("ES256");

            /// <summary>
            /// StringEnum ES384 for value: ES384
            /// </summary>
            
            public static DpopSigningAlgValuesSupportedEnum ES384 = new DpopSigningAlgValuesSupportedEnum("ES384");

            /// <summary>
            /// StringEnum ES512 for value: ES512
            /// </summary>
            
            public static DpopSigningAlgValuesSupportedEnum ES512 = new DpopSigningAlgValuesSupportedEnum("ES512");

            /// <summary>
            /// StringEnum RS256 for value: RS256
            /// </summary>
            
            public static DpopSigningAlgValuesSupportedEnum RS256 = new DpopSigningAlgValuesSupportedEnum("RS256");

            /// <summary>
            /// StringEnum RS384 for value: RS384
            /// </summary>
            
            public static DpopSigningAlgValuesSupportedEnum RS384 = new DpopSigningAlgValuesSupportedEnum("RS384");

            /// <summary>
            /// StringEnum RS512 for value: RS512
            /// </summary>
            
            public static DpopSigningAlgValuesSupportedEnum RS512 = new DpopSigningAlgValuesSupportedEnum("RS512");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="DpopSigningAlgValuesSupportedEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator DpopSigningAlgValuesSupportedEnum(string value) => new DpopSigningAlgValuesSupportedEnum(value);

            /// <summary>
            /// Creates a new <see cref="DpopSigningAlgValuesSupported"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public DpopSigningAlgValuesSupportedEnum(string value)
                : base(value)
            {
            }
        }



        /// <summary>
        /// A list of signing algorithms supported by this authorization server for Demonstrating Proof-of-Possession (DPoP) JWTs.
        /// </summary>
        /// <value>A list of signing algorithms supported by this authorization server for Demonstrating Proof-of-Possession (DPoP) JWTs.</value>
        [DataMember(Name = "dpop_signing_alg_values_supported", EmitDefaultValue = true)]
        
        public List<DpopSigningAlgValuesSupportedEnum> DpopSigningAlgValuesSupported { get; set; }
        
        /// <summary>
        /// URL of the authorization server&#39;s authorization endpoint.
        /// </summary>
        /// <value>URL of the authorization server&#39;s authorization endpoint.</value>
        [DataMember(Name = "authorization_endpoint", EmitDefaultValue = true)]
        public string AuthorizationEndpoint { get; set; }

        /// <summary>
        /// &lt;div class&#x3D;\&quot;x-lifecycle-container\&quot;&gt;&lt;x-lifecycle class&#x3D;\&quot;lea\&quot;&gt;&lt;/x-lifecycle&gt; &lt;x-lifecycle class&#x3D;\&quot;oie\&quot;&gt;&lt;/x-lifecycle&gt;&lt;/div&gt;A list of signing algorithms that this authorization server supports for signed requests.
        /// </summary>
        /// <value>&lt;div class&#x3D;\&quot;x-lifecycle-container\&quot;&gt;&lt;x-lifecycle class&#x3D;\&quot;lea\&quot;&gt;&lt;/x-lifecycle&gt; &lt;x-lifecycle class&#x3D;\&quot;oie\&quot;&gt;&lt;/x-lifecycle&gt;&lt;/div&gt;A list of signing algorithms that this authorization server supports for signed requests.</value>
        [DataMember(Name = "backchannel_authentication_request_signing_alg_values_supported", EmitDefaultValue = true)]
        public List<SigningAlgorithm> BackchannelAuthenticationRequestSigningAlgValuesSupported { get; set; }

        /// <summary>
        /// &lt;div class&#x3D;\&quot;x-lifecycle-container\&quot;&gt;&lt;x-lifecycle class&#x3D;\&quot;lea\&quot;&gt;&lt;/x-lifecycle&gt; &lt;x-lifecycle class&#x3D;\&quot;oie\&quot;&gt;&lt;/x-lifecycle&gt;&lt;/div&gt;The delivery modes that this authorization server supports for Client-Initiated Backchannel Authentication.
        /// </summary>
        /// <value>&lt;div class&#x3D;\&quot;x-lifecycle-container\&quot;&gt;&lt;x-lifecycle class&#x3D;\&quot;lea\&quot;&gt;&lt;/x-lifecycle&gt; &lt;x-lifecycle class&#x3D;\&quot;oie\&quot;&gt;&lt;/x-lifecycle&gt;&lt;/div&gt;The delivery modes that this authorization server supports for Client-Initiated Backchannel Authentication.</value>
        [DataMember(Name = "backchannel_token_delivery_modes_supported", EmitDefaultValue = true)]
        public List<TokenDeliveryMode> BackchannelTokenDeliveryModesSupported { get; set; }

        /// <summary>
        /// A list of the claims supported by this authorization server.
        /// </summary>
        /// <value>A list of the claims supported by this authorization server.</value>
        [DataMember(Name = "claims_supported", EmitDefaultValue = true)]
        public List<string> ClaimsSupported { get; set; }

        /// <summary>
        /// A list of PKCE code challenge methods supported by this authorization server.
        /// </summary>
        /// <value>A list of PKCE code challenge methods supported by this authorization server.</value>
        [DataMember(Name = "code_challenge_methods_supported", EmitDefaultValue = true)]
        public List<CodeChallengeMethod> CodeChallengeMethodsSupported { get; set; }

        /// <summary>
        /// Gets or Sets DeviceAuthorizationEndpoint
        /// </summary>
        [DataMember(Name = "device_authorization_endpoint", EmitDefaultValue = true)]
        public string DeviceAuthorizationEndpoint { get; set; }

        /// <summary>
        /// URL of the authorization server&#39;s logout endpoint.
        /// </summary>
        /// <value>URL of the authorization server&#39;s logout endpoint.</value>
        [DataMember(Name = "end_session_endpoint", EmitDefaultValue = true)]
        public string EndSessionEndpoint { get; set; }

        /// <summary>
        /// A list of the grant type values that this authorization server supports.
        /// </summary>
        /// <value>A list of the grant type values that this authorization server supports.</value>
        [DataMember(Name = "grant_types_supported", EmitDefaultValue = true)]
        public List<GrantType> GrantTypesSupported { get; set; }

        /// <summary>
        /// URL of the authorization server&#39;s introspection endpoint.
        /// </summary>
        /// <value>URL of the authorization server&#39;s introspection endpoint.</value>
        [DataMember(Name = "introspection_endpoint", EmitDefaultValue = true)]
        public string IntrospectionEndpoint { get; set; }

        /// <summary>
        /// A list of client authentication methods supported by this introspection endpoint.
        /// </summary>
        /// <value>A list of client authentication methods supported by this introspection endpoint.</value>
        [DataMember(Name = "introspection_endpoint_auth_methods_supported", EmitDefaultValue = true)]
        public List<EndpointAuthMethod> IntrospectionEndpointAuthMethodsSupported { get; set; }

        /// <summary>
        /// The authorization server&#39;s issuer identifier. In the context of this document, this is your authorization server&#39;s base URL. This becomes the &#x60;iss&#x60; claim in an access token.
        /// </summary>
        /// <value>The authorization server&#39;s issuer identifier. In the context of this document, this is your authorization server&#39;s base URL. This becomes the &#x60;iss&#x60; claim in an access token.</value>
        [DataMember(Name = "issuer", EmitDefaultValue = true)]
        public string Issuer { get; set; }

        /// <summary>
        /// URL of the authorization server&#39;s JSON Web Key Set document.
        /// </summary>
        /// <value>URL of the authorization server&#39;s JSON Web Key Set document.</value>
        [DataMember(Name = "jwks_uri", EmitDefaultValue = true)]
        public string JwksUri { get; set; }

        /// <summary>
        /// Gets or Sets PushedAuthorizationRequestEndpoint
        /// </summary>
        [DataMember(Name = "pushed_authorization_request_endpoint", EmitDefaultValue = true)]
        public string PushedAuthorizationRequestEndpoint { get; set; }

        /// <summary>
        /// URL of the authorization server&#39;s JSON Web Key Set document.
        /// </summary>
        /// <value>URL of the authorization server&#39;s JSON Web Key Set document.</value>
        [DataMember(Name = "registration_endpoint", EmitDefaultValue = true)]
        public string RegistrationEndpoint { get; set; }

        /// <summary>
        /// A list of signing algorithms that this authorization server supports for signed requests.
        /// </summary>
        /// <value>A list of signing algorithms that this authorization server supports for signed requests.</value>
        [DataMember(Name = "request_object_signing_alg_values_supported", EmitDefaultValue = true)]
        public List<SigningAlgorithm> RequestObjectSigningAlgValuesSupported { get; set; }

        /// <summary>
        /// Indicates if Request Parameters are supported by this authorization server.
        /// </summary>
        /// <value>Indicates if Request Parameters are supported by this authorization server.</value>
        [DataMember(Name = "request_parameter_supported", EmitDefaultValue = true)]
        public bool RequestParameterSupported { get; set; }

        /// <summary>
        /// A list of the &#x60;response_mode&#x60; values that this authorization server supports. More information here.
        /// </summary>
        /// <value>A list of the &#x60;response_mode&#x60; values that this authorization server supports. More information here.</value>
        [DataMember(Name = "response_modes_supported", EmitDefaultValue = true)]
        public List<ResponseMode> ResponseModesSupported { get; set; }

        /// <summary>
        /// A list of the &#x60;response_type&#x60; values that this authorization server supports. Can be a combination of &#x60;code&#x60;, &#x60;token&#x60;, and &#x60;id_token&#x60;.
        /// </summary>
        /// <value>A list of the &#x60;response_type&#x60; values that this authorization server supports. Can be a combination of &#x60;code&#x60;, &#x60;token&#x60;, and &#x60;id_token&#x60;.</value>
        [DataMember(Name = "response_types_supported", EmitDefaultValue = true)]
        public List<ResponseTypesSupported> ResponseTypesSupported { get; set; }

        /// <summary>
        /// URL of the authorization server&#39;s revocation endpoint.
        /// </summary>
        /// <value>URL of the authorization server&#39;s revocation endpoint.</value>
        [DataMember(Name = "revocation_endpoint", EmitDefaultValue = true)]
        public string RevocationEndpoint { get; set; }

        /// <summary>
        /// A list of client authentication methods supported by this revocation endpoint.
        /// </summary>
        /// <value>A list of client authentication methods supported by this revocation endpoint.</value>
        [DataMember(Name = "revocation_endpoint_auth_methods_supported", EmitDefaultValue = true)]
        public List<EndpointAuthMethod> RevocationEndpointAuthMethodsSupported { get; set; }

        /// <summary>
        /// A list of the scope values that this authorization server supports.
        /// </summary>
        /// <value>A list of the scope values that this authorization server supports.</value>
        [DataMember(Name = "scopes_supported", EmitDefaultValue = true)]
        public List<string> ScopesSupported { get; set; }

        /// <summary>
        /// A list of the Subject Identifier types that this authorization server supports. Valid types include &#x60;pairwise&#x60; and &#x60;public&#x60;, but only &#x60;public&#x60; is currently supported. See the [Subject Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes) section in the OpenID Connect specification.
        /// </summary>
        /// <value>A list of the Subject Identifier types that this authorization server supports. Valid types include &#x60;pairwise&#x60; and &#x60;public&#x60;, but only &#x60;public&#x60; is currently supported. See the [Subject Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes) section in the OpenID Connect specification.</value>
        [DataMember(Name = "subject_types_supported", EmitDefaultValue = true)]
        public List<SubjectType> SubjectTypesSupported { get; set; }

        /// <summary>
        /// URL of the authorization server&#39;s token endpoint.
        /// </summary>
        /// <value>URL of the authorization server&#39;s token endpoint.</value>
        [DataMember(Name = "token_endpoint", EmitDefaultValue = true)]
        public string TokenEndpoint { get; set; }

        /// <summary>
        /// A list of client authentication methods supported by this token endpoint.
        /// </summary>
        /// <value>A list of client authentication methods supported by this token endpoint.</value>
        [DataMember(Name = "token_endpoint_auth_methods_supported", EmitDefaultValue = true)]
        public List<EndpointAuthMethod> TokenEndpointAuthMethodsSupported { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OAuthMetadata {\n");
            sb.Append("  AuthorizationEndpoint: ").Append(AuthorizationEndpoint).Append("\n");
            sb.Append("  BackchannelAuthenticationRequestSigningAlgValuesSupported: ").Append(BackchannelAuthenticationRequestSigningAlgValuesSupported).Append("\n");
            sb.Append("  BackchannelTokenDeliveryModesSupported: ").Append(BackchannelTokenDeliveryModesSupported).Append("\n");
            sb.Append("  ClaimsSupported: ").Append(ClaimsSupported).Append("\n");
            sb.Append("  CodeChallengeMethodsSupported: ").Append(CodeChallengeMethodsSupported).Append("\n");
            sb.Append("  DeviceAuthorizationEndpoint: ").Append(DeviceAuthorizationEndpoint).Append("\n");
            sb.Append("  DpopSigningAlgValuesSupported: ").Append(DpopSigningAlgValuesSupported).Append("\n");
            sb.Append("  EndSessionEndpoint: ").Append(EndSessionEndpoint).Append("\n");
            sb.Append("  GrantTypesSupported: ").Append(GrantTypesSupported).Append("\n");
            sb.Append("  IntrospectionEndpoint: ").Append(IntrospectionEndpoint).Append("\n");
            sb.Append("  IntrospectionEndpointAuthMethodsSupported: ").Append(IntrospectionEndpointAuthMethodsSupported).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  JwksUri: ").Append(JwksUri).Append("\n");
            sb.Append("  PushedAuthorizationRequestEndpoint: ").Append(PushedAuthorizationRequestEndpoint).Append("\n");
            sb.Append("  RegistrationEndpoint: ").Append(RegistrationEndpoint).Append("\n");
            sb.Append("  RequestObjectSigningAlgValuesSupported: ").Append(RequestObjectSigningAlgValuesSupported).Append("\n");
            sb.Append("  RequestParameterSupported: ").Append(RequestParameterSupported).Append("\n");
            sb.Append("  ResponseModesSupported: ").Append(ResponseModesSupported).Append("\n");
            sb.Append("  ResponseTypesSupported: ").Append(ResponseTypesSupported).Append("\n");
            sb.Append("  RevocationEndpoint: ").Append(RevocationEndpoint).Append("\n");
            sb.Append("  RevocationEndpointAuthMethodsSupported: ").Append(RevocationEndpointAuthMethodsSupported).Append("\n");
            sb.Append("  ScopesSupported: ").Append(ScopesSupported).Append("\n");
            sb.Append("  SubjectTypesSupported: ").Append(SubjectTypesSupported).Append("\n");
            sb.Append("  TokenEndpoint: ").Append(TokenEndpoint).Append("\n");
            sb.Append("  TokenEndpointAuthMethodsSupported: ").Append(TokenEndpointAuthMethodsSupported).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OAuthMetadata);
        }

        /// <summary>
        /// Returns true if OAuthMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of OAuthMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OAuthMetadata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthorizationEndpoint == input.AuthorizationEndpoint ||
                    (this.AuthorizationEndpoint != null &&
                    this.AuthorizationEndpoint.Equals(input.AuthorizationEndpoint))
                ) && 
                (
                    this.BackchannelAuthenticationRequestSigningAlgValuesSupported == input.BackchannelAuthenticationRequestSigningAlgValuesSupported ||
                    this.BackchannelAuthenticationRequestSigningAlgValuesSupported != null &&
                    input.BackchannelAuthenticationRequestSigningAlgValuesSupported != null &&
                    this.BackchannelAuthenticationRequestSigningAlgValuesSupported.SequenceEqual(input.BackchannelAuthenticationRequestSigningAlgValuesSupported)
                ) && 
                (
                    this.BackchannelTokenDeliveryModesSupported == input.BackchannelTokenDeliveryModesSupported ||
                    this.BackchannelTokenDeliveryModesSupported != null &&
                    input.BackchannelTokenDeliveryModesSupported != null &&
                    this.BackchannelTokenDeliveryModesSupported.SequenceEqual(input.BackchannelTokenDeliveryModesSupported)
                ) && 
                (
                    this.ClaimsSupported == input.ClaimsSupported ||
                    this.ClaimsSupported != null &&
                    input.ClaimsSupported != null &&
                    this.ClaimsSupported.SequenceEqual(input.ClaimsSupported)
                ) && 
                (
                    this.CodeChallengeMethodsSupported == input.CodeChallengeMethodsSupported ||
                    this.CodeChallengeMethodsSupported != null &&
                    input.CodeChallengeMethodsSupported != null &&
                    this.CodeChallengeMethodsSupported.SequenceEqual(input.CodeChallengeMethodsSupported)
                ) && 
                (
                    this.DeviceAuthorizationEndpoint == input.DeviceAuthorizationEndpoint ||
                    (this.DeviceAuthorizationEndpoint != null &&
                    this.DeviceAuthorizationEndpoint.Equals(input.DeviceAuthorizationEndpoint))
                ) && 
                (
                    this.DpopSigningAlgValuesSupported == input.DpopSigningAlgValuesSupported ||
                    this.DpopSigningAlgValuesSupported.SequenceEqual(input.DpopSigningAlgValuesSupported)
                ) && 
                (
                    this.EndSessionEndpoint == input.EndSessionEndpoint ||
                    (this.EndSessionEndpoint != null &&
                    this.EndSessionEndpoint.Equals(input.EndSessionEndpoint))
                ) && 
                (
                    this.GrantTypesSupported == input.GrantTypesSupported ||
                    this.GrantTypesSupported != null &&
                    input.GrantTypesSupported != null &&
                    this.GrantTypesSupported.SequenceEqual(input.GrantTypesSupported)
                ) && 
                (
                    this.IntrospectionEndpoint == input.IntrospectionEndpoint ||
                    (this.IntrospectionEndpoint != null &&
                    this.IntrospectionEndpoint.Equals(input.IntrospectionEndpoint))
                ) && 
                (
                    this.IntrospectionEndpointAuthMethodsSupported == input.IntrospectionEndpointAuthMethodsSupported ||
                    this.IntrospectionEndpointAuthMethodsSupported != null &&
                    input.IntrospectionEndpointAuthMethodsSupported != null &&
                    this.IntrospectionEndpointAuthMethodsSupported.SequenceEqual(input.IntrospectionEndpointAuthMethodsSupported)
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.JwksUri == input.JwksUri ||
                    (this.JwksUri != null &&
                    this.JwksUri.Equals(input.JwksUri))
                ) && 
                (
                    this.PushedAuthorizationRequestEndpoint == input.PushedAuthorizationRequestEndpoint ||
                    (this.PushedAuthorizationRequestEndpoint != null &&
                    this.PushedAuthorizationRequestEndpoint.Equals(input.PushedAuthorizationRequestEndpoint))
                ) && 
                (
                    this.RegistrationEndpoint == input.RegistrationEndpoint ||
                    (this.RegistrationEndpoint != null &&
                    this.RegistrationEndpoint.Equals(input.RegistrationEndpoint))
                ) && 
                (
                    this.RequestObjectSigningAlgValuesSupported == input.RequestObjectSigningAlgValuesSupported ||
                    this.RequestObjectSigningAlgValuesSupported != null &&
                    input.RequestObjectSigningAlgValuesSupported != null &&
                    this.RequestObjectSigningAlgValuesSupported.SequenceEqual(input.RequestObjectSigningAlgValuesSupported)
                ) && 
                (
                    this.RequestParameterSupported == input.RequestParameterSupported ||
                    this.RequestParameterSupported.Equals(input.RequestParameterSupported)
                ) && 
                (
                    this.ResponseModesSupported == input.ResponseModesSupported ||
                    this.ResponseModesSupported != null &&
                    input.ResponseModesSupported != null &&
                    this.ResponseModesSupported.SequenceEqual(input.ResponseModesSupported)
                ) && 
                (
                    this.ResponseTypesSupported == input.ResponseTypesSupported ||
                    this.ResponseTypesSupported != null &&
                    input.ResponseTypesSupported != null &&
                    this.ResponseTypesSupported.SequenceEqual(input.ResponseTypesSupported)
                ) && 
                (
                    this.RevocationEndpoint == input.RevocationEndpoint ||
                    (this.RevocationEndpoint != null &&
                    this.RevocationEndpoint.Equals(input.RevocationEndpoint))
                ) && 
                (
                    this.RevocationEndpointAuthMethodsSupported == input.RevocationEndpointAuthMethodsSupported ||
                    this.RevocationEndpointAuthMethodsSupported != null &&
                    input.RevocationEndpointAuthMethodsSupported != null &&
                    this.RevocationEndpointAuthMethodsSupported.SequenceEqual(input.RevocationEndpointAuthMethodsSupported)
                ) && 
                (
                    this.ScopesSupported == input.ScopesSupported ||
                    this.ScopesSupported != null &&
                    input.ScopesSupported != null &&
                    this.ScopesSupported.SequenceEqual(input.ScopesSupported)
                ) && 
                (
                    this.SubjectTypesSupported == input.SubjectTypesSupported ||
                    this.SubjectTypesSupported != null &&
                    input.SubjectTypesSupported != null &&
                    this.SubjectTypesSupported.SequenceEqual(input.SubjectTypesSupported)
                ) && 
                (
                    this.TokenEndpoint == input.TokenEndpoint ||
                    (this.TokenEndpoint != null &&
                    this.TokenEndpoint.Equals(input.TokenEndpoint))
                ) && 
                (
                    this.TokenEndpointAuthMethodsSupported == input.TokenEndpointAuthMethodsSupported ||
                    this.TokenEndpointAuthMethodsSupported != null &&
                    input.TokenEndpointAuthMethodsSupported != null &&
                    this.TokenEndpointAuthMethodsSupported.SequenceEqual(input.TokenEndpointAuthMethodsSupported)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.AuthorizationEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizationEndpoint.GetHashCode();
                }
                if (this.BackchannelAuthenticationRequestSigningAlgValuesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.BackchannelAuthenticationRequestSigningAlgValuesSupported.GetHashCode();
                }
                if (this.BackchannelTokenDeliveryModesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.BackchannelTokenDeliveryModesSupported.GetHashCode();
                }
                if (this.ClaimsSupported != null)
                {
                    hashCode = (hashCode * 59) + this.ClaimsSupported.GetHashCode();
                }
                if (this.CodeChallengeMethodsSupported != null)
                {
                    hashCode = (hashCode * 59) + this.CodeChallengeMethodsSupported.GetHashCode();
                }
                if (this.DeviceAuthorizationEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceAuthorizationEndpoint.GetHashCode();
                }
                if (this.DpopSigningAlgValuesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.DpopSigningAlgValuesSupported.GetHashCode();
                }
                if (this.EndSessionEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.EndSessionEndpoint.GetHashCode();
                }
                if (this.GrantTypesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.GrantTypesSupported.GetHashCode();
                }
                if (this.IntrospectionEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.IntrospectionEndpoint.GetHashCode();
                }
                if (this.IntrospectionEndpointAuthMethodsSupported != null)
                {
                    hashCode = (hashCode * 59) + this.IntrospectionEndpointAuthMethodsSupported.GetHashCode();
                }
                if (this.Issuer != null)
                {
                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
                }
                if (this.JwksUri != null)
                {
                    hashCode = (hashCode * 59) + this.JwksUri.GetHashCode();
                }
                if (this.PushedAuthorizationRequestEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.PushedAuthorizationRequestEndpoint.GetHashCode();
                }
                if (this.RegistrationEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationEndpoint.GetHashCode();
                }
                if (this.RequestObjectSigningAlgValuesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.RequestObjectSigningAlgValuesSupported.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequestParameterSupported.GetHashCode();
                if (this.ResponseModesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseModesSupported.GetHashCode();
                }
                if (this.ResponseTypesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseTypesSupported.GetHashCode();
                }
                if (this.RevocationEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.RevocationEndpoint.GetHashCode();
                }
                if (this.RevocationEndpointAuthMethodsSupported != null)
                {
                    hashCode = (hashCode * 59) + this.RevocationEndpointAuthMethodsSupported.GetHashCode();
                }
                if (this.ScopesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.ScopesSupported.GetHashCode();
                }
                if (this.SubjectTypesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectTypesSupported.GetHashCode();
                }
                if (this.TokenEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.TokenEndpoint.GetHashCode();
                }
                if (this.TokenEndpointAuthMethodsSupported != null)
                {
                    hashCode = (hashCode * 59) + this.TokenEndpointAuthMethodsSupported.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
