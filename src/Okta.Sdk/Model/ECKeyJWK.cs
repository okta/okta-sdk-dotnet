/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// Elliptic Curve Key in JWK format, currently used during enrollment to encrypt fulfillment requests to Yubico, or during activation to verify Yubico&#39;s JWS objects in fulfillment responses. The currently agreed protocol uses P-384.
    /// </summary>
    [DataContract(Name = "ECKeyJWK")]
    
    public partial class ECKeyJWK : IEquatable<ECKeyJWK>
    {
        /// <summary>
        /// Defines Crv
        /// </summary>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class CrvEnum : StringEnum
        {
            /// <summary>
            /// StringEnum P384 for value: P-384
            /// </summary>
            
            public static CrvEnum P384 = new CrvEnum("P-384");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="CrvEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator CrvEnum(string value) => new CrvEnum(value);

            /// <summary>
            /// Creates a new <see cref="Crv"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public CrvEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// Gets or Sets Crv
        /// </summary>
        [DataMember(Name = "crv", EmitDefaultValue = true)]
        
        public CrvEnum Crv { get; set; }
        /// <summary>
        /// The type of public key
        /// </summary>
        /// <value>The type of public key</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class KtyEnum : StringEnum
        {
            /// <summary>
            /// StringEnum EC for value: EC
            /// </summary>
            
            public static KtyEnum EC = new KtyEnum("EC");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="KtyEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator KtyEnum(string value) => new KtyEnum(value);

            /// <summary>
            /// Creates a new <see cref="Kty"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public KtyEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// The type of public key
        /// </summary>
        /// <value>The type of public key</value>
        [DataMember(Name = "kty", EmitDefaultValue = true)]
        
        public KtyEnum Kty { get; set; }
        /// <summary>
        /// The intended use for the key. The ECKeyJWK is always &#x60;enc&#x60; because Okta uses it to encrypt requests to Yubico.
        /// </summary>
        /// <value>The intended use for the key. The ECKeyJWK is always &#x60;enc&#x60; because Okta uses it to encrypt requests to Yubico.</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class UseEnum : StringEnum
        {
            /// <summary>
            /// StringEnum Enc for value: enc
            /// </summary>
            
            public static UseEnum Enc = new UseEnum("enc");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="UseEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator UseEnum(string value) => new UseEnum(value);

            /// <summary>
            /// Creates a new <see cref="Use"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public UseEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// The intended use for the key. The ECKeyJWK is always &#x60;enc&#x60; because Okta uses it to encrypt requests to Yubico.
        /// </summary>
        /// <value>The intended use for the key. The ECKeyJWK is always &#x60;enc&#x60; because Okta uses it to encrypt requests to Yubico.</value>
        [DataMember(Name = "use", EmitDefaultValue = true)]
        
        public UseEnum Use { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ECKeyJWK" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ECKeyJWK() { }
        
        /// <summary>
        /// The unique identifier of the key
        /// </summary>
        /// <value>The unique identifier of the key</value>
        [DataMember(Name = "kid", EmitDefaultValue = true)]
        public string Kid { get; set; }

        /// <summary>
        /// The public x coordinate for the elliptic curve point
        /// </summary>
        /// <value>The public x coordinate for the elliptic curve point</value>
        [DataMember(Name = "x", EmitDefaultValue = true)]
        public string X { get; set; }

        /// <summary>
        /// The public y coordinate for the elliptic curve point
        /// </summary>
        /// <value>The public y coordinate for the elliptic curve point</value>
        [DataMember(Name = "y", EmitDefaultValue = true)]
        public string Y { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ECKeyJWK {\n");
            sb.Append("  Crv: ").Append(Crv).Append("\n");
            sb.Append("  Kid: ").Append(Kid).Append("\n");
            sb.Append("  Kty: ").Append(Kty).Append("\n");
            sb.Append("  Use: ").Append(Use).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ECKeyJWK);
        }

        /// <summary>
        /// Returns true if ECKeyJWK instances are equal
        /// </summary>
        /// <param name="input">Instance of ECKeyJWK to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ECKeyJWK input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Crv == input.Crv ||
                    this.Crv.Equals(input.Crv)
                ) && 
                (
                    this.Kid == input.Kid ||
                    (this.Kid != null &&
                    this.Kid.Equals(input.Kid))
                ) && 
                (
                    this.Kty == input.Kty ||
                    this.Kty.Equals(input.Kty)
                ) && 
                (
                    this.Use == input.Use ||
                    this.Use.Equals(input.Use)
                ) && 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Crv != null)
                {
                    hashCode = (hashCode * 59) + this.Crv.GetHashCode();
                }
                if (this.Kid != null)
                {
                    hashCode = (hashCode * 59) + this.Kid.GetHashCode();
                }
                if (this.Kty != null)
                {
                    hashCode = (hashCode * 59) + this.Kty.GetHashCode();
                }
                if (this.Use != null)
                {
                    hashCode = (hashCode * 59) + this.Use.GetHashCode();
                }
                if (this.X != null)
                {
                    hashCode = (hashCode * 59) + this.X.GetHashCode();
                }
                if (this.Y != null)
                {
                    hashCode = (hashCode * 59) + this.Y.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
