/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// IdentityProviderPolicy
    /// </summary>
    [DataContract(Name = "IdentityProviderPolicy")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(AccessPolicy), "ACCESS_POLICY")]
    [JsonSubtypes.KnownSubType(typeof(IdentityProviderPolicy), "IDP_DISCOVERY")]
    [JsonSubtypes.KnownSubType(typeof(MultifactorEnrollmentPolicy), "MFA_ENROLL")]
    [JsonSubtypes.KnownSubType(typeof(AuthorizationServerPolicy), "OAUTH_AUTHORIZATION_POLICY")]
    [JsonSubtypes.KnownSubType(typeof(OktaSignOnPolicy), "OKTA_SIGN_ON")]
    [JsonSubtypes.KnownSubType(typeof(PasswordPolicy), "PASSWORD")]
    [JsonSubtypes.KnownSubType(typeof(ProfileEnrollmentPolicy), "PROFILE_ENROLLMENT")]
    
    public partial class IdentityProviderPolicy : Policy, IEquatable<IdentityProviderPolicy>
    {
        
        /// <summary>
        /// Gets or Sets AccountLink
        /// </summary>
        [DataMember(Name = "accountLink", EmitDefaultValue = false)]
        public PolicyAccountLink AccountLink { get; set; }

        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [DataMember(Name = "conditions", EmitDefaultValue = false)]
        public PolicyRuleConditions Conditions { get; set; }

        /// <summary>
        /// Gets or Sets MaxClockSkew
        /// </summary>
        [DataMember(Name = "maxClockSkew", EmitDefaultValue = false)]
        public int MaxClockSkew { get; set; }

        /// <summary>
        /// Gets or Sets Provisioning
        /// </summary>
        [DataMember(Name = "provisioning", EmitDefaultValue = false)]
        public Provisioning Provisioning { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public PolicySubject Subject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentityProviderPolicy {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AccountLink: ").Append(AccountLink).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  MaxClockSkew: ").Append(MaxClockSkew).Append("\n");
            sb.Append("  Provisioning: ").Append(Provisioning).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityProviderPolicy);
        }

        /// <summary>
        /// Returns true if IdentityProviderPolicy instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityProviderPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityProviderPolicy input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.AccountLink == input.AccountLink ||
                    (this.AccountLink != null &&
                    this.AccountLink.Equals(input.AccountLink))
                ) && base.Equals(input) && 
                (
                    this.Conditions == input.Conditions ||
                    (this.Conditions != null &&
                    this.Conditions.Equals(input.Conditions))
                ) && base.Equals(input) && 
                (
                    this.MaxClockSkew == input.MaxClockSkew ||
                    this.MaxClockSkew.Equals(input.MaxClockSkew)
                ) && base.Equals(input) && 
                (
                    this.Provisioning == input.Provisioning ||
                    (this.Provisioning != null &&
                    this.Provisioning.Equals(input.Provisioning))
                ) && base.Equals(input) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                
                if (this.AccountLink != null)
                {
                    hashCode = (hashCode * 59) + this.AccountLink.GetHashCode();
                }
                if (this.Conditions != null)
                {
                    hashCode = (hashCode * 59) + this.Conditions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxClockSkew.GetHashCode();
                if (this.Provisioning != null)
                {
                    hashCode = (hashCode * 59) + this.Provisioning.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
