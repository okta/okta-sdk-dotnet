/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// RealmProfile
    /// </summary>
    [DataContract(Name = "RealmProfile")]
    
    public partial class RealmProfile : IEquatable<RealmProfile>
    {
        /// <summary>
        /// Used to store partner users. This must be set to Partner to access Okta&#39;s external partner portal.
        /// </summary>
        /// <value>Used to store partner users. This must be set to Partner to access Okta&#39;s external partner portal.</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class RealmTypeEnum : StringEnum
        {
            /// <summary>
            /// StringEnum PARTNER for value: PARTNER
            /// </summary>
            
            public static RealmTypeEnum PARTNER = new RealmTypeEnum("PARTNER");

            /// <summary>
            /// StringEnum DEFAULT for value: DEFAULT
            /// </summary>
            
            public static RealmTypeEnum DEFAULT = new RealmTypeEnum("DEFAULT");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="RealmTypeEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator RealmTypeEnum(string value) => new RealmTypeEnum(value);

            /// <summary>
            /// Creates a new <see cref="RealmType"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public RealmTypeEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// Used to store partner users. This must be set to Partner to access Okta&#39;s external partner portal.
        /// </summary>
        /// <value>Used to store partner users. This must be set to Partner to access Okta&#39;s external partner portal.</value>
        [DataMember(Name = "realmType", EmitDefaultValue = true)]
        
        public RealmTypeEnum RealmType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RealmProfile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public RealmProfile() { }
        
        /// <summary>
        /// Name of a Realm
        /// </summary>
        /// <value>Name of a Realm</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RealmProfile {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RealmType: ").Append(RealmType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RealmProfile);
        }

        /// <summary>
        /// Returns true if RealmProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of RealmProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RealmProfile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RealmType == input.RealmType ||
                    this.RealmType.Equals(input.RealmType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.RealmType != null)
                {
                    hashCode = (hashCode * 59) + this.RealmType.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
