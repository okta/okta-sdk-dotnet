/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// ThreatInsightConfiguration
    /// </summary>
    [DataContract(Name = "ThreatInsightConfiguration")]
    
    public partial class ThreatInsightConfiguration : IEquatable<ThreatInsightConfiguration>
    {
        /// <summary>
        /// Specifies how Okta responds to authentication requests from suspicious IP addresses
        /// </summary>
        /// <value>Specifies how Okta responds to authentication requests from suspicious IP addresses</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class ActionEnum : StringEnum
        {
            /// <summary>
            /// StringEnum None for value: none
            /// </summary>
            
            public static ActionEnum None = new ActionEnum("none");

            /// <summary>
            /// StringEnum Audit for value: audit
            /// </summary>
            
            public static ActionEnum Audit = new ActionEnum("audit");

            /// <summary>
            /// StringEnum Block for value: block
            /// </summary>
            
            public static ActionEnum Block = new ActionEnum("block");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="ActionEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator ActionEnum(string value) => new ActionEnum(value);

            /// <summary>
            /// Creates a new <see cref="Action"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public ActionEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// Specifies how Okta responds to authentication requests from suspicious IP addresses
        /// </summary>
        /// <value>Specifies how Okta responds to authentication requests from suspicious IP addresses</value>
        [DataMember(Name = "action", EmitDefaultValue = true)]
        
        public ActionEnum Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreatInsightConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ThreatInsightConfiguration() { }
        
        /// <summary>
        /// Timestamp when the ThreatInsight Configuration object was created
        /// </summary>
        /// <value>Timestamp when the ThreatInsight Configuration object was created</value>
        [DataMember(Name = "created", EmitDefaultValue = true)]
        public DateTimeOffset Created { get; private set; }

        /// <summary>
        /// Returns false as Created should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreated()
        {
            return false;
        }
        /// <summary>
        /// Accepts a list of [Network Zone](/openapi/okta-management/management/tag/NetworkZone/) IDs. IPs in the excluded network zones aren&#39;t logged or blocked. This ensures that traffic from known, trusted IPs isn&#39;t accidentally logged or blocked.
        /// </summary>
        /// <value>Accepts a list of [Network Zone](/openapi/okta-management/management/tag/NetworkZone/) IDs. IPs in the excluded network zones aren&#39;t logged or blocked. This ensures that traffic from known, trusted IPs isn&#39;t accidentally logged or blocked.</value>
        [DataMember(Name = "excludeZones", EmitDefaultValue = true)]
        public List<string> ExcludeZones { get; set; }

        /// <summary>
        /// Timestamp when the ThreatInsight Configuration object was last updated
        /// </summary>
        /// <value>Timestamp when the ThreatInsight Configuration object was last updated</value>
        [DataMember(Name = "lastUpdated", EmitDefaultValue = true)]
        public DateTimeOffset LastUpdated { get; private set; }

        /// <summary>
        /// Returns false as LastUpdated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastUpdated()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "_links", EmitDefaultValue = true)]
        public LinksSelf Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThreatInsightConfiguration {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  ExcludeZones: ").Append(ExcludeZones).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThreatInsightConfiguration);
        }

        /// <summary>
        /// Returns true if ThreatInsightConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of ThreatInsightConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThreatInsightConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.ExcludeZones == input.ExcludeZones ||
                    this.ExcludeZones != null &&
                    input.ExcludeZones != null &&
                    this.ExcludeZones.SequenceEqual(input.ExcludeZones)
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                if (this.Created != null)
                {
                    hashCode = (hashCode * 59) + this.Created.GetHashCode();
                }
                if (this.ExcludeZones != null)
                {
                    hashCode = (hashCode * 59) + this.ExcludeZones.GetHashCode();
                }
                if (this.LastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdated.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
