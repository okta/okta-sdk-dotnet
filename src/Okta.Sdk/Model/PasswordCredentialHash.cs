/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// PasswordCredentialHash
    /// </summary>
    [DataContract(Name = "PasswordCredentialHash")]
    
    public partial class PasswordCredentialHash : IEquatable<PasswordCredentialHash>
    {

        /// <summary>
        /// Gets or Sets Algorithm
        /// </summary>
        [DataMember(Name = "algorithm", EmitDefaultValue = true)]
        
        public PasswordCredentialHashAlgorithm Algorithm { get; set; }

        /// <summary>
        /// Gets or Sets DigestAlgorithm
        /// </summary>
        [DataMember(Name = "digestAlgorithm", EmitDefaultValue = true)]
        
        public DigestAlgorithm DigestAlgorithm { get; set; }
        
        /// <summary>
        /// Gets or Sets IterationCount
        /// </summary>
        [DataMember(Name = "iterationCount", EmitDefaultValue = true)]
        public int IterationCount { get; set; }

        /// <summary>
        /// Gets or Sets KeySize
        /// </summary>
        [DataMember(Name = "keySize", EmitDefaultValue = true)]
        public int KeySize { get; set; }

        /// <summary>
        /// Gets or Sets Salt
        /// </summary>
        [DataMember(Name = "salt", EmitDefaultValue = true)]
        public string Salt { get; set; }

        /// <summary>
        /// Gets or Sets SaltOrder
        /// </summary>
        [DataMember(Name = "saltOrder", EmitDefaultValue = true)]
        public string SaltOrder { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets WorkFactor
        /// </summary>
        [DataMember(Name = "workFactor", EmitDefaultValue = true)]
        public int WorkFactor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PasswordCredentialHash {\n");
            sb.Append("  Algorithm: ").Append(Algorithm).Append("\n");
            sb.Append("  DigestAlgorithm: ").Append(DigestAlgorithm).Append("\n");
            sb.Append("  IterationCount: ").Append(IterationCount).Append("\n");
            sb.Append("  KeySize: ").Append(KeySize).Append("\n");
            sb.Append("  Salt: ").Append(Salt).Append("\n");
            sb.Append("  SaltOrder: ").Append(SaltOrder).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  WorkFactor: ").Append(WorkFactor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PasswordCredentialHash);
        }

        /// <summary>
        /// Returns true if PasswordCredentialHash instances are equal
        /// </summary>
        /// <param name="input">Instance of PasswordCredentialHash to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PasswordCredentialHash input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Algorithm == input.Algorithm ||
                    this.Algorithm.Equals(input.Algorithm)
                ) && 
                (
                    this.DigestAlgorithm == input.DigestAlgorithm ||
                    this.DigestAlgorithm.Equals(input.DigestAlgorithm)
                ) && 
                (
                    this.IterationCount == input.IterationCount ||
                    this.IterationCount.Equals(input.IterationCount)
                ) && 
                (
                    this.KeySize == input.KeySize ||
                    this.KeySize.Equals(input.KeySize)
                ) && 
                (
                    this.Salt == input.Salt ||
                    (this.Salt != null &&
                    this.Salt.Equals(input.Salt))
                ) && 
                (
                    this.SaltOrder == input.SaltOrder ||
                    (this.SaltOrder != null &&
                    this.SaltOrder.Equals(input.SaltOrder))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.WorkFactor == input.WorkFactor ||
                    this.WorkFactor.Equals(input.WorkFactor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Algorithm != null)
                {
                    hashCode = (hashCode * 59) + this.Algorithm.GetHashCode();
                }
                if (this.DigestAlgorithm != null)
                {
                    hashCode = (hashCode * 59) + this.DigestAlgorithm.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IterationCount.GetHashCode();
                hashCode = (hashCode * 59) + this.KeySize.GetHashCode();
                if (this.Salt != null)
                {
                    hashCode = (hashCode * 59) + this.Salt.GetHashCode();
                }
                if (this.SaltOrder != null)
                {
                    hashCode = (hashCode * 59) + this.SaltOrder.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WorkFactor.GetHashCode();
                return hashCode;
            }
        }

    }

}
