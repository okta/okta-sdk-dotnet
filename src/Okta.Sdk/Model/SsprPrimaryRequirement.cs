/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// Defines the authenticators permitted for the initial authentication step of password recovery
    /// </summary>
    [DataContract(Name = "SsprPrimaryRequirement")]
    
    public partial class SsprPrimaryRequirement : IEquatable<SsprPrimaryRequirement>
    {
        /// <summary>
        /// Defines Methods
        /// </summary>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class MethodsEnum : StringEnum
        {
            /// <summary>
            /// StringEnum Push for value: push
            /// </summary>
            
            public static MethodsEnum Push = new MethodsEnum("push");

            /// <summary>
            /// StringEnum Sms for value: sms
            /// </summary>
            
            public static MethodsEnum Sms = new MethodsEnum("sms");

            /// <summary>
            /// StringEnum Voice for value: voice
            /// </summary>
            
            public static MethodsEnum Voice = new MethodsEnum("voice");

            /// <summary>
            /// StringEnum Email for value: email
            /// </summary>
            
            public static MethodsEnum Email = new MethodsEnum("email");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="MethodsEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator MethodsEnum(string value) => new MethodsEnum(value);

            /// <summary>
            /// Creates a new <see cref="Methods"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public MethodsEnum(string value)
                : base(value)
            {
            }
        }



        /// <summary>
        /// Authenticator methods allowed for the initial authentication step of password recovery
        /// </summary>
        /// <value>Authenticator methods allowed for the initial authentication step of password recovery</value>
        [DataMember(Name = "methods", EmitDefaultValue = true)]
        
        public List<MethodsEnum> Methods { get; set; }
        
        /// <summary>
        /// Constraints on the values specified in the &#x60;methods&#x60; array. Specifying a constraint limits methods to specific authenticator(s). Currently, Google OTP is the only accepted constraint.
        /// </summary>
        /// <value>Constraints on the values specified in the &#x60;methods&#x60; array. Specifying a constraint limits methods to specific authenticator(s). Currently, Google OTP is the only accepted constraint.</value>
        [DataMember(Name = "methodConstraints", EmitDefaultValue = true)]
        public List<AuthenticatorMethodConstraint> MethodConstraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SsprPrimaryRequirement {\n");
            sb.Append("  MethodConstraints: ").Append(MethodConstraints).Append("\n");
            sb.Append("  Methods: ").Append(Methods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SsprPrimaryRequirement);
        }

        /// <summary>
        /// Returns true if SsprPrimaryRequirement instances are equal
        /// </summary>
        /// <param name="input">Instance of SsprPrimaryRequirement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SsprPrimaryRequirement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MethodConstraints == input.MethodConstraints ||
                    this.MethodConstraints != null &&
                    input.MethodConstraints != null &&
                    this.MethodConstraints.SequenceEqual(input.MethodConstraints)
                ) && 
                (
                    this.Methods == input.Methods ||
                    this.Methods.SequenceEqual(input.Methods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.MethodConstraints != null)
                {
                    hashCode = (hashCode * 59) + this.MethodConstraints.GetHashCode();
                }
                if (this.Methods != null)
                {
                    hashCode = (hashCode * 59) + this.Methods.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
