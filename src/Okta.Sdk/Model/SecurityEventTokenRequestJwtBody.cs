/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// JSON Web Token body payload for a Security Event Token
    /// </summary>
    [DataContract(Name = "SecurityEventTokenRequestJwtBody")]
    
    public partial class SecurityEventTokenRequestJwtBody : IEquatable<SecurityEventTokenRequestJwtBody>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityEventTokenRequestJwtBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SecurityEventTokenRequestJwtBody() { }
        
        /// <summary>
        /// Audience
        /// </summary>
        /// <value>Audience</value>
        [DataMember(Name = "aud", EmitDefaultValue = true)]
        public string Aud { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name = "events", EmitDefaultValue = true)]
        public SecurityEventTokenRequestJwtEvents Events { get; set; }

        /// <summary>
        /// Token issue time (UNIX timestamp)
        /// </summary>
        /// <value>Token issue time (UNIX timestamp)</value>
        [DataMember(Name = "iat", EmitDefaultValue = true)]
        public long Iat { get; set; }

        /// <summary>
        /// Token issuer
        /// </summary>
        /// <value>Token issuer</value>
        [DataMember(Name = "iss", EmitDefaultValue = true)]
        public string Iss { get; set; }

        /// <summary>
        /// Token ID
        /// </summary>
        /// <value>Token ID</value>
        [DataMember(Name = "jti", EmitDefaultValue = true)]
        public string Jti { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityEventTokenRequestJwtBody {\n");
            sb.Append("  Aud: ").Append(Aud).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Iat: ").Append(Iat).Append("\n");
            sb.Append("  Iss: ").Append(Iss).Append("\n");
            sb.Append("  Jti: ").Append(Jti).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityEventTokenRequestJwtBody);
        }

        /// <summary>
        /// Returns true if SecurityEventTokenRequestJwtBody instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityEventTokenRequestJwtBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityEventTokenRequestJwtBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Aud == input.Aud ||
                    (this.Aud != null &&
                    this.Aud.Equals(input.Aud))
                ) && 
                (
                    this.Events == input.Events ||
                    (this.Events != null &&
                    this.Events.Equals(input.Events))
                ) && 
                (
                    this.Iat == input.Iat ||
                    this.Iat.Equals(input.Iat)
                ) && 
                (
                    this.Iss == input.Iss ||
                    (this.Iss != null &&
                    this.Iss.Equals(input.Iss))
                ) && 
                (
                    this.Jti == input.Jti ||
                    (this.Jti != null &&
                    this.Jti.Equals(input.Jti))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Aud != null)
                {
                    hashCode = (hashCode * 59) + this.Aud.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Iat.GetHashCode();
                if (this.Iss != null)
                {
                    hashCode = (hashCode * 59) + this.Iss.GetHashCode();
                }
                if (this.Jti != null)
                {
                    hashCode = (hashCode * 59) + this.Jti.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
