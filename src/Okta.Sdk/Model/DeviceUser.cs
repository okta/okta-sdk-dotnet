/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// DeviceUser
    /// </summary>
    [DataContract(Name = "DeviceUser")]
    
    public partial class DeviceUser : IEquatable<DeviceUser>
    {
        /// <summary>
        /// The management status of the device
        /// </summary>
        /// <value>The management status of the device</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class ManagementStatusEnum : StringEnum
        {
            /// <summary>
            /// StringEnum MANAGED for value: MANAGED
            /// </summary>
            
            public static ManagementStatusEnum MANAGED = new ManagementStatusEnum("MANAGED");

            /// <summary>
            /// StringEnum NOTMANAGED for value: NOT_MANAGED
            /// </summary>
            
            public static ManagementStatusEnum NOTMANAGED = new ManagementStatusEnum("NOT_MANAGED");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="ManagementStatusEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator ManagementStatusEnum(string value) => new ManagementStatusEnum(value);

            /// <summary>
            /// Creates a new <see cref="ManagementStatus"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public ManagementStatusEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// The management status of the device
        /// </summary>
        /// <value>The management status of the device</value>
        [DataMember(Name = "managementStatus", EmitDefaultValue = true)]
        
        public ManagementStatusEnum ManagementStatus { get; set; }
        /// <summary>
        /// Screen lock type of the device
        /// </summary>
        /// <value>Screen lock type of the device</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class ScreenLockTypeEnum : StringEnum
        {
            /// <summary>
            /// StringEnum NONE for value: NONE
            /// </summary>
            
            public static ScreenLockTypeEnum NONE = new ScreenLockTypeEnum("NONE");

            /// <summary>
            /// StringEnum PASSCODE for value: PASSCODE
            /// </summary>
            
            public static ScreenLockTypeEnum PASSCODE = new ScreenLockTypeEnum("PASSCODE");

            /// <summary>
            /// StringEnum BIOMETRIC for value: BIOMETRIC
            /// </summary>
            
            public static ScreenLockTypeEnum BIOMETRIC = new ScreenLockTypeEnum("BIOMETRIC");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="ScreenLockTypeEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator ScreenLockTypeEnum(string value) => new ScreenLockTypeEnum(value);

            /// <summary>
            /// Creates a new <see cref="ScreenLockType"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public ScreenLockTypeEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// Screen lock type of the device
        /// </summary>
        /// <value>Screen lock type of the device</value>
        [DataMember(Name = "screenLockType", EmitDefaultValue = true)]
        
        public ScreenLockTypeEnum ScreenLockType { get; set; }
        
        /// <summary>
        /// Timestamp when device was created
        /// </summary>
        /// <value>Timestamp when device was created</value>
        [DataMember(Name = "created", EmitDefaultValue = true)]
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = true)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeviceUser {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  ManagementStatus: ").Append(ManagementStatus).Append("\n");
            sb.Append("  ScreenLockType: ").Append(ScreenLockType).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceUser);
        }

        /// <summary>
        /// Returns true if DeviceUser instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceUser input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.ManagementStatus == input.ManagementStatus ||
                    this.ManagementStatus.Equals(input.ManagementStatus)
                ) && 
                (
                    this.ScreenLockType == input.ScreenLockType ||
                    this.ScreenLockType.Equals(input.ScreenLockType)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Created != null)
                {
                    hashCode = (hashCode * 59) + this.Created.GetHashCode();
                }
                if (this.ManagementStatus != null)
                {
                    hashCode = (hashCode * 59) + this.ManagementStatus.GetHashCode();
                }
                if (this.ScreenLockType != null)
                {
                    hashCode = (hashCode * 59) + this.ScreenLockType.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
