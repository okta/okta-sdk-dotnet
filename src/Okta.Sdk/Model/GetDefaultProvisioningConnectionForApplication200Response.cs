/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template" ModelOneOf
    /// GetDefaultProvisioningConnectionForApplication200Response
    /// </summary>
    [JsonConverter(typeof(GetDefaultProvisioningConnectionForApplication200ResponseJsonConverter))]
    [DataContract(Name = "getDefaultProvisioningConnectionForApplication_200_response")]
    public partial class GetDefaultProvisioningConnectionForApplication200Response : AbstractOpenAPISchema, IEquatable<GetDefaultProvisioningConnectionForApplication200Response>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDefaultProvisioningConnectionForApplication200Response" /> class
        /// with the <see cref="ProvisioningConnectionUnknownResponse" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ProvisioningConnectionUnknownResponse.</param>
        public GetDefaultProvisioningConnectionForApplication200Response(ProvisioningConnectionUnknownResponse actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetDefaultProvisioningConnectionForApplication200Response" /> class
        /// with the <see cref="ProvisioningConnectionTokenResponse" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ProvisioningConnectionTokenResponse.</param>
        public GetDefaultProvisioningConnectionForApplication200Response(ProvisioningConnectionTokenResponse actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetDefaultProvisioningConnectionForApplication200Response" /> class
        /// with the <see cref="ProvisioningConnectionOauthResponse" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ProvisioningConnectionOauthResponse.</param>
        public GetDefaultProvisioningConnectionForApplication200Response(ProvisioningConnectionOauthResponse actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(ProvisioningConnectionOauthResponse))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ProvisioningConnectionTokenResponse))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ProvisioningConnectionUnknownResponse))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: ProvisioningConnectionOauthResponse, ProvisioningConnectionTokenResponse, ProvisioningConnectionUnknownResponse");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `ProvisioningConnectionUnknownResponse`. If the actual instance is not `ProvisioningConnectionUnknownResponse`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ProvisioningConnectionUnknownResponse</returns>
        public ProvisioningConnectionUnknownResponse GetProvisioningConnectionUnknownResponse()
        {
            return (ProvisioningConnectionUnknownResponse)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ProvisioningConnectionTokenResponse`. If the actual instance is not `ProvisioningConnectionTokenResponse`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ProvisioningConnectionTokenResponse</returns>
        public ProvisioningConnectionTokenResponse GetProvisioningConnectionTokenResponse()
        {
            return (ProvisioningConnectionTokenResponse)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ProvisioningConnectionOauthResponse`. If the actual instance is not `ProvisioningConnectionOauthResponse`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ProvisioningConnectionOauthResponse</returns>
        public ProvisioningConnectionOauthResponse GetProvisioningConnectionOauthResponse()
        {
            return (ProvisioningConnectionOauthResponse)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetDefaultProvisioningConnectionForApplication200Response {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, GetDefaultProvisioningConnectionForApplication200Response.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of GetDefaultProvisioningConnectionForApplication200Response
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of GetDefaultProvisioningConnectionForApplication200Response</returns>
        public static GetDefaultProvisioningConnectionForApplication200Response FromJson(string jsonString)
        {
            GetDefaultProvisioningConnectionForApplication200Response newGetDefaultProvisioningConnectionForApplication200Response = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newGetDefaultProvisioningConnectionForApplication200Response;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ProvisioningConnectionOauthResponse).GetProperty("AdditionalProperties") == null)
                {
                    newGetDefaultProvisioningConnectionForApplication200Response = new GetDefaultProvisioningConnectionForApplication200Response(JsonConvert.DeserializeObject<ProvisioningConnectionOauthResponse>(jsonString, GetDefaultProvisioningConnectionForApplication200Response.SerializerSettings));
                }
                else
                {
                    newGetDefaultProvisioningConnectionForApplication200Response = new GetDefaultProvisioningConnectionForApplication200Response(JsonConvert.DeserializeObject<ProvisioningConnectionOauthResponse>(jsonString, GetDefaultProvisioningConnectionForApplication200Response.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ProvisioningConnectionOauthResponse");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ProvisioningConnectionOauthResponse: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ProvisioningConnectionTokenResponse).GetProperty("AdditionalProperties") == null)
                {
                    newGetDefaultProvisioningConnectionForApplication200Response = new GetDefaultProvisioningConnectionForApplication200Response(JsonConvert.DeserializeObject<ProvisioningConnectionTokenResponse>(jsonString, GetDefaultProvisioningConnectionForApplication200Response.SerializerSettings));
                }
                else
                {
                    newGetDefaultProvisioningConnectionForApplication200Response = new GetDefaultProvisioningConnectionForApplication200Response(JsonConvert.DeserializeObject<ProvisioningConnectionTokenResponse>(jsonString, GetDefaultProvisioningConnectionForApplication200Response.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ProvisioningConnectionTokenResponse");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ProvisioningConnectionTokenResponse: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ProvisioningConnectionUnknownResponse).GetProperty("AdditionalProperties") == null)
                {
                    newGetDefaultProvisioningConnectionForApplication200Response = new GetDefaultProvisioningConnectionForApplication200Response(JsonConvert.DeserializeObject<ProvisioningConnectionUnknownResponse>(jsonString, GetDefaultProvisioningConnectionForApplication200Response.SerializerSettings));
                }
                else
                {
                    newGetDefaultProvisioningConnectionForApplication200Response = new GetDefaultProvisioningConnectionForApplication200Response(JsonConvert.DeserializeObject<ProvisioningConnectionUnknownResponse>(jsonString, GetDefaultProvisioningConnectionForApplication200Response.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ProvisioningConnectionUnknownResponse");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ProvisioningConnectionUnknownResponse: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newGetDefaultProvisioningConnectionForApplication200Response;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetDefaultProvisioningConnectionForApplication200Response);
        }

        /// <summary>
        /// Returns true if GetDefaultProvisioningConnectionForApplication200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of GetDefaultProvisioningConnectionForApplication200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetDefaultProvisioningConnectionForApplication200Response input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

    }

    /// <summary>
    /// Custom JSON converter for GetDefaultProvisioningConnectionForApplication200Response
    /// </summary>
    public class GetDefaultProvisioningConnectionForApplication200ResponseJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(GetDefaultProvisioningConnectionForApplication200Response).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return GetDefaultProvisioningConnectionForApplication200Response.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
