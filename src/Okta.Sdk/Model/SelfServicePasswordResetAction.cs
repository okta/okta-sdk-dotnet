/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// SelfServicePasswordResetAction
    /// </summary>
    [DataContract(Name = "SelfServicePasswordResetAction")]
    
    public partial class SelfServicePasswordResetAction : IEquatable<SelfServicePasswordResetAction>
    {

        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [DataMember(Name = "access", EmitDefaultValue = true)]
        
        public PolicyAccess Access { get; set; }
        /// <summary>
        /// The type of rule action
        /// </summary>
        /// <value>The type of rule action</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class TypeEnum : StringEnum
        {
            /// <summary>
            /// StringEnum SelfServicePasswordReset for value: selfServicePasswordReset
            /// </summary>
            
            public static TypeEnum SelfServicePasswordReset = new TypeEnum("selfServicePasswordReset");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="TypeEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator TypeEnum(string value) => new TypeEnum(value);

            /// <summary>
            /// Creates a new <see cref="Type"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public TypeEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// The type of rule action
        /// </summary>
        /// <value>The type of rule action</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return false;
        }
        
        /// <summary>
        /// Gets or Sets Requirement
        /// </summary>
        [DataMember(Name = "requirement", EmitDefaultValue = true)]
        public SsprRequirement Requirement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SelfServicePasswordResetAction {\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Requirement: ").Append(Requirement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SelfServicePasswordResetAction);
        }

        /// <summary>
        /// Returns true if SelfServicePasswordResetAction instances are equal
        /// </summary>
        /// <param name="input">Instance of SelfServicePasswordResetAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SelfServicePasswordResetAction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Access == input.Access ||
                    this.Access.Equals(input.Access)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Requirement == input.Requirement ||
                    (this.Requirement != null &&
                    this.Requirement.Equals(input.Requirement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Access != null)
                {
                    hashCode = (hashCode * 59) + this.Access.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Requirement != null)
                {
                    hashCode = (hashCode * 59) + this.Requirement.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
