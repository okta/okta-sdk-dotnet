/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// OIDC configuration details
    /// </summary>
    [DataContract(Name = "Oidc")]
    
    public partial class Oidc : IEquatable<Oidc>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Oidc" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Oidc() { }
        
        /// <summary>
        /// The URL to your customer-facing instructions for configuring your OIDC integration. See [Customer configuration document guidelines](https://developer.okta.com/docs/guides/submit-app-prereq/main/#customer-configuration-document-guidelines).
        /// </summary>
        /// <value>The URL to your customer-facing instructions for configuring your OIDC integration. See [Customer configuration document guidelines](https://developer.okta.com/docs/guides/submit-app-prereq/main/#customer-configuration-document-guidelines).</value>
        [DataMember(Name = "doc", EmitDefaultValue = true)]
        public string Doc { get; set; }

        /// <summary>
        /// The URL to redirect users when they click on your app from their Okta End-User Dashboard
        /// </summary>
        /// <value>The URL to redirect users when they click on your app from their Okta End-User Dashboard</value>
        [DataMember(Name = "initiateLoginUri", EmitDefaultValue = true)]
        public string InitiateLoginUri { get; set; }

        /// <summary>
        /// The sign-out redirect URIs for your app. You can send a request to &#x60;/v1/logout&#x60; to sign the user out and redirect them to one of these URIs.
        /// </summary>
        /// <value>The sign-out redirect URIs for your app. You can send a request to &#x60;/v1/logout&#x60; to sign the user out and redirect them to one of these URIs.</value>
        [DataMember(Name = "postLogoutUris", EmitDefaultValue = true)]
        public List<string> PostLogoutUris { get; set; }

        /// <summary>
        /// List of sign-in redirect URIs
        /// </summary>
        /// <value>List of sign-in redirect URIs</value>
        [DataMember(Name = "redirectUris", EmitDefaultValue = true)]
        public List<string> RedirectUris { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Oidc {\n");
            sb.Append("  Doc: ").Append(Doc).Append("\n");
            sb.Append("  InitiateLoginUri: ").Append(InitiateLoginUri).Append("\n");
            sb.Append("  PostLogoutUris: ").Append(PostLogoutUris).Append("\n");
            sb.Append("  RedirectUris: ").Append(RedirectUris).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Oidc);
        }

        /// <summary>
        /// Returns true if Oidc instances are equal
        /// </summary>
        /// <param name="input">Instance of Oidc to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Oidc input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Doc == input.Doc ||
                    (this.Doc != null &&
                    this.Doc.Equals(input.Doc))
                ) && 
                (
                    this.InitiateLoginUri == input.InitiateLoginUri ||
                    (this.InitiateLoginUri != null &&
                    this.InitiateLoginUri.Equals(input.InitiateLoginUri))
                ) && 
                (
                    this.PostLogoutUris == input.PostLogoutUris ||
                    this.PostLogoutUris != null &&
                    input.PostLogoutUris != null &&
                    this.PostLogoutUris.SequenceEqual(input.PostLogoutUris)
                ) && 
                (
                    this.RedirectUris == input.RedirectUris ||
                    this.RedirectUris != null &&
                    input.RedirectUris != null &&
                    this.RedirectUris.SequenceEqual(input.RedirectUris)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Doc != null)
                {
                    hashCode = (hashCode * 59) + this.Doc.GetHashCode();
                }
                if (this.InitiateLoginUri != null)
                {
                    hashCode = (hashCode * 59) + this.InitiateLoginUri.GetHashCode();
                }
                if (this.PostLogoutUris != null)
                {
                    hashCode = (hashCode * 59) + this.PostLogoutUris.GetHashCode();
                }
                if (this.RedirectUris != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectUris.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
