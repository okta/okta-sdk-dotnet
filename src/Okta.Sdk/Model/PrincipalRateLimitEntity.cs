/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// PrincipalRateLimitEntity
    /// </summary>
    [DataContract(Name = "PrincipalRateLimitEntity")]
    
    public partial class PrincipalRateLimitEntity : IEquatable<PrincipalRateLimitEntity>
    {

        /// <summary>
        /// Gets or Sets PrincipalType
        /// </summary>
        [DataMember(Name = "principalType", EmitDefaultValue = true)]
        
        public PrincipalType PrincipalType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrincipalRateLimitEntity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PrincipalRateLimitEntity() { }
        
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }

        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", EmitDefaultValue = true)]
        public DateTimeOffset CreatedDate { get; private set; }

        /// <summary>
        /// Returns false as CreatedDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedDate()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DefaultConcurrencyPercentage
        /// </summary>
        [DataMember(Name = "defaultConcurrencyPercentage", EmitDefaultValue = true)]
        public int DefaultConcurrencyPercentage { get; private set; }

        /// <summary>
        /// Returns false as DefaultConcurrencyPercentage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultConcurrencyPercentage()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DefaultPercentage
        /// </summary>
        [DataMember(Name = "defaultPercentage", EmitDefaultValue = true)]
        public int DefaultPercentage { get; private set; }

        /// <summary>
        /// Returns false as DefaultPercentage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultPercentage()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [DataMember(Name = "lastUpdate", EmitDefaultValue = true)]
        public DateTimeOffset LastUpdate { get; private set; }

        /// <summary>
        /// Returns false as LastUpdate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastUpdate()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LastUpdatedBy
        /// </summary>
        [DataMember(Name = "lastUpdatedBy", EmitDefaultValue = true)]
        public string LastUpdatedBy { get; private set; }

        /// <summary>
        /// Returns false as LastUpdatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastUpdatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets OrgId
        /// </summary>
        [DataMember(Name = "orgId", EmitDefaultValue = true)]
        public string OrgId { get; private set; }

        /// <summary>
        /// Returns false as OrgId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrgId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets PrincipalId
        /// </summary>
        [DataMember(Name = "principalId", EmitDefaultValue = true)]
        public string PrincipalId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrincipalRateLimitEntity {\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  DefaultConcurrencyPercentage: ").Append(DefaultConcurrencyPercentage).Append("\n");
            sb.Append("  DefaultPercentage: ").Append(DefaultPercentage).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  LastUpdatedBy: ").Append(LastUpdatedBy).Append("\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  PrincipalId: ").Append(PrincipalId).Append("\n");
            sb.Append("  PrincipalType: ").Append(PrincipalType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrincipalRateLimitEntity);
        }

        /// <summary>
        /// Returns true if PrincipalRateLimitEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of PrincipalRateLimitEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrincipalRateLimitEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.DefaultConcurrencyPercentage == input.DefaultConcurrencyPercentage ||
                    this.DefaultConcurrencyPercentage.Equals(input.DefaultConcurrencyPercentage)
                ) && 
                (
                    this.DefaultPercentage == input.DefaultPercentage ||
                    this.DefaultPercentage.Equals(input.DefaultPercentage)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastUpdate == input.LastUpdate ||
                    (this.LastUpdate != null &&
                    this.LastUpdate.Equals(input.LastUpdate))
                ) && 
                (
                    this.LastUpdatedBy == input.LastUpdatedBy ||
                    (this.LastUpdatedBy != null &&
                    this.LastUpdatedBy.Equals(input.LastUpdatedBy))
                ) && 
                (
                    this.OrgId == input.OrgId ||
                    (this.OrgId != null &&
                    this.OrgId.Equals(input.OrgId))
                ) && 
                (
                    this.PrincipalId == input.PrincipalId ||
                    (this.PrincipalId != null &&
                    this.PrincipalId.Equals(input.PrincipalId))
                ) && 
                (
                    this.PrincipalType == input.PrincipalType ||
                    this.PrincipalType.Equals(input.PrincipalType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DefaultConcurrencyPercentage.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultPercentage.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.LastUpdate != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdate.GetHashCode();
                }
                if (this.LastUpdatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdatedBy.GetHashCode();
                }
                if (this.OrgId != null)
                {
                    hashCode = (hashCode * 59) + this.OrgId.GetHashCode();
                }
                if (this.PrincipalId != null)
                {
                    hashCode = (hashCode * 59) + this.PrincipalId.GetHashCode();
                }
                if (this.PrincipalType != null)
                {
                    hashCode = (hashCode * 59) + this.PrincipalType.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
