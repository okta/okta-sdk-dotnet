/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// LogUserAgent
    /// </summary>
    [DataContract(Name = "LogUserAgent")]
    
    public partial class LogUserAgent : IEquatable<LogUserAgent>
    {
        
        /// <summary>
        /// Gets or Sets Browser
        /// </summary>
        [DataMember(Name = "browser", EmitDefaultValue = true)]
        public string Browser { get; private set; }

        /// <summary>
        /// Returns false as Browser should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBrowser()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Os
        /// </summary>
        [DataMember(Name = "os", EmitDefaultValue = true)]
        public string Os { get; private set; }

        /// <summary>
        /// Returns false as Os should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOs()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets RawUserAgent
        /// </summary>
        [DataMember(Name = "rawUserAgent", EmitDefaultValue = true)]
        public string RawUserAgent { get; private set; }

        /// <summary>
        /// Returns false as RawUserAgent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRawUserAgent()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogUserAgent {\n");
            sb.Append("  Browser: ").Append(Browser).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  RawUserAgent: ").Append(RawUserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogUserAgent);
        }

        /// <summary>
        /// Returns true if LogUserAgent instances are equal
        /// </summary>
        /// <param name="input">Instance of LogUserAgent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogUserAgent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Browser == input.Browser ||
                    (this.Browser != null &&
                    this.Browser.Equals(input.Browser))
                ) && 
                (
                    this.Os == input.Os ||
                    (this.Os != null &&
                    this.Os.Equals(input.Os))
                ) && 
                (
                    this.RawUserAgent == input.RawUserAgent ||
                    (this.RawUserAgent != null &&
                    this.RawUserAgent.Equals(input.RawUserAgent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Browser != null)
                {
                    hashCode = (hashCode * 59) + this.Browser.GetHashCode();
                }
                if (this.Os != null)
                {
                    hashCode = (hashCode * 59) + this.Os.GetHashCode();
                }
                if (this.RawUserAgent != null)
                {
                    hashCode = (hashCode * 59) + this.RawUserAgent.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
