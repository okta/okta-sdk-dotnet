/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// IdpPolicyRuleActionIdp
    /// </summary>
    [DataContract(Name = "IdpPolicyRuleAction_idp")]
    
    public partial class IdpPolicyRuleActionIdp : IEquatable<IdpPolicyRuleActionIdp>
    {

        /// <summary>
        /// Gets or Sets IdpSelectionType
        /// </summary>
        [DataMember(Name = "idpSelectionType", EmitDefaultValue = true)]
        
        public IdpSelectionType IdpSelectionType { get; set; }
        
        /// <summary>
        /// List of configured Identity Providers that a given Rule can route to. Ability to define multiple providers is a part of the Okta Identity Engine. This allows users to choose a Provider when they sign in. Contact support for information on the Identity Engine.
        /// </summary>
        /// <value>List of configured Identity Providers that a given Rule can route to. Ability to define multiple providers is a part of the Okta Identity Engine. This allows users to choose a Provider when they sign in. Contact support for information on the Identity Engine.</value>
        [DataMember(Name = "providers", EmitDefaultValue = true)]
        public List<IdpPolicyRuleActionProvider> Providers { get; set; }

        /// <summary>
        /// Required if &#x60;idpSelectionType&#x60; is set to &#x60;DYNAMIC&#x60;
        /// </summary>
        /// <value>Required if &#x60;idpSelectionType&#x60; is set to &#x60;DYNAMIC&#x60;</value>
        [DataMember(Name = "matchCriteria", EmitDefaultValue = true)]
        public List<IdpPolicyRuleActionMatchCriteria> MatchCriteria { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdpPolicyRuleActionIdp {\n");
            sb.Append("  Providers: ").Append(Providers).Append("\n");
            sb.Append("  IdpSelectionType: ").Append(IdpSelectionType).Append("\n");
            sb.Append("  MatchCriteria: ").Append(MatchCriteria).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdpPolicyRuleActionIdp);
        }

        /// <summary>
        /// Returns true if IdpPolicyRuleActionIdp instances are equal
        /// </summary>
        /// <param name="input">Instance of IdpPolicyRuleActionIdp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdpPolicyRuleActionIdp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Providers == input.Providers ||
                    this.Providers != null &&
                    input.Providers != null &&
                    this.Providers.SequenceEqual(input.Providers)
                ) && 
                (
                    this.IdpSelectionType == input.IdpSelectionType ||
                    this.IdpSelectionType.Equals(input.IdpSelectionType)
                ) && 
                (
                    this.MatchCriteria == input.MatchCriteria ||
                    this.MatchCriteria != null &&
                    input.MatchCriteria != null &&
                    this.MatchCriteria.SequenceEqual(input.MatchCriteria)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Providers != null)
                {
                    hashCode = (hashCode * 59) + this.Providers.GetHashCode();
                }
                if (this.IdpSelectionType != null)
                {
                    hashCode = (hashCode * 59) + this.IdpSelectionType.GetHashCode();
                }
                if (this.MatchCriteria != null)
                {
                    hashCode = (hashCode * 59) + this.MatchCriteria.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
