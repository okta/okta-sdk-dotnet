/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// A [JSON Web Key (JWK)](https://tools.ietf.org/html/rfc7517) is a JSON representation of a cryptographic key. Okta can use these keys to verify the signature of a JWT when provided for the &#x60;private_key_jwt&#x60; client authentication method or for a signed authorize request object. Okta supports both RSA and Elliptic Curve (EC) keys.
    /// </summary>
    [DataContract(Name = "schemas-JsonWebKey")]
    [JsonConverter(typeof(JsonSubtypes), "Kty")]
    [JsonSubtypes.KnownSubType(typeof(JsonWebKeyEC), "EC")]
    [JsonSubtypes.KnownSubType(typeof(JsonWebKeyEC), "JsonWebKeyEC")]
    [JsonSubtypes.KnownSubType(typeof(JsonWebKeyRsa), "JsonWebKeyRsa")]
    [JsonSubtypes.KnownSubType(typeof(JsonWebKeyRsa), "RSA")]
    
    public partial class SchemasJsonWebKey : IEquatable<SchemasJsonWebKey>
    {

        /// <summary>
        /// Gets or Sets Alg
        /// </summary>
        [DataMember(Name = "alg", EmitDefaultValue = true)]
        
        public SigningAlgorithm Alg { get; set; }

        /// <summary>
        /// Gets or Sets Kty
        /// </summary>
        [DataMember(Name = "kty", EmitDefaultValue = true)]
        
        public JsonWebKeyType Kty { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        
        public JsonWebKeyStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets Use
        /// </summary>
        [DataMember(Name = "use", EmitDefaultValue = true)]
        
        public JsonWebKeyUse Use { get; set; }
        
        /// <summary>
        /// The unique identifier of the key
        /// </summary>
        /// <value>The unique identifier of the key</value>
        [DataMember(Name = "kid", EmitDefaultValue = true)]
        public string Kid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SchemasJsonWebKey {\n");
            sb.Append("  Alg: ").Append(Alg).Append("\n");
            sb.Append("  Kid: ").Append(Kid).Append("\n");
            sb.Append("  Kty: ").Append(Kty).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Use: ").Append(Use).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SchemasJsonWebKey);
        }

        /// <summary>
        /// Returns true if SchemasJsonWebKey instances are equal
        /// </summary>
        /// <param name="input">Instance of SchemasJsonWebKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchemasJsonWebKey input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Alg == input.Alg ||
                    this.Alg.Equals(input.Alg)
                ) && 
                (
                    this.Kid == input.Kid ||
                    (this.Kid != null &&
                    this.Kid.Equals(input.Kid))
                ) && 
                (
                    this.Kty == input.Kty ||
                    this.Kty.Equals(input.Kty)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Use == input.Use ||
                    this.Use.Equals(input.Use)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Alg != null)
                {
                    hashCode = (hashCode * 59) + this.Alg.GetHashCode();
                }
                if (this.Kid != null)
                {
                    hashCode = (hashCode * 59) + this.Kid.GetHashCode();
                }
                if (this.Kty != null)
                {
                    hashCode = (hashCode * 59) + this.Kty.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Use != null)
                {
                    hashCode = (hashCode * 59) + this.Use.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
