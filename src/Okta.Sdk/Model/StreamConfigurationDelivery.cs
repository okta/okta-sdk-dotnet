/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// Contains information about the intended SET delivery method by the receiver
    /// </summary>
    [DataContract(Name = "StreamConfigurationDelivery")]
    
    public partial class StreamConfigurationDelivery : IEquatable<StreamConfigurationDelivery>
    {
        /// <summary>
        /// The delivery method that the transmitter uses for delivering a SET
        /// </summary>
        /// <value>The delivery method that the transmitter uses for delivering a SET</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class MethodEnum : StringEnum
        {
            /// <summary>
            /// StringEnum HttpsSchemasOpenidNetSeceventRiscDeliveryMethodPush for value: https://schemas.openid.net/secevent/risc/delivery-method/push
            /// </summary>
            
            public static MethodEnum HttpsSchemasOpenidNetSeceventRiscDeliveryMethodPush = new MethodEnum("https://schemas.openid.net/secevent/risc/delivery-method/push");

            /// <summary>
            /// StringEnum Urnietfrfc8935 for value: urn:ietf:rfc:8935
            /// </summary>
            
            public static MethodEnum Urnietfrfc8935 = new MethodEnum("urn:ietf:rfc:8935");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="MethodEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator MethodEnum(string value) => new MethodEnum(value);

            /// <summary>
            /// Creates a new <see cref="Method"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public MethodEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// The delivery method that the transmitter uses for delivering a SET
        /// </summary>
        /// <value>The delivery method that the transmitter uses for delivering a SET</value>
        [DataMember(Name = "method", EmitDefaultValue = true)]
        
        public MethodEnum Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamConfigurationDelivery" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public StreamConfigurationDelivery() { }
        
        /// <summary>
        /// The HTTP Authorization header that is included for each HTTP POST request
        /// </summary>
        /// <value>The HTTP Authorization header that is included for each HTTP POST request</value>
        [DataMember(Name = "authorization_header", EmitDefaultValue = true)]
        public string AuthorizationHeader { get; set; }

        /// <summary>
        /// The target endpoint URL where the transmitter delivers the SET using HTTP POST requests
        /// </summary>
        /// <value>The target endpoint URL where the transmitter delivers the SET using HTTP POST requests</value>
        [DataMember(Name = "endpoint_url", EmitDefaultValue = true)]
        public string EndpointUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StreamConfigurationDelivery {\n");
            sb.Append("  AuthorizationHeader: ").Append(AuthorizationHeader).Append("\n");
            sb.Append("  EndpointUrl: ").Append(EndpointUrl).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StreamConfigurationDelivery);
        }

        /// <summary>
        /// Returns true if StreamConfigurationDelivery instances are equal
        /// </summary>
        /// <param name="input">Instance of StreamConfigurationDelivery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StreamConfigurationDelivery input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthorizationHeader == input.AuthorizationHeader ||
                    (this.AuthorizationHeader != null &&
                    this.AuthorizationHeader.Equals(input.AuthorizationHeader))
                ) && 
                (
                    this.EndpointUrl == input.EndpointUrl ||
                    (this.EndpointUrl != null &&
                    this.EndpointUrl.Equals(input.EndpointUrl))
                ) && 
                (
                    this.Method == input.Method ||
                    this.Method.Equals(input.Method)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.AuthorizationHeader != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizationHeader.GetHashCode();
                }
                if (this.EndpointUrl != null)
                {
                    hashCode = (hashCode * 59) + this.EndpointUrl.GetHashCode();
                }
                if (this.Method != null)
                {
                    hashCode = (hashCode * 59) + this.Method.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
