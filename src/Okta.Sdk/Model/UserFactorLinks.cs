/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// UserFactorLinks
    /// </summary>
    [DataContract(Name = "UserFactorLinks")]
    
    public partial class UserFactorLinks : IEquatable<UserFactorLinks>
    {
        
        /// <summary>
        /// Gets or Sets Activate
        /// </summary>
        [DataMember(Name = "activate", EmitDefaultValue = true)]
        public LinksActivateActivate Activate { get; set; }

        /// <summary>
        /// Gets or Sets Cancel
        /// </summary>
        [DataMember(Name = "cancel", EmitDefaultValue = true)]
        public LinksCancelCancel Cancel { get; set; }

        /// <summary>
        /// Gets or Sets Deactivate
        /// </summary>
        [DataMember(Name = "deactivate", EmitDefaultValue = true)]
        public LinksDeactivateDeactivate Deactivate { get; set; }

        /// <summary>
        /// Gets or Sets Enroll
        /// </summary>
        [DataMember(Name = "enroll", EmitDefaultValue = true)]
        public LinksEnrollEnroll Enroll { get; set; }

        /// <summary>
        /// Gets or Sets Factor
        /// </summary>
        [DataMember(Name = "factor", EmitDefaultValue = true)]
        public LinksFactorFactor Factor { get; set; }

        /// <summary>
        /// Gets or Sets Poll
        /// </summary>
        [DataMember(Name = "poll", EmitDefaultValue = true)]
        public LinksPollPoll Poll { get; set; }

        /// <summary>
        /// Gets or Sets Qrcode
        /// </summary>
        [DataMember(Name = "qrcode", EmitDefaultValue = true)]
        public LinksQrcodeQrcode Qrcode { get; set; }

        /// <summary>
        /// Gets or Sets Question
        /// </summary>
        [DataMember(Name = "question", EmitDefaultValue = true)]
        public LinksQuestionsQuestion Question { get; set; }

        /// <summary>
        /// Gets or Sets Resend
        /// </summary>
        [DataMember(Name = "resend", EmitDefaultValue = true)]
        public LinksResendResend Resend { get; set; }

        /// <summary>
        /// Gets or Sets Send
        /// </summary>
        [DataMember(Name = "send", EmitDefaultValue = true)]
        public LinksSendSend Send { get; set; }

        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name = "self", EmitDefaultValue = true)]
        public HrefObjectSelfLink Self { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = true)]
        public LinksUserUser User { get; set; }

        /// <summary>
        /// Gets or Sets Verify
        /// </summary>
        [DataMember(Name = "verify", EmitDefaultValue = true)]
        public LinksVerifyVerify Verify { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserFactorLinks {\n");
            sb.Append("  Activate: ").Append(Activate).Append("\n");
            sb.Append("  Cancel: ").Append(Cancel).Append("\n");
            sb.Append("  Deactivate: ").Append(Deactivate).Append("\n");
            sb.Append("  Enroll: ").Append(Enroll).Append("\n");
            sb.Append("  Factor: ").Append(Factor).Append("\n");
            sb.Append("  Poll: ").Append(Poll).Append("\n");
            sb.Append("  Qrcode: ").Append(Qrcode).Append("\n");
            sb.Append("  Question: ").Append(Question).Append("\n");
            sb.Append("  Resend: ").Append(Resend).Append("\n");
            sb.Append("  Send: ").Append(Send).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Verify: ").Append(Verify).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserFactorLinks);
        }

        /// <summary>
        /// Returns true if UserFactorLinks instances are equal
        /// </summary>
        /// <param name="input">Instance of UserFactorLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserFactorLinks input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Activate == input.Activate ||
                    (this.Activate != null &&
                    this.Activate.Equals(input.Activate))
                ) && 
                (
                    this.Cancel == input.Cancel ||
                    (this.Cancel != null &&
                    this.Cancel.Equals(input.Cancel))
                ) && 
                (
                    this.Deactivate == input.Deactivate ||
                    (this.Deactivate != null &&
                    this.Deactivate.Equals(input.Deactivate))
                ) && 
                (
                    this.Enroll == input.Enroll ||
                    (this.Enroll != null &&
                    this.Enroll.Equals(input.Enroll))
                ) && 
                (
                    this.Factor == input.Factor ||
                    (this.Factor != null &&
                    this.Factor.Equals(input.Factor))
                ) && 
                (
                    this.Poll == input.Poll ||
                    (this.Poll != null &&
                    this.Poll.Equals(input.Poll))
                ) && 
                (
                    this.Qrcode == input.Qrcode ||
                    (this.Qrcode != null &&
                    this.Qrcode.Equals(input.Qrcode))
                ) && 
                (
                    this.Question == input.Question ||
                    (this.Question != null &&
                    this.Question.Equals(input.Question))
                ) && 
                (
                    this.Resend == input.Resend ||
                    (this.Resend != null &&
                    this.Resend.Equals(input.Resend))
                ) && 
                (
                    this.Send == input.Send ||
                    (this.Send != null &&
                    this.Send.Equals(input.Send))
                ) && 
                (
                    this.Self == input.Self ||
                    (this.Self != null &&
                    this.Self.Equals(input.Self))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Verify == input.Verify ||
                    (this.Verify != null &&
                    this.Verify.Equals(input.Verify))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Activate != null)
                {
                    hashCode = (hashCode * 59) + this.Activate.GetHashCode();
                }
                if (this.Cancel != null)
                {
                    hashCode = (hashCode * 59) + this.Cancel.GetHashCode();
                }
                if (this.Deactivate != null)
                {
                    hashCode = (hashCode * 59) + this.Deactivate.GetHashCode();
                }
                if (this.Enroll != null)
                {
                    hashCode = (hashCode * 59) + this.Enroll.GetHashCode();
                }
                if (this.Factor != null)
                {
                    hashCode = (hashCode * 59) + this.Factor.GetHashCode();
                }
                if (this.Poll != null)
                {
                    hashCode = (hashCode * 59) + this.Poll.GetHashCode();
                }
                if (this.Qrcode != null)
                {
                    hashCode = (hashCode * 59) + this.Qrcode.GetHashCode();
                }
                if (this.Question != null)
                {
                    hashCode = (hashCode * 59) + this.Question.GetHashCode();
                }
                if (this.Resend != null)
                {
                    hashCode = (hashCode * 59) + this.Resend.GetHashCode();
                }
                if (this.Send != null)
                {
                    hashCode = (hashCode * 59) + this.Send.GetHashCode();
                }
                if (this.Self != null)
                {
                    hashCode = (hashCode * 59) + this.Self.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Verify != null)
                {
                    hashCode = (hashCode * 59) + this.Verify.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
