/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// The request body required for a simulate policy operation.
    /// </summary>
    [DataContract(Name = "SimulatePolicyBody")]
    
    public partial class SimulatePolicyBody : IEquatable<SimulatePolicyBody>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimulatePolicyBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SimulatePolicyBody() { }
        
        /// <summary>
        /// The application instance ID for a simulate operation
        /// </summary>
        /// <value>The application instance ID for a simulate operation</value>
        [DataMember(Name = "appInstance", EmitDefaultValue = true)]
        public string AppInstance { get; set; }

        /// <summary>
        /// Gets or Sets PolicyContext
        /// </summary>
        [DataMember(Name = "policyContext", EmitDefaultValue = true)]
        public PolicyContext PolicyContext { get; set; }

        /// <summary>
        /// Supported policy types for a simulate operation. The default value, &#x60;null&#x60;, returns all types.
        /// </summary>
        /// <value>Supported policy types for a simulate operation. The default value, &#x60;null&#x60;, returns all types.</value>
        [DataMember(Name = "policyTypes", EmitDefaultValue = true)]
        public List<PolicyType> PolicyTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SimulatePolicyBody {\n");
            sb.Append("  AppInstance: ").Append(AppInstance).Append("\n");
            sb.Append("  PolicyContext: ").Append(PolicyContext).Append("\n");
            sb.Append("  PolicyTypes: ").Append(PolicyTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimulatePolicyBody);
        }

        /// <summary>
        /// Returns true if SimulatePolicyBody instances are equal
        /// </summary>
        /// <param name="input">Instance of SimulatePolicyBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimulatePolicyBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AppInstance == input.AppInstance ||
                    (this.AppInstance != null &&
                    this.AppInstance.Equals(input.AppInstance))
                ) && 
                (
                    this.PolicyContext == input.PolicyContext ||
                    (this.PolicyContext != null &&
                    this.PolicyContext.Equals(input.PolicyContext))
                ) && 
                (
                    this.PolicyTypes == input.PolicyTypes ||
                    this.PolicyTypes != null &&
                    input.PolicyTypes != null &&
                    this.PolicyTypes.SequenceEqual(input.PolicyTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.AppInstance != null)
                {
                    hashCode = (hashCode * 59) + this.AppInstance.GetHashCode();
                }
                if (this.PolicyContext != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyContext.GetHashCode();
                }
                if (this.PolicyTypes != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyTypes.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
