/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// IdpPolicyRuleActionMatchCriteria
    /// </summary>
    [DataContract(Name = "IdpPolicyRuleActionMatchCriteria")]
    
    public partial class IdpPolicyRuleActionMatchCriteria : IEquatable<IdpPolicyRuleActionMatchCriteria>
    {
        
        /// <summary>
        /// You can provide an Okta Expression Language expression with the Login Context that&#39;s evaluated with the IdP. For example, the value &#x60;login.identifier&#x60; refers to the user&#39;s username. If the user is signing in with the username &#x60;john.doe@mycompany.com&#x60;, the expression &#x60;login.identifier.substringAfter(@))&#x60; is evaluated to the domain name of the user, for example: &#x60;mycompany.com&#x60;. 
        /// </summary>
        /// <value>You can provide an Okta Expression Language expression with the Login Context that&#39;s evaluated with the IdP. For example, the value &#x60;login.identifier&#x60; refers to the user&#39;s username. If the user is signing in with the username &#x60;john.doe@mycompany.com&#x60;, the expression &#x60;login.identifier.substringAfter(@))&#x60; is evaluated to the domain name of the user, for example: &#x60;mycompany.com&#x60;. </value>
        [DataMember(Name = "providerExpression", EmitDefaultValue = true)]
        public string ProviderExpression { get; set; }

        /// <summary>
        /// The IdP property that the evaluated string should match to
        /// </summary>
        /// <value>The IdP property that the evaluated string should match to</value>
        [DataMember(Name = "propertyName", EmitDefaultValue = true)]
        public string PropertyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdpPolicyRuleActionMatchCriteria {\n");
            sb.Append("  ProviderExpression: ").Append(ProviderExpression).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdpPolicyRuleActionMatchCriteria);
        }

        /// <summary>
        /// Returns true if IdpPolicyRuleActionMatchCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of IdpPolicyRuleActionMatchCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdpPolicyRuleActionMatchCriteria input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProviderExpression == input.ProviderExpression ||
                    (this.ProviderExpression != null &&
                    this.ProviderExpression.Equals(input.ProviderExpression))
                ) && 
                (
                    this.PropertyName == input.PropertyName ||
                    (this.PropertyName != null &&
                    this.PropertyName.Equals(input.PropertyName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.ProviderExpression != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderExpression.GetHashCode();
                }
                if (this.PropertyName != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyName.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
