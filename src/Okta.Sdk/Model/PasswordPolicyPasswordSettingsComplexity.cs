/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// PasswordPolicyPasswordSettingsComplexity
    /// </summary>
    [DataContract(Name = "PasswordPolicyPasswordSettingsComplexity")]
    
    public partial class PasswordPolicyPasswordSettingsComplexity : IEquatable<PasswordPolicyPasswordSettingsComplexity>
    {
        
        /// <summary>
        /// Gets or Sets Dictionary
        /// </summary>
        [DataMember(Name = "dictionary", EmitDefaultValue = false)]
        public PasswordDictionary Dictionary { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeAttributes
        /// </summary>
        [DataMember(Name = "excludeAttributes", EmitDefaultValue = false)]
        public List<string> ExcludeAttributes { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeUsername
        /// </summary>
        [DataMember(Name = "excludeUsername", EmitDefaultValue = true)]
        public bool ExcludeUsername { get; set; }

        /// <summary>
        /// Gets or Sets MinLength
        /// </summary>
        [DataMember(Name = "minLength", EmitDefaultValue = false)]
        public int MinLength { get; set; }

        /// <summary>
        /// Gets or Sets MinLowerCase
        /// </summary>
        [DataMember(Name = "minLowerCase", EmitDefaultValue = false)]
        public int MinLowerCase { get; set; }

        /// <summary>
        /// Gets or Sets MinNumber
        /// </summary>
        [DataMember(Name = "minNumber", EmitDefaultValue = false)]
        public int MinNumber { get; set; }

        /// <summary>
        /// Gets or Sets MinSymbol
        /// </summary>
        [DataMember(Name = "minSymbol", EmitDefaultValue = false)]
        public int MinSymbol { get; set; }

        /// <summary>
        /// Gets or Sets MinUpperCase
        /// </summary>
        [DataMember(Name = "minUpperCase", EmitDefaultValue = false)]
        public int MinUpperCase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PasswordPolicyPasswordSettingsComplexity {\n");
            sb.Append("  Dictionary: ").Append(Dictionary).Append("\n");
            sb.Append("  ExcludeAttributes: ").Append(ExcludeAttributes).Append("\n");
            sb.Append("  ExcludeUsername: ").Append(ExcludeUsername).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  MinLowerCase: ").Append(MinLowerCase).Append("\n");
            sb.Append("  MinNumber: ").Append(MinNumber).Append("\n");
            sb.Append("  MinSymbol: ").Append(MinSymbol).Append("\n");
            sb.Append("  MinUpperCase: ").Append(MinUpperCase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PasswordPolicyPasswordSettingsComplexity);
        }

        /// <summary>
        /// Returns true if PasswordPolicyPasswordSettingsComplexity instances are equal
        /// </summary>
        /// <param name="input">Instance of PasswordPolicyPasswordSettingsComplexity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PasswordPolicyPasswordSettingsComplexity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Dictionary == input.Dictionary ||
                    (this.Dictionary != null &&
                    this.Dictionary.Equals(input.Dictionary))
                ) && 
                (
                    this.ExcludeAttributes == input.ExcludeAttributes ||
                    this.ExcludeAttributes != null &&
                    input.ExcludeAttributes != null &&
                    this.ExcludeAttributes.SequenceEqual(input.ExcludeAttributes)
                ) && 
                (
                    this.ExcludeUsername == input.ExcludeUsername ||
                    this.ExcludeUsername.Equals(input.ExcludeUsername)
                ) && 
                (
                    this.MinLength == input.MinLength ||
                    this.MinLength.Equals(input.MinLength)
                ) && 
                (
                    this.MinLowerCase == input.MinLowerCase ||
                    this.MinLowerCase.Equals(input.MinLowerCase)
                ) && 
                (
                    this.MinNumber == input.MinNumber ||
                    this.MinNumber.Equals(input.MinNumber)
                ) && 
                (
                    this.MinSymbol == input.MinSymbol ||
                    this.MinSymbol.Equals(input.MinSymbol)
                ) && 
                (
                    this.MinUpperCase == input.MinUpperCase ||
                    this.MinUpperCase.Equals(input.MinUpperCase)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Dictionary != null)
                {
                    hashCode = (hashCode * 59) + this.Dictionary.GetHashCode();
                }
                if (this.ExcludeAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.ExcludeAttributes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExcludeUsername.GetHashCode();
                hashCode = (hashCode * 59) + this.MinLength.GetHashCode();
                hashCode = (hashCode * 59) + this.MinLowerCase.GetHashCode();
                hashCode = (hashCode * 59) + this.MinNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.MinSymbol.GetHashCode();
                hashCode = (hashCode * 59) + this.MinUpperCase.GetHashCode();
                return hashCode;
            }
        }

    }

}
