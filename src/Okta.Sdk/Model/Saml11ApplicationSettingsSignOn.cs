/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// SAML 1.1 sign-on mode attributes
    /// </summary>
    [DataContract(Name = "Saml11ApplicationSettingsSignOn")]
    
    public partial class Saml11ApplicationSettingsSignOn : IEquatable<Saml11ApplicationSettingsSignOn>
    {
        
        /// <summary>
        /// The intended audience of the SAML assertion. This is usually the Entity ID of your application.
        /// </summary>
        /// <value>The intended audience of the SAML assertion. This is usually the Entity ID of your application.</value>
        [DataMember(Name = "audienceOverride", EmitDefaultValue = true)]
        public string AudienceOverride { get; set; }

        /// <summary>
        /// The URL of the resource to direct users after they successfully sign in to the SP using SAML. See the SP documentation to check if you need to specify a RelayState. In most instances, you can leave this field blank.
        /// </summary>
        /// <value>The URL of the resource to direct users after they successfully sign in to the SP using SAML. See the SP documentation to check if you need to specify a RelayState. In most instances, you can leave this field blank.</value>
        [DataMember(Name = "defaultRelayState", EmitDefaultValue = true)]
        public string DefaultRelayState { get; set; }

        /// <summary>
        /// The location where the application can present the SAML assertion. This is usually the Single Sign-On (SSO) URL.
        /// </summary>
        /// <value>The location where the application can present the SAML assertion. This is usually the Single Sign-On (SSO) URL.</value>
        [DataMember(Name = "recipientOverride", EmitDefaultValue = true)]
        public string RecipientOverride { get; set; }

        /// <summary>
        /// Assertion Consumer Services (ACS) URL value for the Service Provider (SP). This URL is always used for Identity Provider (IdP) initiated sign-on requests.
        /// </summary>
        /// <value>Assertion Consumer Services (ACS) URL value for the Service Provider (SP). This URL is always used for Identity Provider (IdP) initiated sign-on requests.</value>
        [DataMember(Name = "ssoAcsUrlOverride", EmitDefaultValue = true)]
        public string SsoAcsUrlOverride { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Saml11ApplicationSettingsSignOn {\n");
            sb.Append("  AudienceOverride: ").Append(AudienceOverride).Append("\n");
            sb.Append("  DefaultRelayState: ").Append(DefaultRelayState).Append("\n");
            sb.Append("  RecipientOverride: ").Append(RecipientOverride).Append("\n");
            sb.Append("  SsoAcsUrlOverride: ").Append(SsoAcsUrlOverride).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Saml11ApplicationSettingsSignOn);
        }

        /// <summary>
        /// Returns true if Saml11ApplicationSettingsSignOn instances are equal
        /// </summary>
        /// <param name="input">Instance of Saml11ApplicationSettingsSignOn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Saml11ApplicationSettingsSignOn input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AudienceOverride == input.AudienceOverride ||
                    (this.AudienceOverride != null &&
                    this.AudienceOverride.Equals(input.AudienceOverride))
                ) && 
                (
                    this.DefaultRelayState == input.DefaultRelayState ||
                    (this.DefaultRelayState != null &&
                    this.DefaultRelayState.Equals(input.DefaultRelayState))
                ) && 
                (
                    this.RecipientOverride == input.RecipientOverride ||
                    (this.RecipientOverride != null &&
                    this.RecipientOverride.Equals(input.RecipientOverride))
                ) && 
                (
                    this.SsoAcsUrlOverride == input.SsoAcsUrlOverride ||
                    (this.SsoAcsUrlOverride != null &&
                    this.SsoAcsUrlOverride.Equals(input.SsoAcsUrlOverride))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.AudienceOverride != null)
                {
                    hashCode = (hashCode * 59) + this.AudienceOverride.GetHashCode();
                }
                if (this.DefaultRelayState != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultRelayState.GetHashCode();
                }
                if (this.RecipientOverride != null)
                {
                    hashCode = (hashCode * 59) + this.RecipientOverride.GetHashCode();
                }
                if (this.SsoAcsUrlOverride != null)
                {
                    hashCode = (hashCode * 59) + this.SsoAcsUrlOverride.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
