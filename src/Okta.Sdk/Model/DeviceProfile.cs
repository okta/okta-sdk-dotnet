/*
 * Okta Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// DeviceProfile
    /// </summary>
    [DataContract(Name = "DeviceProfile")]
    
    public partial class DeviceProfile : IEquatable<DeviceProfile>
    {

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", IsRequired = true, EmitDefaultValue = false)]
        
        public DevicePlatform Platform { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceProfile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public DeviceProfile() { }
        
        /// <summary>
        /// Display name of the device
        /// </summary>
        /// <value>Display name of the device</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// International Mobile Equipment Identity of the device
        /// </summary>
        /// <value>International Mobile Equipment Identity of the device</value>
        [DataMember(Name = "imei", EmitDefaultValue = false)]
        public string Imei { get; set; }

        /// <summary>
        /// Name of the manufacturer of the device
        /// </summary>
        /// <value>Name of the manufacturer of the device</value>
        [DataMember(Name = "manufacturer", EmitDefaultValue = false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Mobile equipment identifier of the device
        /// </summary>
        /// <value>Mobile equipment identifier of the device</value>
        [DataMember(Name = "meid", EmitDefaultValue = false)]
        public string Meid { get; set; }

        /// <summary>
        /// Model of the device
        /// </summary>
        /// <value>Model of the device</value>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// Version of the device OS
        /// </summary>
        /// <value>Version of the device OS</value>
        [DataMember(Name = "osVersion", EmitDefaultValue = false)]
        public string OsVersion { get; set; }

        /// <summary>
        /// Indicates if the device is registered at Okta
        /// </summary>
        /// <value>Indicates if the device is registered at Okta</value>
        [DataMember(Name = "registered", IsRequired = true, EmitDefaultValue = true)]
        public bool Registered { get; set; }

        /// <summary>
        /// Indicates if the device constains a secure hardware functionality
        /// </summary>
        /// <value>Indicates if the device constains a secure hardware functionality</value>
        [DataMember(Name = "secureHardwarePresent", EmitDefaultValue = true)]
        public bool SecureHardwarePresent { get; set; }

        /// <summary>
        /// Serial number of the device
        /// </summary>
        /// <value>Serial number of the device</value>
        [DataMember(Name = "serialNumber", EmitDefaultValue = false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Windows Security identifier of the device
        /// </summary>
        /// <value>Windows Security identifier of the device</value>
        [DataMember(Name = "sid", EmitDefaultValue = false)]
        public string Sid { get; set; }

        /// <summary>
        /// Windows Trsted Platform Module hash value
        /// </summary>
        /// <value>Windows Trsted Platform Module hash value</value>
        [DataMember(Name = "tpmPublicKeyHash", EmitDefaultValue = false)]
        public string TpmPublicKeyHash { get; set; }

        /// <summary>
        /// macOS Unique Device identifier of the device
        /// </summary>
        /// <value>macOS Unique Device identifier of the device</value>
        [DataMember(Name = "udid", EmitDefaultValue = false)]
        public string Udid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeviceProfile {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Imei: ").Append(Imei).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Meid: ").Append(Meid).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  OsVersion: ").Append(OsVersion).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Registered: ").Append(Registered).Append("\n");
            sb.Append("  SecureHardwarePresent: ").Append(SecureHardwarePresent).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  Sid: ").Append(Sid).Append("\n");
            sb.Append("  TpmPublicKeyHash: ").Append(TpmPublicKeyHash).Append("\n");
            sb.Append("  Udid: ").Append(Udid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceProfile);
        }

        /// <summary>
        /// Returns true if DeviceProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceProfile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Imei == input.Imei ||
                    (this.Imei != null &&
                    this.Imei.Equals(input.Imei))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.Meid == input.Meid ||
                    (this.Meid != null &&
                    this.Meid.Equals(input.Meid))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.OsVersion == input.OsVersion ||
                    (this.OsVersion != null &&
                    this.OsVersion.Equals(input.OsVersion))
                ) && 
                (
                    this.Platform == input.Platform ||
                    this.Platform.Equals(input.Platform)
                ) && 
                (
                    this.Registered == input.Registered ||
                    this.Registered.Equals(input.Registered)
                ) && 
                (
                    this.SecureHardwarePresent == input.SecureHardwarePresent ||
                    this.SecureHardwarePresent.Equals(input.SecureHardwarePresent)
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.Sid == input.Sid ||
                    (this.Sid != null &&
                    this.Sid.Equals(input.Sid))
                ) && 
                (
                    this.TpmPublicKeyHash == input.TpmPublicKeyHash ||
                    (this.TpmPublicKeyHash != null &&
                    this.TpmPublicKeyHash.Equals(input.TpmPublicKeyHash))
                ) && 
                (
                    this.Udid == input.Udid ||
                    (this.Udid != null &&
                    this.Udid.Equals(input.Udid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Imei != null)
                {
                    hashCode = (hashCode * 59) + this.Imei.GetHashCode();
                }
                if (this.Manufacturer != null)
                {
                    hashCode = (hashCode * 59) + this.Manufacturer.GetHashCode();
                }
                if (this.Meid != null)
                {
                    hashCode = (hashCode * 59) + this.Meid.GetHashCode();
                }
                if (this.Model != null)
                {
                    hashCode = (hashCode * 59) + this.Model.GetHashCode();
                }
                if (this.OsVersion != null)
                {
                    hashCode = (hashCode * 59) + this.OsVersion.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Platform.GetHashCode();
                hashCode = (hashCode * 59) + this.Registered.GetHashCode();
                hashCode = (hashCode * 59) + this.SecureHardwarePresent.GetHashCode();
                if (this.SerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNumber.GetHashCode();
                }
                if (this.Sid != null)
                {
                    hashCode = (hashCode * 59) + this.Sid.GetHashCode();
                }
                if (this.TpmPublicKeyHash != null)
                {
                    hashCode = (hashCode * 59) + this.TpmPublicKeyHash.GetHashCode();
                }
                if (this.Udid != null)
                {
                    hashCode = (hashCode * 59) + this.Udid.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
