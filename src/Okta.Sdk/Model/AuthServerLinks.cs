/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// AuthServerLinks
    /// </summary>
    [DataContract(Name = "AuthServerLinks")]
    
    public partial class AuthServerLinks : IEquatable<AuthServerLinks>
    {
        
        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name = "self", EmitDefaultValue = true)]
        public HrefObjectSelfLink Self { get; set; }

        /// <summary>
        /// Gets or Sets Claims
        /// </summary>
        [DataMember(Name = "claims", EmitDefaultValue = true)]
        public Object Claims { get; set; }

        /// <summary>
        /// Gets or Sets Deactivate
        /// </summary>
        [DataMember(Name = "deactivate", EmitDefaultValue = true)]
        public HrefObjectDeactivateLink Deactivate { get; set; }

        /// <summary>
        /// Link to the authorization server metadata
        /// </summary>
        /// <value>Link to the authorization server metadata</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public List<HrefObject> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Policies
        /// </summary>
        [DataMember(Name = "policies", EmitDefaultValue = true)]
        public Object Policies { get; set; }

        /// <summary>
        /// Gets or Sets RotateKey
        /// </summary>
        [DataMember(Name = "rotateKey", EmitDefaultValue = true)]
        public Object RotateKey { get; set; }

        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        [DataMember(Name = "scopes", EmitDefaultValue = true)]
        public Object Scopes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthServerLinks {\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Claims: ").Append(Claims).Append("\n");
            sb.Append("  Deactivate: ").Append(Deactivate).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Policies: ").Append(Policies).Append("\n");
            sb.Append("  RotateKey: ").Append(RotateKey).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthServerLinks);
        }

        /// <summary>
        /// Returns true if AuthServerLinks instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthServerLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthServerLinks input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Self == input.Self ||
                    (this.Self != null &&
                    this.Self.Equals(input.Self))
                ) && 
                (
                    this.Claims == input.Claims ||
                    (this.Claims != null &&
                    this.Claims.Equals(input.Claims))
                ) && 
                (
                    this.Deactivate == input.Deactivate ||
                    (this.Deactivate != null &&
                    this.Deactivate.Equals(input.Deactivate))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Policies == input.Policies ||
                    (this.Policies != null &&
                    this.Policies.Equals(input.Policies))
                ) && 
                (
                    this.RotateKey == input.RotateKey ||
                    (this.RotateKey != null &&
                    this.RotateKey.Equals(input.RotateKey))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    (this.Scopes != null &&
                    this.Scopes.Equals(input.Scopes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Self != null)
                {
                    hashCode = (hashCode * 59) + this.Self.GetHashCode();
                }
                if (this.Claims != null)
                {
                    hashCode = (hashCode * 59) + this.Claims.GetHashCode();
                }
                if (this.Deactivate != null)
                {
                    hashCode = (hashCode * 59) + this.Deactivate.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.Policies != null)
                {
                    hashCode = (hashCode * 59) + this.Policies.GetHashCode();
                }
                if (this.RotateKey != null)
                {
                    hashCode = (hashCode * 59) + this.RotateKey.GetHashCode();
                }
                if (this.Scopes != null)
                {
                    hashCode = (hashCode * 59) + this.Scopes.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
