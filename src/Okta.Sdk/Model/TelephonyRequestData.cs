/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// TelephonyRequestData
    /// </summary>
    [DataContract(Name = "TelephonyRequestData")]
    
    public partial class TelephonyRequestData : IEquatable<TelephonyRequestData>
    {
        
        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "context", EmitDefaultValue = true)]
        public TelephonyRequestDataContext Context { get; set; }

        /// <summary>
        /// Gets or Sets MessageProfile
        /// </summary>
        [DataMember(Name = "messageProfile", EmitDefaultValue = true)]
        public TelephonyRequestDataMessageProfile MessageProfile { get; set; }

        /// <summary>
        /// Gets or Sets UserProfile
        /// </summary>
        [DataMember(Name = "userProfile", EmitDefaultValue = true)]
        public TelephonyRequestDataUserProfile UserProfile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TelephonyRequestData {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  MessageProfile: ").Append(MessageProfile).Append("\n");
            sb.Append("  UserProfile: ").Append(UserProfile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TelephonyRequestData);
        }

        /// <summary>
        /// Returns true if TelephonyRequestData instances are equal
        /// </summary>
        /// <param name="input">Instance of TelephonyRequestData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TelephonyRequestData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.MessageProfile == input.MessageProfile ||
                    (this.MessageProfile != null &&
                    this.MessageProfile.Equals(input.MessageProfile))
                ) && 
                (
                    this.UserProfile == input.UserProfile ||
                    (this.UserProfile != null &&
                    this.UserProfile.Equals(input.UserProfile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Context != null)
                {
                    hashCode = (hashCode * 59) + this.Context.GetHashCode();
                }
                if (this.MessageProfile != null)
                {
                    hashCode = (hashCode * 59) + this.MessageProfile.GetHashCode();
                }
                if (this.UserProfile != null)
                {
                    hashCode = (hashCode * 59) + this.UserProfile.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
