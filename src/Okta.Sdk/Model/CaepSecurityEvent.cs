/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.06.1
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// CaepSecurityEvent
    /// </summary>
    [DataContract(Name = "CaepSecurityEvent")]
    
    public partial class CaepSecurityEvent : IEquatable<CaepSecurityEvent>
    {
        /// <summary>
        /// The entity that initiated the event
        /// </summary>
        /// <value>The entity that initiated the event</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class InitiatingEntityEnum : StringEnum
        {
            /// <summary>
            /// StringEnum Admin for value: admin
            /// </summary>
            
            public static InitiatingEntityEnum Admin = new InitiatingEntityEnum("admin");

            /// <summary>
            /// StringEnum User for value: user
            /// </summary>
            
            public static InitiatingEntityEnum User = new InitiatingEntityEnum("user");

            /// <summary>
            /// StringEnum Policy for value: policy
            /// </summary>
            
            public static InitiatingEntityEnum Policy = new InitiatingEntityEnum("policy");

            /// <summary>
            /// StringEnum System for value: system
            /// </summary>
            
            public static InitiatingEntityEnum System = new InitiatingEntityEnum("system");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="InitiatingEntityEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator InitiatingEntityEnum(string value) => new InitiatingEntityEnum(value);

            /// <summary>
            /// Creates a new <see cref="InitiatingEntity"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public InitiatingEntityEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// The entity that initiated the event
        /// </summary>
        /// <value>The entity that initiated the event</value>
        [DataMember(Name = "initiating_entity", EmitDefaultValue = true)]
        
        public InitiatingEntityEnum InitiatingEntity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CaepSecurityEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public CaepSecurityEvent() { }
        
        /// <summary>
        /// The time of the event (UNIX timestamp)
        /// </summary>
        /// <value>The time of the event (UNIX timestamp)</value>
        [DataMember(Name = "event_timestamp", EmitDefaultValue = true)]
        public long EventTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets ReasonAdmin
        /// </summary>
        [DataMember(Name = "reason_admin", EmitDefaultValue = true)]
        public CaepDeviceComplianceChangeEventReasonAdmin ReasonAdmin { get; set; }

        /// <summary>
        /// Gets or Sets ReasonUser
        /// </summary>
        [DataMember(Name = "reason_user", EmitDefaultValue = true)]
        public CaepDeviceComplianceChangeEventReasonUser ReasonUser { get; set; }

        /// <summary>
        /// Gets or Sets Subjects
        /// </summary>
        [DataMember(Name = "subjects", EmitDefaultValue = true)]
        public SecurityEventSubject Subjects { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CaepSecurityEvent {\n");
            sb.Append("  EventTimestamp: ").Append(EventTimestamp).Append("\n");
            sb.Append("  InitiatingEntity: ").Append(InitiatingEntity).Append("\n");
            sb.Append("  ReasonAdmin: ").Append(ReasonAdmin).Append("\n");
            sb.Append("  ReasonUser: ").Append(ReasonUser).Append("\n");
            sb.Append("  Subjects: ").Append(Subjects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CaepSecurityEvent);
        }

        /// <summary>
        /// Returns true if CaepSecurityEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of CaepSecurityEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CaepSecurityEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventTimestamp == input.EventTimestamp ||
                    this.EventTimestamp.Equals(input.EventTimestamp)
                ) && 
                (
                    this.InitiatingEntity == input.InitiatingEntity ||
                    this.InitiatingEntity.Equals(input.InitiatingEntity)
                ) && 
                (
                    this.ReasonAdmin == input.ReasonAdmin ||
                    (this.ReasonAdmin != null &&
                    this.ReasonAdmin.Equals(input.ReasonAdmin))
                ) && 
                (
                    this.ReasonUser == input.ReasonUser ||
                    (this.ReasonUser != null &&
                    this.ReasonUser.Equals(input.ReasonUser))
                ) && 
                (
                    this.Subjects == input.Subjects ||
                    (this.Subjects != null &&
                    this.Subjects.Equals(input.Subjects))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                hashCode = (hashCode * 59) + this.EventTimestamp.GetHashCode();
                if (this.InitiatingEntity != null)
                {
                    hashCode = (hashCode * 59) + this.InitiatingEntity.GetHashCode();
                }
                if (this.ReasonAdmin != null)
                {
                    hashCode = (hashCode * 59) + this.ReasonAdmin.GetHashCode();
                }
                if (this.ReasonUser != null)
                {
                    hashCode = (hashCode * 59) + this.ReasonUser.GetHashCode();
                }
                if (this.Subjects != null)
                {
                    hashCode = (hashCode * 59) + this.Subjects.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
