/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// VerifyFactorRequest
    /// </summary>
    [DataContract(Name = "VerifyFactorRequest")]
    public partial class VerifyFactorRequest : IEquatable<VerifyFactorRequest>
    {
        
        /// <summary>
        /// Gets or Sets ActivationToken
        /// </summary>
        [DataMember(Name = "activationToken", EmitDefaultValue = false)]
        public string ActivationToken { get; set; }

        /// <summary>
        /// Gets or Sets Answer
        /// </summary>
        [DataMember(Name = "answer", EmitDefaultValue = false)]
        public string Answer { get; set; }

        /// <summary>
        /// Gets or Sets Attestation
        /// </summary>
        [DataMember(Name = "attestation", EmitDefaultValue = false)]
        public string Attestation { get; set; }

        /// <summary>
        /// Gets or Sets ClientData
        /// </summary>
        [DataMember(Name = "clientData", EmitDefaultValue = false)]
        public string ClientData { get; set; }

        /// <summary>
        /// Gets or Sets NextPassCode
        /// </summary>
        [DataMember(Name = "nextPassCode", EmitDefaultValue = false)]
        public string NextPassCode { get; set; }

        /// <summary>
        /// Gets or Sets PassCode
        /// </summary>
        [DataMember(Name = "passCode", EmitDefaultValue = false)]
        public string PassCode { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationData
        /// </summary>
        [DataMember(Name = "registrationData", EmitDefaultValue = false)]
        public string RegistrationData { get; set; }

        /// <summary>
        /// Gets or Sets StateToken
        /// </summary>
        [DataMember(Name = "stateToken", EmitDefaultValue = false)]
        public string StateToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifyFactorRequest {\n");
            sb.Append("  ActivationToken: ").Append(ActivationToken).Append("\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  Attestation: ").Append(Attestation).Append("\n");
            sb.Append("  ClientData: ").Append(ClientData).Append("\n");
            sb.Append("  NextPassCode: ").Append(NextPassCode).Append("\n");
            sb.Append("  PassCode: ").Append(PassCode).Append("\n");
            sb.Append("  RegistrationData: ").Append(RegistrationData).Append("\n");
            sb.Append("  StateToken: ").Append(StateToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifyFactorRequest);
        }

        /// <summary>
        /// Returns true if VerifyFactorRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifyFactorRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyFactorRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ActivationToken == input.ActivationToken ||
                    (this.ActivationToken != null &&
                    this.ActivationToken.Equals(input.ActivationToken))
                ) && 
                (
                    this.Answer == input.Answer ||
                    (this.Answer != null &&
                    this.Answer.Equals(input.Answer))
                ) && 
                (
                    this.Attestation == input.Attestation ||
                    (this.Attestation != null &&
                    this.Attestation.Equals(input.Attestation))
                ) && 
                (
                    this.ClientData == input.ClientData ||
                    (this.ClientData != null &&
                    this.ClientData.Equals(input.ClientData))
                ) && 
                (
                    this.NextPassCode == input.NextPassCode ||
                    (this.NextPassCode != null &&
                    this.NextPassCode.Equals(input.NextPassCode))
                ) && 
                (
                    this.PassCode == input.PassCode ||
                    (this.PassCode != null &&
                    this.PassCode.Equals(input.PassCode))
                ) && 
                (
                    this.RegistrationData == input.RegistrationData ||
                    (this.RegistrationData != null &&
                    this.RegistrationData.Equals(input.RegistrationData))
                ) && 
                (
                    this.StateToken == input.StateToken ||
                    (this.StateToken != null &&
                    this.StateToken.Equals(input.StateToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivationToken != null)
                {
                    hashCode = (hashCode * 59) + this.ActivationToken.GetHashCode();
                }
                if (this.Answer != null)
                {
                    hashCode = (hashCode * 59) + this.Answer.GetHashCode();
                }
                if (this.Attestation != null)
                {
                    hashCode = (hashCode * 59) + this.Attestation.GetHashCode();
                }
                if (this.ClientData != null)
                {
                    hashCode = (hashCode * 59) + this.ClientData.GetHashCode();
                }
                if (this.NextPassCode != null)
                {
                    hashCode = (hashCode * 59) + this.NextPassCode.GetHashCode();
                }
                if (this.PassCode != null)
                {
                    hashCode = (hashCode * 59) + this.PassCode.GetHashCode();
                }
                if (this.RegistrationData != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationData.GetHashCode();
                }
                if (this.StateToken != null)
                {
                    hashCode = (hashCode * 59) + this.StateToken.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
