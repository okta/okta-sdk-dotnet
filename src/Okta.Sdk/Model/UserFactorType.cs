/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Type of Factor
    /// </summary>
    /// <value>Type of Factor</value>
    [JsonConverter(typeof(StringEnumSerializingConverter))]
    public sealed class UserFactorType : StringEnum
    {
        /// <summary>
        /// StringEnum UserFactorType for value: call
        /// </summary>
        public static UserFactorType Call = new UserFactorType("call");
        /// <summary>
        /// StringEnum UserFactorType for value: email
        /// </summary>
        public static UserFactorType Email = new UserFactorType("email");
        /// <summary>
        /// StringEnum UserFactorType for value: push
        /// </summary>
        public static UserFactorType Push = new UserFactorType("push");
        /// <summary>
        /// StringEnum UserFactorType for value: question
        /// </summary>
        public static UserFactorType Question = new UserFactorType("question");
        /// <summary>
        /// StringEnum UserFactorType for value: signed_nonce
        /// </summary>
        public static UserFactorType SignedNonce = new UserFactorType("signed_nonce");
        /// <summary>
        /// StringEnum UserFactorType for value: sms
        /// </summary>
        public static UserFactorType Sms = new UserFactorType("sms");
        /// <summary>
        /// StringEnum UserFactorType for value: token
        /// </summary>
        public static UserFactorType Token = new UserFactorType("token");
        /// <summary>
        /// StringEnum UserFactorType for value: token:hardware
        /// </summary>
        public static UserFactorType Tokenhardware = new UserFactorType("token:hardware");
        /// <summary>
        /// StringEnum UserFactorType for value: token:hotp
        /// </summary>
        public static UserFactorType Tokenhotp = new UserFactorType("token:hotp");
        /// <summary>
        /// StringEnum UserFactorType for value: token:software:totp
        /// </summary>
        public static UserFactorType Tokensoftwaretotp = new UserFactorType("token:software:totp");
        /// <summary>
        /// StringEnum UserFactorType for value: u2f
        /// </summary>
        public static UserFactorType U2f = new UserFactorType("u2f");
        /// <summary>
        /// StringEnum UserFactorType for value: web
        /// </summary>
        public static UserFactorType Web = new UserFactorType("web");
        /// <summary>
        /// StringEnum UserFactorType for value: webauthn
        /// </summary>
        public static UserFactorType Webauthn = new UserFactorType("webauthn");

        /// <summary>
        /// Implicit operator declaration to accept and convert a string value as a <see cref="UserFactorType"/>
        /// </summary>
        /// <param name="value">The value to use</param>
        public static implicit operator UserFactorType(string value) => new UserFactorType(value);

        /// <summary>
        /// Creates a new <see cref="UserFactorType"/> instance.
        /// </summary>
        /// <param name="value">The value to use.</param>
        public UserFactorType(string value)
            : base(value)
        {
        }
    }


}
