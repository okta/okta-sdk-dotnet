/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// PolicyContext
    /// </summary>
    [DataContract(Name = "PolicyContext")]
    
    public partial class PolicyContext : IEquatable<PolicyContext>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyContext" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PolicyContext() { }
        
        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name = "device", EmitDefaultValue = true)]
        public PolicyContextDevice Device { get; set; }

        /// <summary>
        /// An array of Group IDs for the simulate operation. Only user IDs or Group IDs are allowed, not both.
        /// </summary>
        /// <value>An array of Group IDs for the simulate operation. Only user IDs or Group IDs are allowed, not both.</value>
        [DataMember(Name = "groups", EmitDefaultValue = true)]
        public Object Groups { get; set; }

        /// <summary>
        /// The network rule condition, zone, or IP address
        /// </summary>
        /// <value>The network rule condition, zone, or IP address</value>
        [DataMember(Name = "ip", EmitDefaultValue = true)]
        public string Ip { get; set; }

        /// <summary>
        /// Gets or Sets Risk
        /// </summary>
        [DataMember(Name = "risk", EmitDefaultValue = true)]
        public PolicyContextRisk Risk { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = true)]
        public PolicyContextUser User { get; set; }

        /// <summary>
        /// Gets or Sets Zones
        /// </summary>
        [DataMember(Name = "zones", EmitDefaultValue = true)]
        public PolicyContextZones Zones { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PolicyContext {\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Risk: ").Append(Risk).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Zones: ").Append(Zones).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolicyContext);
        }

        /// <summary>
        /// Returns true if PolicyContext instances are equal
        /// </summary>
        /// <param name="input">Instance of PolicyContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyContext input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Device == input.Device ||
                    (this.Device != null &&
                    this.Device.Equals(input.Device))
                ) && 
                (
                    this.Groups == input.Groups ||
                    (this.Groups != null &&
                    this.Groups.Equals(input.Groups))
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.Risk == input.Risk ||
                    (this.Risk != null &&
                    this.Risk.Equals(input.Risk))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Zones == input.Zones ||
                    (this.Zones != null &&
                    this.Zones.Equals(input.Zones))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Device != null)
                {
                    hashCode = (hashCode * 59) + this.Device.GetHashCode();
                }
                if (this.Groups != null)
                {
                    hashCode = (hashCode * 59) + this.Groups.GetHashCode();
                }
                if (this.Ip != null)
                {
                    hashCode = (hashCode * 59) + this.Ip.GetHashCode();
                }
                if (this.Risk != null)
                {
                    hashCode = (hashCode * 59) + this.Risk.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Zones != null)
                {
                    hashCode = (hashCode * 59) + this.Zones.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
