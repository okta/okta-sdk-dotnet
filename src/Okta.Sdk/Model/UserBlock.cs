/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// The description of the access block
    /// </summary>
    [DataContract(Name = "UserBlock")]
    
    public partial class UserBlock : IEquatable<UserBlock>
    {
        /// <summary>
        /// The devices that the block applies to
        /// </summary>
        /// <value>The devices that the block applies to</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class AppliesToEnum : StringEnum
        {
            /// <summary>
            /// StringEnum ANYDEVICES for value: ANY_DEVICES
            /// </summary>
            
            public static AppliesToEnum ANYDEVICES = new AppliesToEnum("ANY_DEVICES");

            /// <summary>
            /// StringEnum UNKNOWNDEVICES for value: UNKNOWN_DEVICES
            /// </summary>
            
            public static AppliesToEnum UNKNOWNDEVICES = new AppliesToEnum("UNKNOWN_DEVICES");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="AppliesToEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator AppliesToEnum(string value) => new AppliesToEnum(value);

            /// <summary>
            /// Creates a new <see cref="AppliesTo"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public AppliesToEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// The devices that the block applies to
        /// </summary>
        /// <value>The devices that the block applies to</value>
        [DataMember(Name = "appliesTo", EmitDefaultValue = true)]
        
        public AppliesToEnum AppliesTo { get; set; }

        /// <summary>
        /// Returns false as AppliesTo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAppliesTo()
        {
            return false;
        }
        /// <summary>
        /// Type of access block
        /// </summary>
        /// <value>Type of access block</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class TypeEnum : StringEnum
        {
            /// <summary>
            /// StringEnum DEVICEBASED for value: DEVICE_BASED
            /// </summary>
            
            public static TypeEnum DEVICEBASED = new TypeEnum("DEVICE_BASED");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="TypeEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator TypeEnum(string value) => new TypeEnum(value);

            /// <summary>
            /// Creates a new <see cref="Type"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public TypeEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// Type of access block
        /// </summary>
        /// <value>Type of access block</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return false;
        }
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserBlock {\n");
            sb.Append("  AppliesTo: ").Append(AppliesTo).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserBlock);
        }

        /// <summary>
        /// Returns true if UserBlock instances are equal
        /// </summary>
        /// <param name="input">Instance of UserBlock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserBlock input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AppliesTo == input.AppliesTo ||
                    this.AppliesTo.Equals(input.AppliesTo)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.AppliesTo != null)
                {
                    hashCode = (hashCode * 59) + this.AppliesTo.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
