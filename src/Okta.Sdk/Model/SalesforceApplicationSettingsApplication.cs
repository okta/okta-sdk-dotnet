/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// Salesforce app instance properties
    /// </summary>
    [DataContract(Name = "SalesforceApplicationSettingsApplication")]
    
    public partial class SalesforceApplicationSettingsApplication : IEquatable<SalesforceApplicationSettingsApplication>
    {
        /// <summary>
        /// Salesforce instance that you want to connect to
        /// </summary>
        /// <value>Salesforce instance that you want to connect to</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class InstanceTypeEnum : StringEnum
        {
            /// <summary>
            /// StringEnum SANDBOX for value: SANDBOX
            /// </summary>
            
            public static InstanceTypeEnum SANDBOX = new InstanceTypeEnum("SANDBOX");

            /// <summary>
            /// StringEnum PRODUCTION for value: PRODUCTION
            /// </summary>
            
            public static InstanceTypeEnum PRODUCTION = new InstanceTypeEnum("PRODUCTION");

            /// <summary>
            /// StringEnum GOVERNMENT for value: GOVERNMENT
            /// </summary>
            
            public static InstanceTypeEnum GOVERNMENT = new InstanceTypeEnum("GOVERNMENT");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="InstanceTypeEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator InstanceTypeEnum(string value) => new InstanceTypeEnum(value);

            /// <summary>
            /// Creates a new <see cref="InstanceType"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public InstanceTypeEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// Salesforce instance that you want to connect to
        /// </summary>
        /// <value>Salesforce instance that you want to connect to</value>
        [DataMember(Name = "instanceType", EmitDefaultValue = true)]
        
        public InstanceTypeEnum InstanceType { get; set; }
        /// <summary>
        /// Salesforce integration type
        /// </summary>
        /// <value>Salesforce integration type</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class IntegrationTypeEnum : StringEnum
        {
            /// <summary>
            /// StringEnum STANDARD for value: STANDARD
            /// </summary>
            
            public static IntegrationTypeEnum STANDARD = new IntegrationTypeEnum("STANDARD");

            /// <summary>
            /// StringEnum PORTAL for value: PORTAL
            /// </summary>
            
            public static IntegrationTypeEnum PORTAL = new IntegrationTypeEnum("PORTAL");

            /// <summary>
            /// StringEnum COMMUNITY for value: COMMUNITY
            /// </summary>
            
            public static IntegrationTypeEnum COMMUNITY = new IntegrationTypeEnum("COMMUNITY");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="IntegrationTypeEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator IntegrationTypeEnum(string value) => new IntegrationTypeEnum(value);

            /// <summary>
            /// Creates a new <see cref="IntegrationType"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public IntegrationTypeEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// Salesforce integration type
        /// </summary>
        /// <value>Salesforce integration type</value>
        [DataMember(Name = "integrationType", EmitDefaultValue = true)]
        
        public IntegrationTypeEnum IntegrationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesforceApplicationSettingsApplication" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SalesforceApplicationSettingsApplication() { }
        
        /// <summary>
        /// The Login URL specified in your Salesforce Single Sign-On settings
        /// </summary>
        /// <value>The Login URL specified in your Salesforce Single Sign-On settings</value>
        [DataMember(Name = "loginUrl", EmitDefaultValue = true)]
        public string LoginUrl { get; set; }

        /// <summary>
        /// Salesforce Logout URL
        /// </summary>
        /// <value>Salesforce Logout URL</value>
        [DataMember(Name = "logoutUrl", EmitDefaultValue = true)]
        public string LogoutUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalesforceApplicationSettingsApplication {\n");
            sb.Append("  InstanceType: ").Append(InstanceType).Append("\n");
            sb.Append("  IntegrationType: ").Append(IntegrationType).Append("\n");
            sb.Append("  LoginUrl: ").Append(LoginUrl).Append("\n");
            sb.Append("  LogoutUrl: ").Append(LogoutUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesforceApplicationSettingsApplication);
        }

        /// <summary>
        /// Returns true if SalesforceApplicationSettingsApplication instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesforceApplicationSettingsApplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesforceApplicationSettingsApplication input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstanceType == input.InstanceType ||
                    this.InstanceType.Equals(input.InstanceType)
                ) && 
                (
                    this.IntegrationType == input.IntegrationType ||
                    this.IntegrationType.Equals(input.IntegrationType)
                ) && 
                (
                    this.LoginUrl == input.LoginUrl ||
                    (this.LoginUrl != null &&
                    this.LoginUrl.Equals(input.LoginUrl))
                ) && 
                (
                    this.LogoutUrl == input.LogoutUrl ||
                    (this.LogoutUrl != null &&
                    this.LogoutUrl.Equals(input.LogoutUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.InstanceType != null)
                {
                    hashCode = (hashCode * 59) + this.InstanceType.GetHashCode();
                }
                if (this.IntegrationType != null)
                {
                    hashCode = (hashCode * 59) + this.IntegrationType.GetHashCode();
                }
                if (this.LoginUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LoginUrl.GetHashCode();
                }
                if (this.LogoutUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoutUrl.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
