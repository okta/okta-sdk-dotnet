/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// Refresh token configuration for an OAuth 2.0 client  When you create or update an OAuth 2.0 client, you can configure refresh token rotation by setting the &#x60;rotation_type&#x60; and &#x60;leeway&#x60; properties. If you don&#39;t set these properties when you create an app integration, the default values are used. When you update an app integration, your previously configured values are used. 
    /// </summary>
    [DataContract(Name = "OpenIdConnectApplicationSettingsRefreshToken")]
    
    public partial class OpenIdConnectApplicationSettingsRefreshToken : IEquatable<OpenIdConnectApplicationSettingsRefreshToken>
    {

        /// <summary>
        /// Gets or Sets RotationType
        /// </summary>
        [DataMember(Name = "rotation_type", EmitDefaultValue = true)]
        
        public OpenIdConnectRefreshTokenRotationType RotationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenIdConnectApplicationSettingsRefreshToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public OpenIdConnectApplicationSettingsRefreshToken() { }
        
        /// <summary>
        /// The leeway, in seconds, allowed for the OAuth 2.0 client. After the refresh token is rotated, the previous token remains valid for the specified period of time so clients can get the new token.  &gt; **Note:** A leeway of 0 doesn&#39;t necessarily mean that the previous token is immediately invalidated. The previous token is invalidated after the new token is generated and returned in the response. 
        /// </summary>
        /// <value>The leeway, in seconds, allowed for the OAuth 2.0 client. After the refresh token is rotated, the previous token remains valid for the specified period of time so clients can get the new token.  &gt; **Note:** A leeway of 0 doesn&#39;t necessarily mean that the previous token is immediately invalidated. The previous token is invalidated after the new token is generated and returned in the response. </value>
        [DataMember(Name = "leeway", EmitDefaultValue = true)]
        public int Leeway { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenIdConnectApplicationSettingsRefreshToken {\n");
            sb.Append("  Leeway: ").Append(Leeway).Append("\n");
            sb.Append("  RotationType: ").Append(RotationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenIdConnectApplicationSettingsRefreshToken);
        }

        /// <summary>
        /// Returns true if OpenIdConnectApplicationSettingsRefreshToken instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenIdConnectApplicationSettingsRefreshToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenIdConnectApplicationSettingsRefreshToken input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Leeway == input.Leeway ||
                    this.Leeway.Equals(input.Leeway)
                ) && 
                (
                    this.RotationType == input.RotationType ||
                    this.RotationType.Equals(input.RotationType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                hashCode = (hashCode * 59) + this.Leeway.GetHashCode();
                if (this.RotationType != null)
                {
                    hashCode = (hashCode * 59) + this.RotationType.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
