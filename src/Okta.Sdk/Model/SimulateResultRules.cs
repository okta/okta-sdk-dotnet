/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// SimulateResultRules
    /// </summary>
    [DataContract(Name = "SimulateResultRules")]
    
    public partial class SimulateResultRules : IEquatable<SimulateResultRules>
    {
        /// <summary>
        /// The result of the entity evaluation
        /// </summary>
        /// <value>The result of the entity evaluation</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class StatusEnum : StringEnum
        {
            /// <summary>
            /// StringEnum MATCH for value: MATCH
            /// </summary>
            
            public static StatusEnum MATCH = new StatusEnum("MATCH");

            /// <summary>
            /// StringEnum UNMATCHED for value: UNMATCHED
            /// </summary>
            
            public static StatusEnum UNMATCHED = new StatusEnum("UNMATCHED");

            /// <summary>
            /// StringEnum UNDEFINED for value: UNDEFINED
            /// </summary>
            
            public static StatusEnum UNDEFINED = new StatusEnum("UNDEFINED");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="StatusEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator StatusEnum(string value) => new StatusEnum(value);

            /// <summary>
            /// Creates a new <see cref="Status"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public StatusEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// The result of the entity evaluation
        /// </summary>
        /// <value>The result of the entity evaluation</value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        
        public StatusEnum Status { get; set; }
        
        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [DataMember(Name = "conditions", EmitDefaultValue = true)]
        public SimulateResultConditions Conditions { get; set; }

        /// <summary>
        /// The unique ID number of the policy rule
        /// </summary>
        /// <value>The unique ID number of the policy rule</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the policy rule
        /// </summary>
        /// <value>The name of the policy rule</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SimulateResultRules {\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimulateResultRules);
        }

        /// <summary>
        /// Returns true if SimulateResultRules instances are equal
        /// </summary>
        /// <param name="input">Instance of SimulateResultRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimulateResultRules input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Conditions == input.Conditions ||
                    (this.Conditions != null &&
                    this.Conditions.Equals(input.Conditions))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Conditions != null)
                {
                    hashCode = (hashCode * 59) + this.Conditions.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
