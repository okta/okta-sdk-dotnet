/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.06.1
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// DynamicNetworkZone
    /// </summary>
    [DataContract(Name = "DynamicNetworkZone")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(DynamicNetworkZone), "DYNAMIC")]
    [JsonSubtypes.KnownSubType(typeof(EnhancedDynamicNetworkZone), "DYNAMIC_V2")]
    [JsonSubtypes.KnownSubType(typeof(IPNetworkZone), "IP")]
    
    public partial class DynamicNetworkZone : NetworkZone, IEquatable<DynamicNetworkZone>
    {
        /// <summary>
        /// The proxy type used for a Dynamic Network Zone
        /// </summary>
        /// <value>The proxy type used for a Dynamic Network Zone</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class ProxyTypeEnum : StringEnum
        {
            /// <summary>
            /// StringEnum Null for value: null
            /// </summary>
            
            public static ProxyTypeEnum Null = new ProxyTypeEnum("null");

            /// <summary>
            /// StringEnum Any for value: Any
            /// </summary>
            
            public static ProxyTypeEnum Any = new ProxyTypeEnum("Any");

            /// <summary>
            /// StringEnum Tor for value: Tor
            /// </summary>
            
            public static ProxyTypeEnum Tor = new ProxyTypeEnum("Tor");

            /// <summary>
            /// StringEnum NotTorAnonymizer for value: NotTorAnonymizer
            /// </summary>
            
            public static ProxyTypeEnum NotTorAnonymizer = new ProxyTypeEnum("NotTorAnonymizer");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="ProxyTypeEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator ProxyTypeEnum(string value) => new ProxyTypeEnum(value);

            /// <summary>
            /// Creates a new <see cref="ProxyType"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public ProxyTypeEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// The proxy type used for a Dynamic Network Zone
        /// </summary>
        /// <value>The proxy type used for a Dynamic Network Zone</value>
        [DataMember(Name = "proxyType", EmitDefaultValue = true)]
        
        public ProxyTypeEnum ProxyType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicNetworkZone" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public DynamicNetworkZone() { }
        
        /// <summary>
        /// Gets or Sets Asns
        /// </summary>
        [DataMember(Name = "asns", EmitDefaultValue = true)]
        public List Asns { get; set; }

        /// <summary>
        /// Gets or Sets Locations
        /// </summary>
        [DataMember(Name = "locations", EmitDefaultValue = true)]
        public List Locations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DynamicNetworkZone {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Asns: ").Append(Asns).Append("\n");
            sb.Append("  ProxyType: ").Append(ProxyType).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DynamicNetworkZone);
        }

        /// <summary>
        /// Returns true if DynamicNetworkZone instances are equal
        /// </summary>
        /// <param name="input">Instance of DynamicNetworkZone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DynamicNetworkZone input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Asns == input.Asns ||
                    (this.Asns != null &&
                    this.Asns.Equals(input.Asns))
                ) && base.Equals(input) && 
                (
                    this.ProxyType == input.ProxyType ||
                    this.ProxyType.Equals(input.ProxyType)
                ) && base.Equals(input) && 
                (
                    this.Locations == input.Locations ||
                    (this.Locations != null &&
                    this.Locations.Equals(input.Locations))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                
                if (this.Asns != null)
                {
                    hashCode = (hashCode * 59) + this.Asns.GetHashCode();
                }
                if (this.ProxyType != null)
                {
                    hashCode = (hashCode * 59) + this.ProxyType.GetHashCode();
                }
                if (this.Locations != null)
                {
                    hashCode = (hashCode * 59) + this.Locations.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
