/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// Integration Testing Information
    /// </summary>
    [DataContract(Name = "TestInfo")]
    
    public partial class TestInfo : IEquatable<TestInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public TestInfo() { }
        
        /// <summary>
        /// An email for Okta to contact your company about your integration. This email isn&#39;t shared with customers.
        /// </summary>
        /// <value>An email for Okta to contact your company about your integration. This email isn&#39;t shared with customers.</value>
        [DataMember(Name = "escalationSupportContact", EmitDefaultValue = true)]
        public string EscalationSupportContact { get; set; }

        /// <summary>
        /// Gets or Sets OidcTestConfiguration
        /// </summary>
        [DataMember(Name = "oidcTestConfiguration", EmitDefaultValue = true)]
        public TestInfoOidcTestConfiguration OidcTestConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets SamlTestConfiguration
        /// </summary>
        [DataMember(Name = "samlTestConfiguration", EmitDefaultValue = true)]
        public TestInfoSamlTestConfiguration SamlTestConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets TestAccount
        /// </summary>
        [DataMember(Name = "testAccount", EmitDefaultValue = true)]
        public TestInfoTestAccount TestAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestInfo {\n");
            sb.Append("  EscalationSupportContact: ").Append(EscalationSupportContact).Append("\n");
            sb.Append("  OidcTestConfiguration: ").Append(OidcTestConfiguration).Append("\n");
            sb.Append("  SamlTestConfiguration: ").Append(SamlTestConfiguration).Append("\n");
            sb.Append("  TestAccount: ").Append(TestAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestInfo);
        }

        /// <summary>
        /// Returns true if TestInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of TestInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EscalationSupportContact == input.EscalationSupportContact ||
                    (this.EscalationSupportContact != null &&
                    this.EscalationSupportContact.Equals(input.EscalationSupportContact))
                ) && 
                (
                    this.OidcTestConfiguration == input.OidcTestConfiguration ||
                    (this.OidcTestConfiguration != null &&
                    this.OidcTestConfiguration.Equals(input.OidcTestConfiguration))
                ) && 
                (
                    this.SamlTestConfiguration == input.SamlTestConfiguration ||
                    (this.SamlTestConfiguration != null &&
                    this.SamlTestConfiguration.Equals(input.SamlTestConfiguration))
                ) && 
                (
                    this.TestAccount == input.TestAccount ||
                    (this.TestAccount != null &&
                    this.TestAccount.Equals(input.TestAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.EscalationSupportContact != null)
                {
                    hashCode = (hashCode * 59) + this.EscalationSupportContact.GetHashCode();
                }
                if (this.OidcTestConfiguration != null)
                {
                    hashCode = (hashCode * 59) + this.OidcTestConfiguration.GetHashCode();
                }
                if (this.SamlTestConfiguration != null)
                {
                    hashCode = (hashCode * 59) + this.SamlTestConfiguration.GetHashCode();
                }
                if (this.TestAccount != null)
                {
                    hashCode = (hashCode * 59) + this.TestAccount.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
