/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// Error
    /// </summary>
    [DataContract(Name = "Error")]
    
    public partial class Error : IEquatable<Error>
    {
        
        /// <summary>
        /// Gets or Sets ErrorCauses
        /// </summary>
        [DataMember(Name = "errorCauses", EmitDefaultValue = true)]
        public List<ErrorErrorCausesInner> ErrorCauses { get; set; }

        /// <summary>
        /// An Okta code for this type of error
        /// </summary>
        /// <value>An Okta code for this type of error</value>
        [DataMember(Name = "errorCode", EmitDefaultValue = true)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// A unique identifier for this error. This can be used by Okta Support to help with troubleshooting.
        /// </summary>
        /// <value>A unique identifier for this error. This can be used by Okta Support to help with troubleshooting.</value>
        [DataMember(Name = "errorId", EmitDefaultValue = true)]
        public string ErrorId { get; set; }

        /// <summary>
        /// An Okta code for this type of error
        /// </summary>
        /// <value>An Okta code for this type of error</value>
        [DataMember(Name = "errorLink", EmitDefaultValue = true)]
        public string ErrorLink { get; set; }

        /// <summary>
        /// A short description of what caused this error. Sometimes this contains dynamically-generated information about your specific error.
        /// </summary>
        /// <value>A short description of what caused this error. Sometimes this contains dynamically-generated information about your specific error.</value>
        [DataMember(Name = "errorSummary", EmitDefaultValue = true)]
        public string ErrorSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  ErrorCauses: ").Append(ErrorCauses).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorId: ").Append(ErrorId).Append("\n");
            sb.Append("  ErrorLink: ").Append(ErrorLink).Append("\n");
            sb.Append("  ErrorSummary: ").Append(ErrorSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Error);
        }

        /// <summary>
        /// Returns true if Error instances are equal
        /// </summary>
        /// <param name="input">Instance of Error to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Error input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ErrorCauses == input.ErrorCauses ||
                    this.ErrorCauses != null &&
                    input.ErrorCauses != null &&
                    this.ErrorCauses.SequenceEqual(input.ErrorCauses)
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.ErrorId == input.ErrorId ||
                    (this.ErrorId != null &&
                    this.ErrorId.Equals(input.ErrorId))
                ) && 
                (
                    this.ErrorLink == input.ErrorLink ||
                    (this.ErrorLink != null &&
                    this.ErrorLink.Equals(input.ErrorLink))
                ) && 
                (
                    this.ErrorSummary == input.ErrorSummary ||
                    (this.ErrorSummary != null &&
                    this.ErrorSummary.Equals(input.ErrorSummary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.ErrorCauses != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorCauses.GetHashCode();
                }
                if (this.ErrorCode != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                }
                if (this.ErrorId != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorId.GetHashCode();
                }
                if (this.ErrorLink != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorLink.GetHashCode();
                }
                if (this.ErrorSummary != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorSummary.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
