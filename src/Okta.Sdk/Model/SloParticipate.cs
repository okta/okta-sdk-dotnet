/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// SloParticipate
    /// </summary>
    [DataContract(Name = "SloParticipate")]
    
    public partial class SloParticipate : IEquatable<SloParticipate>
    {
        /// <summary>
        /// Request binding type
        /// </summary>
        /// <value>Request binding type</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class BindingTypeEnum : StringEnum
        {
            /// <summary>
            /// StringEnum POST for value: POST
            /// </summary>
            
            public static BindingTypeEnum POST = new BindingTypeEnum("POST");

            /// <summary>
            /// StringEnum REDIRECT for value: REDIRECT
            /// </summary>
            
            public static BindingTypeEnum REDIRECT = new BindingTypeEnum("REDIRECT");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="BindingTypeEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator BindingTypeEnum(string value) => new BindingTypeEnum(value);

            /// <summary>
            /// Creates a new <see cref="BindingType"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public BindingTypeEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// Request binding type
        /// </summary>
        /// <value>Request binding type</value>
        [DataMember(Name = "bindingType", EmitDefaultValue = true)]
        
        public BindingTypeEnum BindingType { get; set; }
        
        /// <summary>
        /// Allows the app to participate in front-channel single logout.
        /// </summary>
        /// <value>Allows the app to participate in front-channel single logout.</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// URL where Okta sends the logout request.
        /// </summary>
        /// <value>URL where Okta sends the logout request.</value>
        [DataMember(Name = "logoutRequestUrl", EmitDefaultValue = true)]
        public string LogoutRequestUrl { get; set; }

        /// <summary>
        /// Include user session details.
        /// </summary>
        /// <value>Include user session details.</value>
        [DataMember(Name = "sessionIndexRequired", EmitDefaultValue = true)]
        public bool SessionIndexRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SloParticipate {\n");
            sb.Append("  BindingType: ").Append(BindingType).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  LogoutRequestUrl: ").Append(LogoutRequestUrl).Append("\n");
            sb.Append("  SessionIndexRequired: ").Append(SessionIndexRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SloParticipate);
        }

        /// <summary>
        /// Returns true if SloParticipate instances are equal
        /// </summary>
        /// <param name="input">Instance of SloParticipate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SloParticipate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BindingType == input.BindingType ||
                    this.BindingType.Equals(input.BindingType)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.LogoutRequestUrl == input.LogoutRequestUrl ||
                    (this.LogoutRequestUrl != null &&
                    this.LogoutRequestUrl.Equals(input.LogoutRequestUrl))
                ) && 
                (
                    this.SessionIndexRequired == input.SessionIndexRequired ||
                    this.SessionIndexRequired.Equals(input.SessionIndexRequired)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.BindingType != null)
                {
                    hashCode = (hashCode * 59) + this.BindingType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.LogoutRequestUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoutRequestUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SessionIndexRequired.GetHashCode();
                return hashCode;
            }
        }

    }

}
