/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// Specifies link relations (see [Web Linking](https://datatracker.ietf.org/doc/html/rfc8288) available for the current status of a user. The Links object is used for dynamic discovery of related resources, lifecycle operations, and credential operations. The Links object is read-only.  For an individual user result, the Links object contains a full set of link relations available for that user as determined by your policies. For a collection of users, the Links object contains only the &#x60;self&#x60; link. Operations that return a collection of Users include List Users and List Group Members.
    /// </summary>
    [DataContract(Name = "User__links")]
    
    public partial class UserLinks : IEquatable<UserLinks>
    {
        
        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name = "self", EmitDefaultValue = true)]
        public UserLinksAllOfSelf Self { get; set; }

        /// <summary>
        /// Gets or Sets Activate
        /// </summary>
        [DataMember(Name = "activate", EmitDefaultValue = true)]
        public UserLinksAllOfActivate Activate { get; set; }

        /// <summary>
        /// Gets or Sets ResetPassword
        /// </summary>
        [DataMember(Name = "resetPassword", EmitDefaultValue = true)]
        public UserLinksAllOfResetPassword ResetPassword { get; set; }

        /// <summary>
        /// Gets or Sets ResetFactors
        /// </summary>
        [DataMember(Name = "resetFactors", EmitDefaultValue = true)]
        public UserLinksAllOfResetFactors ResetFactors { get; set; }

        /// <summary>
        /// Gets or Sets ExpirePassword
        /// </summary>
        [DataMember(Name = "expirePassword", EmitDefaultValue = true)]
        public UserLinksAllOfExpirePassword ExpirePassword { get; set; }

        /// <summary>
        /// Gets or Sets ForgotPassword
        /// </summary>
        [DataMember(Name = "forgotPassword", EmitDefaultValue = true)]
        public UserLinksAllOfForgotPassword ForgotPassword { get; set; }

        /// <summary>
        /// Gets or Sets ChangeRecoveryQuestion
        /// </summary>
        [DataMember(Name = "changeRecoveryQuestion", EmitDefaultValue = true)]
        public UserLinksAllOfChangeRecoveryQuestion ChangeRecoveryQuestion { get; set; }

        /// <summary>
        /// Gets or Sets Deactivate
        /// </summary>
        [DataMember(Name = "deactivate", EmitDefaultValue = true)]
        public UserLinksAllOfDeactivate Deactivate { get; set; }

        /// <summary>
        /// Gets or Sets Reactivate
        /// </summary>
        [DataMember(Name = "reactivate", EmitDefaultValue = true)]
        public UserLinksAllOfReactivate Reactivate { get; set; }

        /// <summary>
        /// Gets or Sets ChangePassword
        /// </summary>
        [DataMember(Name = "changePassword", EmitDefaultValue = true)]
        public UserLinksAllOfChangePassword ChangePassword { get; set; }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name = "schema", EmitDefaultValue = true)]
        public UserLinksAllOfSchema Schema { get; set; }

        /// <summary>
        /// Gets or Sets Suspend
        /// </summary>
        [DataMember(Name = "suspend", EmitDefaultValue = true)]
        public UserLinksAllOfSuspend Suspend { get; set; }

        /// <summary>
        /// Gets or Sets Unsuspend
        /// </summary>
        [DataMember(Name = "unsuspend", EmitDefaultValue = true)]
        public UserLinksAllOfUnsuspend Unsuspend { get; set; }

        /// <summary>
        /// Gets or Sets Unlock
        /// </summary>
        [DataMember(Name = "unlock", EmitDefaultValue = true)]
        public UserLinksAllOfUnlock Unlock { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public UserLinksAllOfType Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserLinks {\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Activate: ").Append(Activate).Append("\n");
            sb.Append("  ResetPassword: ").Append(ResetPassword).Append("\n");
            sb.Append("  ResetFactors: ").Append(ResetFactors).Append("\n");
            sb.Append("  ExpirePassword: ").Append(ExpirePassword).Append("\n");
            sb.Append("  ForgotPassword: ").Append(ForgotPassword).Append("\n");
            sb.Append("  ChangeRecoveryQuestion: ").Append(ChangeRecoveryQuestion).Append("\n");
            sb.Append("  Deactivate: ").Append(Deactivate).Append("\n");
            sb.Append("  Reactivate: ").Append(Reactivate).Append("\n");
            sb.Append("  ChangePassword: ").Append(ChangePassword).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Suspend: ").Append(Suspend).Append("\n");
            sb.Append("  Unsuspend: ").Append(Unsuspend).Append("\n");
            sb.Append("  Unlock: ").Append(Unlock).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserLinks);
        }

        /// <summary>
        /// Returns true if UserLinks instances are equal
        /// </summary>
        /// <param name="input">Instance of UserLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserLinks input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Self == input.Self ||
                    (this.Self != null &&
                    this.Self.Equals(input.Self))
                ) && 
                (
                    this.Activate == input.Activate ||
                    (this.Activate != null &&
                    this.Activate.Equals(input.Activate))
                ) && 
                (
                    this.ResetPassword == input.ResetPassword ||
                    (this.ResetPassword != null &&
                    this.ResetPassword.Equals(input.ResetPassword))
                ) && 
                (
                    this.ResetFactors == input.ResetFactors ||
                    (this.ResetFactors != null &&
                    this.ResetFactors.Equals(input.ResetFactors))
                ) && 
                (
                    this.ExpirePassword == input.ExpirePassword ||
                    (this.ExpirePassword != null &&
                    this.ExpirePassword.Equals(input.ExpirePassword))
                ) && 
                (
                    this.ForgotPassword == input.ForgotPassword ||
                    (this.ForgotPassword != null &&
                    this.ForgotPassword.Equals(input.ForgotPassword))
                ) && 
                (
                    this.ChangeRecoveryQuestion == input.ChangeRecoveryQuestion ||
                    (this.ChangeRecoveryQuestion != null &&
                    this.ChangeRecoveryQuestion.Equals(input.ChangeRecoveryQuestion))
                ) && 
                (
                    this.Deactivate == input.Deactivate ||
                    (this.Deactivate != null &&
                    this.Deactivate.Equals(input.Deactivate))
                ) && 
                (
                    this.Reactivate == input.Reactivate ||
                    (this.Reactivate != null &&
                    this.Reactivate.Equals(input.Reactivate))
                ) && 
                (
                    this.ChangePassword == input.ChangePassword ||
                    (this.ChangePassword != null &&
                    this.ChangePassword.Equals(input.ChangePassword))
                ) && 
                (
                    this.Schema == input.Schema ||
                    (this.Schema != null &&
                    this.Schema.Equals(input.Schema))
                ) && 
                (
                    this.Suspend == input.Suspend ||
                    (this.Suspend != null &&
                    this.Suspend.Equals(input.Suspend))
                ) && 
                (
                    this.Unsuspend == input.Unsuspend ||
                    (this.Unsuspend != null &&
                    this.Unsuspend.Equals(input.Unsuspend))
                ) && 
                (
                    this.Unlock == input.Unlock ||
                    (this.Unlock != null &&
                    this.Unlock.Equals(input.Unlock))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Self != null)
                {
                    hashCode = (hashCode * 59) + this.Self.GetHashCode();
                }
                if (this.Activate != null)
                {
                    hashCode = (hashCode * 59) + this.Activate.GetHashCode();
                }
                if (this.ResetPassword != null)
                {
                    hashCode = (hashCode * 59) + this.ResetPassword.GetHashCode();
                }
                if (this.ResetFactors != null)
                {
                    hashCode = (hashCode * 59) + this.ResetFactors.GetHashCode();
                }
                if (this.ExpirePassword != null)
                {
                    hashCode = (hashCode * 59) + this.ExpirePassword.GetHashCode();
                }
                if (this.ForgotPassword != null)
                {
                    hashCode = (hashCode * 59) + this.ForgotPassword.GetHashCode();
                }
                if (this.ChangeRecoveryQuestion != null)
                {
                    hashCode = (hashCode * 59) + this.ChangeRecoveryQuestion.GetHashCode();
                }
                if (this.Deactivate != null)
                {
                    hashCode = (hashCode * 59) + this.Deactivate.GetHashCode();
                }
                if (this.Reactivate != null)
                {
                    hashCode = (hashCode * 59) + this.Reactivate.GetHashCode();
                }
                if (this.ChangePassword != null)
                {
                    hashCode = (hashCode * 59) + this.ChangePassword.GetHashCode();
                }
                if (this.Schema != null)
                {
                    hashCode = (hashCode * 59) + this.Schema.GetHashCode();
                }
                if (this.Suspend != null)
                {
                    hashCode = (hashCode * 59) + this.Suspend.GetHashCode();
                }
                if (this.Unsuspend != null)
                {
                    hashCode = (hashCode * 59) + this.Unsuspend.GetHashCode();
                }
                if (this.Unlock != null)
                {
                    hashCode = (hashCode * 59) + this.Unlock.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
