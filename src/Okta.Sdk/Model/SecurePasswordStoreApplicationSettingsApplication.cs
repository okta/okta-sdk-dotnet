/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// SecurePasswordStoreApplicationSettingsApplication
    /// </summary>
    [DataContract(Name = "SecurePasswordStoreApplicationSettingsApplication")]
    
    public partial class SecurePasswordStoreApplicationSettingsApplication : IEquatable<SecurePasswordStoreApplicationSettingsApplication>
    {
        
        /// <summary>
        /// Gets or Sets OptionalField1
        /// </summary>
        [DataMember(Name = "optionalField1", EmitDefaultValue = true)]
        public string OptionalField1 { get; set; }

        /// <summary>
        /// Gets or Sets OptionalField1Value
        /// </summary>
        [DataMember(Name = "optionalField1Value", EmitDefaultValue = true)]
        public string OptionalField1Value { get; set; }

        /// <summary>
        /// Gets or Sets OptionalField2
        /// </summary>
        [DataMember(Name = "optionalField2", EmitDefaultValue = true)]
        public string OptionalField2 { get; set; }

        /// <summary>
        /// Gets or Sets OptionalField2Value
        /// </summary>
        [DataMember(Name = "optionalField2Value", EmitDefaultValue = true)]
        public string OptionalField2Value { get; set; }

        /// <summary>
        /// Gets or Sets OptionalField3
        /// </summary>
        [DataMember(Name = "optionalField3", EmitDefaultValue = true)]
        public string OptionalField3 { get; set; }

        /// <summary>
        /// Gets or Sets OptionalField3Value
        /// </summary>
        [DataMember(Name = "optionalField3Value", EmitDefaultValue = true)]
        public string OptionalField3Value { get; set; }

        /// <summary>
        /// Gets or Sets PasswordField
        /// </summary>
        [DataMember(Name = "passwordField", EmitDefaultValue = true)]
        public string PasswordField { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets UsernameField
        /// </summary>
        [DataMember(Name = "usernameField", EmitDefaultValue = true)]
        public string UsernameField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurePasswordStoreApplicationSettingsApplication {\n");
            sb.Append("  OptionalField1: ").Append(OptionalField1).Append("\n");
            sb.Append("  OptionalField1Value: ").Append(OptionalField1Value).Append("\n");
            sb.Append("  OptionalField2: ").Append(OptionalField2).Append("\n");
            sb.Append("  OptionalField2Value: ").Append(OptionalField2Value).Append("\n");
            sb.Append("  OptionalField3: ").Append(OptionalField3).Append("\n");
            sb.Append("  OptionalField3Value: ").Append(OptionalField3Value).Append("\n");
            sb.Append("  PasswordField: ").Append(PasswordField).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UsernameField: ").Append(UsernameField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurePasswordStoreApplicationSettingsApplication);
        }

        /// <summary>
        /// Returns true if SecurePasswordStoreApplicationSettingsApplication instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurePasswordStoreApplicationSettingsApplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurePasswordStoreApplicationSettingsApplication input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OptionalField1 == input.OptionalField1 ||
                    (this.OptionalField1 != null &&
                    this.OptionalField1.Equals(input.OptionalField1))
                ) && 
                (
                    this.OptionalField1Value == input.OptionalField1Value ||
                    (this.OptionalField1Value != null &&
                    this.OptionalField1Value.Equals(input.OptionalField1Value))
                ) && 
                (
                    this.OptionalField2 == input.OptionalField2 ||
                    (this.OptionalField2 != null &&
                    this.OptionalField2.Equals(input.OptionalField2))
                ) && 
                (
                    this.OptionalField2Value == input.OptionalField2Value ||
                    (this.OptionalField2Value != null &&
                    this.OptionalField2Value.Equals(input.OptionalField2Value))
                ) && 
                (
                    this.OptionalField3 == input.OptionalField3 ||
                    (this.OptionalField3 != null &&
                    this.OptionalField3.Equals(input.OptionalField3))
                ) && 
                (
                    this.OptionalField3Value == input.OptionalField3Value ||
                    (this.OptionalField3Value != null &&
                    this.OptionalField3Value.Equals(input.OptionalField3Value))
                ) && 
                (
                    this.PasswordField == input.PasswordField ||
                    (this.PasswordField != null &&
                    this.PasswordField.Equals(input.PasswordField))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.UsernameField == input.UsernameField ||
                    (this.UsernameField != null &&
                    this.UsernameField.Equals(input.UsernameField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.OptionalField1 != null)
                {
                    hashCode = (hashCode * 59) + this.OptionalField1.GetHashCode();
                }
                if (this.OptionalField1Value != null)
                {
                    hashCode = (hashCode * 59) + this.OptionalField1Value.GetHashCode();
                }
                if (this.OptionalField2 != null)
                {
                    hashCode = (hashCode * 59) + this.OptionalField2.GetHashCode();
                }
                if (this.OptionalField2Value != null)
                {
                    hashCode = (hashCode * 59) + this.OptionalField2Value.GetHashCode();
                }
                if (this.OptionalField3 != null)
                {
                    hashCode = (hashCode * 59) + this.OptionalField3.GetHashCode();
                }
                if (this.OptionalField3Value != null)
                {
                    hashCode = (hashCode * 59) + this.OptionalField3Value.GetHashCode();
                }
                if (this.PasswordField != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordField.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.UsernameField != null)
                {
                    hashCode = (hashCode * 59) + this.UsernameField.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
