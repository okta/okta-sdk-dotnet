/*
 * Okta Admin Management
 *
 * Allows customers to easily access the Okta Management APIs
 *
 * The version of the OpenAPI document: 2024.07.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// UserFactorSecurityQuestionProfile
    /// </summary>
    [DataContract(Name = "UserFactorSecurityQuestionProfile")]
    
    public partial class UserFactorSecurityQuestionProfile : IEquatable<UserFactorSecurityQuestionProfile>
    {
        /// <summary>
        /// Unique key for the question
        /// </summary>
        /// <value>Unique key for the question</value>
        [JsonConverter(typeof(StringEnumSerializingConverter))]
        public sealed class QuestionEnum : StringEnum
        {
            /// <summary>
            /// StringEnum DislikedFood for value: disliked_food
            /// </summary>
            
            public static QuestionEnum DislikedFood = new QuestionEnum("disliked_food");

            /// <summary>
            /// StringEnum NameOfFirstPlushToy for value: name_of_first_plush_toy
            /// </summary>
            
            public static QuestionEnum NameOfFirstPlushToy = new QuestionEnum("name_of_first_plush_toy");

            /// <summary>
            /// StringEnum FirstAward for value: first_award
            /// </summary>
            
            public static QuestionEnum FirstAward = new QuestionEnum("first_award");

            /// <summary>
            /// StringEnum FavoriteSecurityQuestion for value: favorite_security_question
            /// </summary>
            
            public static QuestionEnum FavoriteSecurityQuestion = new QuestionEnum("favorite_security_question");

            /// <summary>
            /// StringEnum FavoriteToy for value: favorite_toy
            /// </summary>
            
            public static QuestionEnum FavoriteToy = new QuestionEnum("favorite_toy");

            /// <summary>
            /// StringEnum FirstComputerGame for value: first_computer_game
            /// </summary>
            
            public static QuestionEnum FirstComputerGame = new QuestionEnum("first_computer_game");

            /// <summary>
            /// StringEnum FavoriteMovieQuote for value: favorite_movie_quote
            /// </summary>
            
            public static QuestionEnum FavoriteMovieQuote = new QuestionEnum("favorite_movie_quote");

            /// <summary>
            /// StringEnum FirstSportsTeamMascot for value: first_sports_team_mascot
            /// </summary>
            
            public static QuestionEnum FirstSportsTeamMascot = new QuestionEnum("first_sports_team_mascot");

            /// <summary>
            /// StringEnum FirstMusicPurchase for value: first_music_purchase
            /// </summary>
            
            public static QuestionEnum FirstMusicPurchase = new QuestionEnum("first_music_purchase");

            /// <summary>
            /// StringEnum FavoriteArtPiece for value: favorite_art_piece
            /// </summary>
            
            public static QuestionEnum FavoriteArtPiece = new QuestionEnum("favorite_art_piece");

            /// <summary>
            /// StringEnum GrandmotherFavoriteDesert for value: grandmother_favorite_desert
            /// </summary>
            
            public static QuestionEnum GrandmotherFavoriteDesert = new QuestionEnum("grandmother_favorite_desert");

            /// <summary>
            /// StringEnum FirstThingCooked for value: first_thing_cooked
            /// </summary>
            
            public static QuestionEnum FirstThingCooked = new QuestionEnum("first_thing_cooked");

            /// <summary>
            /// StringEnum ChildhoodDreamJob for value: childhood_dream_job
            /// </summary>
            
            public static QuestionEnum ChildhoodDreamJob = new QuestionEnum("childhood_dream_job");

            /// <summary>
            /// StringEnum FirstKissLocation for value: first_kiss_location
            /// </summary>
            
            public static QuestionEnum FirstKissLocation = new QuestionEnum("first_kiss_location");

            /// <summary>
            /// StringEnum PlaceWhereSignificantOtherWasMet for value: place_where_significant_other_was_met
            /// </summary>
            
            public static QuestionEnum PlaceWhereSignificantOtherWasMet = new QuestionEnum("place_where_significant_other_was_met");

            /// <summary>
            /// StringEnum FavoriteVacationLocation for value: favorite_vacation_location
            /// </summary>
            
            public static QuestionEnum FavoriteVacationLocation = new QuestionEnum("favorite_vacation_location");

            /// <summary>
            /// StringEnum NewYearsTwoThousand for value: new_years_two_thousand
            /// </summary>
            
            public static QuestionEnum NewYearsTwoThousand = new QuestionEnum("new_years_two_thousand");

            /// <summary>
            /// StringEnum FavoriteSpeakerActor for value: favorite_speaker_actor
            /// </summary>
            
            public static QuestionEnum FavoriteSpeakerActor = new QuestionEnum("favorite_speaker_actor");

            /// <summary>
            /// StringEnum FavoriteBookMovieCharacter for value: favorite_book_movie_character
            /// </summary>
            
            public static QuestionEnum FavoriteBookMovieCharacter = new QuestionEnum("favorite_book_movie_character");

            /// <summary>
            /// StringEnum FavoriteSportsPlayer for value: favorite_sports_player
            /// </summary>
            
            public static QuestionEnum FavoriteSportsPlayer = new QuestionEnum("favorite_sports_player");


            /// <summary>
            /// Implicit operator declaration to accept and convert a string value as a <see cref="QuestionEnum"/>
            /// </summary>
            /// <param name="value">The value to use</param>
            public static implicit operator QuestionEnum(string value) => new QuestionEnum(value);

            /// <summary>
            /// Creates a new <see cref="Question"/> instance.
            /// </summary>
            /// <param name="value">The value to use.</param>
            public QuestionEnum(string value)
                : base(value)
            {
            }
        }


        /// <summary>
        /// Unique key for the question
        /// </summary>
        /// <value>Unique key for the question</value>
        [DataMember(Name = "question", EmitDefaultValue = true)]
        
        public QuestionEnum Question { get; set; }
        
        /// <summary>
        /// Answer to the question
        /// </summary>
        /// <value>Answer to the question</value>
        [DataMember(Name = "answer", EmitDefaultValue = true)]
        public string Answer { get; set; }

        /// <summary>
        /// Human-readable text displayed to the user
        /// </summary>
        /// <value>Human-readable text displayed to the user</value>
        [DataMember(Name = "questionText", EmitDefaultValue = true)]
        public string QuestionText { get; private set; }

        /// <summary>
        /// Returns false as QuestionText should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQuestionText()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserFactorSecurityQuestionProfile {\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  Question: ").Append(Question).Append("\n");
            sb.Append("  QuestionText: ").Append(QuestionText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserFactorSecurityQuestionProfile);
        }

        /// <summary>
        /// Returns true if UserFactorSecurityQuestionProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of UserFactorSecurityQuestionProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserFactorSecurityQuestionProfile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Answer == input.Answer ||
                    (this.Answer != null &&
                    this.Answer.Equals(input.Answer))
                ) && 
                (
                    this.Question == input.Question ||
                    this.Question.Equals(input.Question)
                ) && 
                (
                    this.QuestionText == input.QuestionText ||
                    (this.QuestionText != null &&
                    this.QuestionText.Equals(input.QuestionText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Answer != null)
                {
                    hashCode = (hashCode * 59) + this.Answer.GetHashCode();
                }
                if (this.Question != null)
                {
                    hashCode = (hashCode * 59) + this.Question.GetHashCode();
                }
                if (this.QuestionText != null)
                {
                    hashCode = (hashCode * 59) + this.QuestionText.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
