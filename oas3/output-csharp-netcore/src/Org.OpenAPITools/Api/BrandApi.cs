/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBrandApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a Theme background image
        /// </summary>
        /// <remarks>
        /// Deletes a Theme background image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        void DeleteBrandThemeBackgroundImage(string brandId, string themeId);

        /// <summary>
        /// Deletes a Theme background image
        /// </summary>
        /// <remarks>
        /// Deletes a Theme background image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBrandThemeBackgroundImageWithHttpInfo(string brandId, string themeId);
        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        void DeleteBrandThemeFavicon(string brandId, string themeId);

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBrandThemeFaviconWithHttpInfo(string brandId, string themeId);
        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        void DeleteBrandThemeLogo(string brandId, string themeId);

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBrandThemeLogoWithHttpInfo(string brandId, string themeId);
        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Fetches a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>Brand</returns>
        Brand GetBrand(string brandId);

        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Fetches a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>ApiResponse of Brand</returns>
        ApiResponse<Brand> GetBrandWithHttpInfo(string brandId);
        /// <summary>
        /// Get a theme for a brand
        /// </summary>
        /// <remarks>
        /// Fetches a theme for a brand
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ThemeResponse</returns>
        ThemeResponse GetBrandTheme(string brandId, string themeId);

        /// <summary>
        /// Get a theme for a brand
        /// </summary>
        /// <remarks>
        /// Fetches a theme for a brand
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ThemeResponse</returns>
        ApiResponse<ThemeResponse> GetBrandThemeWithHttpInfo(string brandId, string themeId);
        /// <summary>
        /// Get Brand Themes
        /// </summary>
        /// <remarks>
        /// List all the themes in your brand
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>List&lt;ThemeResponse&gt;</returns>
        List<ThemeResponse> ListBrandThemes(string brandId);

        /// <summary>
        /// Get Brand Themes
        /// </summary>
        /// <remarks>
        /// List all the themes in your brand
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>ApiResponse of List&lt;ThemeResponse&gt;</returns>
        ApiResponse<List<ThemeResponse>> ListBrandThemesWithHttpInfo(string brandId);
        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// List all the brands in your org.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Brand&gt;</returns>
        List<Brand> ListBrands();

        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// List all the brands in your org.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Brand&gt;</returns>
        ApiResponse<List<Brand>> ListBrandsWithHttpInfo();
        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <returns>Brand</returns>
        Brand UpdateBrand(string brandId, Brand brand);

        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <returns>ApiResponse of Brand</returns>
        ApiResponse<Brand> UpdateBrandWithHttpInfo(string brandId, Brand brand);
        /// <summary>
        /// Update a theme for a brand
        /// </summary>
        /// <remarks>
        /// Updates a theme for a brand
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <returns>ThemeResponse</returns>
        ThemeResponse UpdateBrandTheme(string brandId, string themeId, Theme theme);

        /// <summary>
        /// Update a theme for a brand
        /// </summary>
        /// <remarks>
        /// Updates a theme for a brand
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <returns>ApiResponse of ThemeResponse</returns>
        ApiResponse<ThemeResponse> UpdateBrandThemeWithHttpInfo(string brandId, string themeId, Theme theme);
        /// <summary>
        /// Updates the background image for your Theme
        /// </summary>
        /// <remarks>
        /// Updates the background image for your Theme
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        ImageUploadResponse UploadBrandThemeBackgroundImage(string brandId, string themeId);

        /// <summary>
        /// Updates the background image for your Theme
        /// </summary>
        /// <remarks>
        /// Updates the background image for your Theme
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        ApiResponse<ImageUploadResponse> UploadBrandThemeBackgroundImageWithHttpInfo(string brandId, string themeId);
        /// <summary>
        /// Updates the favicon for your theme
        /// </summary>
        /// <remarks>
        /// Updates the favicon for your theme
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        ImageUploadResponse UploadBrandThemeFavicon(string brandId, string themeId);

        /// <summary>
        /// Updates the favicon for your theme
        /// </summary>
        /// <remarks>
        /// Updates the favicon for your theme
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        ApiResponse<ImageUploadResponse> UploadBrandThemeFaviconWithHttpInfo(string brandId, string themeId);
        /// <summary>
        /// Update a themes logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your Theme
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        ImageUploadResponse UploadBrandThemeLogo(string brandId, string themeId);

        /// <summary>
        /// Update a themes logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your Theme
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        ApiResponse<ImageUploadResponse> UploadBrandThemeLogoWithHttpInfo(string brandId, string themeId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBrandApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a Theme background image
        /// </summary>
        /// <remarks>
        /// Deletes a Theme background image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBrandThemeBackgroundImageAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a Theme background image
        /// </summary>
        /// <remarks>
        /// Deletes a Theme background image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBrandThemeBackgroundImageWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBrandThemeFaviconAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBrandThemeFaviconWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBrandThemeLogoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBrandThemeLogoWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Fetches a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Brand</returns>
        System.Threading.Tasks.Task<Brand> GetBrandAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Fetches a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        System.Threading.Tasks.Task<ApiResponse<Brand>> GetBrandWithHttpInfoAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a theme for a brand
        /// </summary>
        /// <remarks>
        /// Fetches a theme for a brand
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThemeResponse</returns>
        System.Threading.Tasks.Task<ThemeResponse> GetBrandThemeAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a theme for a brand
        /// </summary>
        /// <remarks>
        /// Fetches a theme for a brand
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThemeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThemeResponse>> GetBrandThemeWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Brand Themes
        /// </summary>
        /// <remarks>
        /// List all the themes in your brand
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ThemeResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ThemeResponse>> ListBrandThemesAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Brand Themes
        /// </summary>
        /// <remarks>
        /// List all the themes in your brand
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ThemeResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ThemeResponse>>> ListBrandThemesWithHttpInfoAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// List all the brands in your org.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Brand&gt;</returns>
        System.Threading.Tasks.Task<List<Brand>> ListBrandsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// List all the brands in your org.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Brand&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Brand>>> ListBrandsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Brand</returns>
        System.Threading.Tasks.Task<Brand> UpdateBrandAsync(string brandId, Brand brand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        System.Threading.Tasks.Task<ApiResponse<Brand>> UpdateBrandWithHttpInfoAsync(string brandId, Brand brand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a theme for a brand
        /// </summary>
        /// <remarks>
        /// Updates a theme for a brand
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThemeResponse</returns>
        System.Threading.Tasks.Task<ThemeResponse> UpdateBrandThemeAsync(string brandId, string themeId, Theme theme, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a theme for a brand
        /// </summary>
        /// <remarks>
        /// Updates a theme for a brand
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThemeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThemeResponse>> UpdateBrandThemeWithHttpInfoAsync(string brandId, string themeId, Theme theme, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the background image for your Theme
        /// </summary>
        /// <remarks>
        /// Updates the background image for your Theme
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageUploadResponse</returns>
        System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeBackgroundImageAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the background image for your Theme
        /// </summary>
        /// <remarks>
        /// Updates the background image for your Theme
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageUploadResponse>> UploadBrandThemeBackgroundImageWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the favicon for your theme
        /// </summary>
        /// <remarks>
        /// Updates the favicon for your theme
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageUploadResponse</returns>
        System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeFaviconAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the favicon for your theme
        /// </summary>
        /// <remarks>
        /// Updates the favicon for your theme
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageUploadResponse>> UploadBrandThemeFaviconWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a themes logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your Theme
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageUploadResponse</returns>
        System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeLogoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a themes logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your Theme
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageUploadResponse>> UploadBrandThemeLogoWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBrandApi : IBrandApiSync, IBrandApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BrandApi : IBrandApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BrandApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BrandApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrandApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BrandApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrandApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BrandApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrandApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BrandApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deletes a Theme background image Deletes a Theme background image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        public void DeleteBrandThemeBackgroundImage(string brandId, string themeId)
        {
            DeleteBrandThemeBackgroundImageWithHttpInfo(brandId, themeId);
        }

        /// <summary>
        /// Deletes a Theme background image Deletes a Theme background image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeleteBrandThemeBackgroundImageWithHttpInfo(string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteBrandThemeBackgroundImage");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->DeleteBrandThemeBackgroundImage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/brands/{brandId}/themes/{themeId}/background-image", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBrandThemeBackgroundImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a Theme background image Deletes a Theme background image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBrandThemeBackgroundImageAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteBrandThemeBackgroundImageWithHttpInfoAsync(brandId, themeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a Theme background image Deletes a Theme background image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeleteBrandThemeBackgroundImageWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteBrandThemeBackgroundImage");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->DeleteBrandThemeBackgroundImage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/brands/{brandId}/themes/{themeId}/background-image", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBrandThemeBackgroundImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon. Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        public void DeleteBrandThemeFavicon(string brandId, string themeId)
        {
            DeleteBrandThemeFaviconWithHttpInfo(brandId, themeId);
        }

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon. Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeleteBrandThemeFaviconWithHttpInfo(string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteBrandThemeFavicon");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->DeleteBrandThemeFavicon");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/brands/{brandId}/themes/{themeId}/favicon", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBrandThemeFavicon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon. Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBrandThemeFaviconAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteBrandThemeFaviconWithHttpInfoAsync(brandId, themeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon. Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeleteBrandThemeFaviconWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteBrandThemeFavicon");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->DeleteBrandThemeFavicon");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/brands/{brandId}/themes/{themeId}/favicon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBrandThemeFavicon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo. Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        public void DeleteBrandThemeLogo(string brandId, string themeId)
        {
            DeleteBrandThemeLogoWithHttpInfo(brandId, themeId);
        }

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo. Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeleteBrandThemeLogoWithHttpInfo(string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteBrandThemeLogo");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->DeleteBrandThemeLogo");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/brands/{brandId}/themes/{themeId}/logo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBrandThemeLogo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo. Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBrandThemeLogoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteBrandThemeLogoWithHttpInfoAsync(brandId, themeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo. Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeleteBrandThemeLogoWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteBrandThemeLogo");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->DeleteBrandThemeLogo");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/brands/{brandId}/themes/{themeId}/logo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBrandThemeLogo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brand Fetches a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>Brand</returns>
        public Brand GetBrand(string brandId)
        {
            Org.OpenAPITools.Client.ApiResponse<Brand> localVarResponse = GetBrandWithHttpInfo(brandId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand Fetches a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>ApiResponse of Brand</returns>
        public Org.OpenAPITools.Client.ApiResponse<Brand> GetBrandWithHttpInfo(string brandId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetBrand");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Brand>("/api/v1/brands/{brandId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brand Fetches a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Brand</returns>
        public async System.Threading.Tasks.Task<Brand> GetBrandAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Brand> localVarResponse = await GetBrandWithHttpInfoAsync(brandId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand Fetches a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Brand>> GetBrandWithHttpInfoAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetBrand");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Brand>("/api/v1/brands/{brandId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a theme for a brand Fetches a theme for a brand
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ThemeResponse</returns>
        public ThemeResponse GetBrandTheme(string brandId, string themeId)
        {
            Org.OpenAPITools.Client.ApiResponse<ThemeResponse> localVarResponse = GetBrandThemeWithHttpInfo(brandId, themeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a theme for a brand Fetches a theme for a brand
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ThemeResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ThemeResponse> GetBrandThemeWithHttpInfo(string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetBrandTheme");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->GetBrandTheme");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ThemeResponse>("/api/v1/brands/{brandId}/themes/{themeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrandTheme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a theme for a brand Fetches a theme for a brand
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThemeResponse</returns>
        public async System.Threading.Tasks.Task<ThemeResponse> GetBrandThemeAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ThemeResponse> localVarResponse = await GetBrandThemeWithHttpInfoAsync(brandId, themeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a theme for a brand Fetches a theme for a brand
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThemeResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ThemeResponse>> GetBrandThemeWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetBrandTheme");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->GetBrandTheme");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ThemeResponse>("/api/v1/brands/{brandId}/themes/{themeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrandTheme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brand Themes List all the themes in your brand
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>List&lt;ThemeResponse&gt;</returns>
        public List<ThemeResponse> ListBrandThemes(string brandId)
        {
            Org.OpenAPITools.Client.ApiResponse<List<ThemeResponse>> localVarResponse = ListBrandThemesWithHttpInfo(brandId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand Themes List all the themes in your brand
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>ApiResponse of List&lt;ThemeResponse&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<ThemeResponse>> ListBrandThemesWithHttpInfo(string brandId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->ListBrandThemes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ThemeResponse>>("/api/v1/brands/{brandId}/themes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBrandThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brand Themes List all the themes in your brand
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ThemeResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ThemeResponse>> ListBrandThemesAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<ThemeResponse>> localVarResponse = await ListBrandThemesWithHttpInfoAsync(brandId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand Themes List all the themes in your brand
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ThemeResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<ThemeResponse>>> ListBrandThemesWithHttpInfoAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->ListBrandThemes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ThemeResponse>>("/api/v1/brands/{brandId}/themes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBrandThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Brands List all the brands in your org.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Brand&gt;</returns>
        public List<Brand> ListBrands()
        {
            Org.OpenAPITools.Client.ApiResponse<List<Brand>> localVarResponse = ListBrandsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Brands List all the brands in your org.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Brand&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Brand>> ListBrandsWithHttpInfo()
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Brand>>("/api/v1/brands", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBrands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Brands List all the brands in your org.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Brand&gt;</returns>
        public async System.Threading.Tasks.Task<List<Brand>> ListBrandsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Brand>> localVarResponse = await ListBrandsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Brands List all the brands in your org.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Brand&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Brand>>> ListBrandsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Brand>>("/api/v1/brands", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBrands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Brand Updates a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <returns>Brand</returns>
        public Brand UpdateBrand(string brandId, Brand brand)
        {
            Org.OpenAPITools.Client.ApiResponse<Brand> localVarResponse = UpdateBrandWithHttpInfo(brandId, brand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Brand Updates a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <returns>ApiResponse of Brand</returns>
        public Org.OpenAPITools.Client.ApiResponse<Brand> UpdateBrandWithHttpInfo(string brandId, Brand brand)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UpdateBrand");
            }

            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling BrandApi->UpdateBrand");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.Data = brand;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Brand>("/api/v1/brands/{brandId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Brand Updates a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Brand</returns>
        public async System.Threading.Tasks.Task<Brand> UpdateBrandAsync(string brandId, Brand brand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Brand> localVarResponse = await UpdateBrandWithHttpInfoAsync(brandId, brand, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Brand Updates a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Brand>> UpdateBrandWithHttpInfoAsync(string brandId, Brand brand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UpdateBrand");
            }

            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brand' when calling BrandApi->UpdateBrand");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.Data = brand;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Brand>("/api/v1/brands/{brandId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a theme for a brand Updates a theme for a brand
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <returns>ThemeResponse</returns>
        public ThemeResponse UpdateBrandTheme(string brandId, string themeId, Theme theme)
        {
            Org.OpenAPITools.Client.ApiResponse<ThemeResponse> localVarResponse = UpdateBrandThemeWithHttpInfo(brandId, themeId, theme);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a theme for a brand Updates a theme for a brand
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <returns>ApiResponse of ThemeResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ThemeResponse> UpdateBrandThemeWithHttpInfo(string brandId, string themeId, Theme theme)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UpdateBrandTheme");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UpdateBrandTheme");
            }

            // verify the required parameter 'theme' is set
            if (theme == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'theme' when calling BrandApi->UpdateBrandTheme");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter
            localVarRequestOptions.Data = theme;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ThemeResponse>("/api/v1/brands/{brandId}/themes/{themeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBrandTheme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a theme for a brand Updates a theme for a brand
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThemeResponse</returns>
        public async System.Threading.Tasks.Task<ThemeResponse> UpdateBrandThemeAsync(string brandId, string themeId, Theme theme, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ThemeResponse> localVarResponse = await UpdateBrandThemeWithHttpInfoAsync(brandId, themeId, theme, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a theme for a brand Updates a theme for a brand
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThemeResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ThemeResponse>> UpdateBrandThemeWithHttpInfoAsync(string brandId, string themeId, Theme theme, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UpdateBrandTheme");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UpdateBrandTheme");
            }

            // verify the required parameter 'theme' is set
            if (theme == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'theme' when calling BrandApi->UpdateBrandTheme");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter
            localVarRequestOptions.Data = theme;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ThemeResponse>("/api/v1/brands/{brandId}/themes/{themeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBrandTheme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the background image for your Theme Updates the background image for your Theme
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        public ImageUploadResponse UploadBrandThemeBackgroundImage(string brandId, string themeId)
        {
            Org.OpenAPITools.Client.ApiResponse<ImageUploadResponse> localVarResponse = UploadBrandThemeBackgroundImageWithHttpInfo(brandId, themeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the background image for your Theme Updates the background image for your Theme
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ImageUploadResponse> UploadBrandThemeBackgroundImageWithHttpInfo(string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UploadBrandThemeBackgroundImage");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UploadBrandThemeBackgroundImage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ImageUploadResponse>("/api/v1/brands/{brandId}/themes/{themeId}/background-image", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadBrandThemeBackgroundImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the background image for your Theme Updates the background image for your Theme
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageUploadResponse</returns>
        public async System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeBackgroundImageAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ImageUploadResponse> localVarResponse = await UploadBrandThemeBackgroundImageWithHttpInfoAsync(brandId, themeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the background image for your Theme Updates the background image for your Theme
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ImageUploadResponse>> UploadBrandThemeBackgroundImageWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UploadBrandThemeBackgroundImage");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UploadBrandThemeBackgroundImage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ImageUploadResponse>("/api/v1/brands/{brandId}/themes/{themeId}/background-image", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadBrandThemeBackgroundImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the favicon for your theme Updates the favicon for your theme
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        public ImageUploadResponse UploadBrandThemeFavicon(string brandId, string themeId)
        {
            Org.OpenAPITools.Client.ApiResponse<ImageUploadResponse> localVarResponse = UploadBrandThemeFaviconWithHttpInfo(brandId, themeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the favicon for your theme Updates the favicon for your theme
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ImageUploadResponse> UploadBrandThemeFaviconWithHttpInfo(string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UploadBrandThemeFavicon");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UploadBrandThemeFavicon");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ImageUploadResponse>("/api/v1/brands/{brandId}/themes/{themeId}/favicon", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadBrandThemeFavicon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the favicon for your theme Updates the favicon for your theme
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageUploadResponse</returns>
        public async System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeFaviconAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ImageUploadResponse> localVarResponse = await UploadBrandThemeFaviconWithHttpInfoAsync(brandId, themeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the favicon for your theme Updates the favicon for your theme
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ImageUploadResponse>> UploadBrandThemeFaviconWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UploadBrandThemeFavicon");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UploadBrandThemeFavicon");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ImageUploadResponse>("/api/v1/brands/{brandId}/themes/{themeId}/favicon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadBrandThemeFavicon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a themes logo Updates the logo for your Theme
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        public ImageUploadResponse UploadBrandThemeLogo(string brandId, string themeId)
        {
            Org.OpenAPITools.Client.ApiResponse<ImageUploadResponse> localVarResponse = UploadBrandThemeLogoWithHttpInfo(brandId, themeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a themes logo Updates the logo for your Theme
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ImageUploadResponse> UploadBrandThemeLogoWithHttpInfo(string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UploadBrandThemeLogo");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UploadBrandThemeLogo");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ImageUploadResponse>("/api/v1/brands/{brandId}/themes/{themeId}/logo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadBrandThemeLogo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a themes logo Updates the logo for your Theme
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageUploadResponse</returns>
        public async System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeLogoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ImageUploadResponse> localVarResponse = await UploadBrandThemeLogoWithHttpInfoAsync(brandId, themeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a themes logo Updates the logo for your Theme
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ImageUploadResponse>> UploadBrandThemeLogoWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UploadBrandThemeLogo");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UploadBrandThemeLogo");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ImageUploadResponse>("/api/v1/brands/{brandId}/themes/{themeId}/logo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadBrandThemeLogo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
