/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfileMappingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Profile Mapping
        /// </summary>
        /// <remarks>
        /// Fetches a single Profile Mapping referenced by its ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <returns>ProfileMapping</returns>
        ProfileMapping GetProfileMapping(string mappingId);

        /// <summary>
        /// Get Profile Mapping
        /// </summary>
        /// <remarks>
        /// Fetches a single Profile Mapping referenced by its ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <returns>ApiResponse of ProfileMapping</returns>
        ApiResponse<ProfileMapping> GetProfileMappingWithHttpInfo(string mappingId);
        /// <summary>
        /// List Profile Mappings
        /// </summary>
        /// <remarks>
        /// Enumerates Profile Mappings in your organization with pagination.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional, default to &quot;&quot;)</param>
        /// <returns>List&lt;ProfileMapping&gt;</returns>
        List<ProfileMapping> ListProfileMappings(string after = default(string), int? limit = default(int?), string sourceId = default(string), string targetId = default(string));

        /// <summary>
        /// List Profile Mappings
        /// </summary>
        /// <remarks>
        /// Enumerates Profile Mappings in your organization with pagination.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of List&lt;ProfileMapping&gt;</returns>
        ApiResponse<List<ProfileMapping>> ListProfileMappingsWithHttpInfo(string after = default(string), int? limit = default(int?), string sourceId = default(string), string targetId = default(string));
        /// <summary>
        /// Update Profile Mapping
        /// </summary>
        /// <remarks>
        /// Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <param name="profileMapping"></param>
        /// <returns>ProfileMapping</returns>
        ProfileMapping UpdateProfileMapping(string mappingId, ProfileMapping profileMapping);

        /// <summary>
        /// Update Profile Mapping
        /// </summary>
        /// <remarks>
        /// Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <param name="profileMapping"></param>
        /// <returns>ApiResponse of ProfileMapping</returns>
        ApiResponse<ProfileMapping> UpdateProfileMappingWithHttpInfo(string mappingId, ProfileMapping profileMapping);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfileMappingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Profile Mapping
        /// </summary>
        /// <remarks>
        /// Fetches a single Profile Mapping referenced by its ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileMapping</returns>
        System.Threading.Tasks.Task<ProfileMapping> GetProfileMappingAsync(string mappingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Profile Mapping
        /// </summary>
        /// <remarks>
        /// Fetches a single Profile Mapping referenced by its ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileMapping>> GetProfileMappingWithHttpInfoAsync(string mappingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Profile Mappings
        /// </summary>
        /// <remarks>
        /// Enumerates Profile Mappings in your organization with pagination.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProfileMapping&gt;</returns>
        System.Threading.Tasks.Task<List<ProfileMapping>> ListProfileMappingsAsync(string after = default(string), int? limit = default(int?), string sourceId = default(string), string targetId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Profile Mappings
        /// </summary>
        /// <remarks>
        /// Enumerates Profile Mappings in your organization with pagination.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProfileMapping&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProfileMapping>>> ListProfileMappingsWithHttpInfoAsync(string after = default(string), int? limit = default(int?), string sourceId = default(string), string targetId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Profile Mapping
        /// </summary>
        /// <remarks>
        /// Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <param name="profileMapping"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileMapping</returns>
        System.Threading.Tasks.Task<ProfileMapping> UpdateProfileMappingAsync(string mappingId, ProfileMapping profileMapping, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Profile Mapping
        /// </summary>
        /// <remarks>
        /// Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <param name="profileMapping"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileMapping>> UpdateProfileMappingWithHttpInfoAsync(string mappingId, ProfileMapping profileMapping, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfileMappingApi : IProfileMappingApiSync, IProfileMappingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProfileMappingApi : IProfileMappingApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileMappingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProfileMappingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileMappingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProfileMappingApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileMappingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProfileMappingApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileMappingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProfileMappingApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Profile Mapping Fetches a single Profile Mapping referenced by its ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <returns>ProfileMapping</returns>
        public ProfileMapping GetProfileMapping(string mappingId)
        {
            Org.OpenAPITools.Client.ApiResponse<ProfileMapping> localVarResponse = GetProfileMappingWithHttpInfo(mappingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Profile Mapping Fetches a single Profile Mapping referenced by its ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <returns>ApiResponse of ProfileMapping</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProfileMapping> GetProfileMappingWithHttpInfo(string mappingId)
        {
            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mappingId' when calling ProfileMappingApi->GetProfileMapping");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mappingId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mappingId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProfileMapping>("/api/v1/mappings/{mappingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Profile Mapping Fetches a single Profile Mapping referenced by its ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileMapping</returns>
        public async System.Threading.Tasks.Task<ProfileMapping> GetProfileMappingAsync(string mappingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProfileMapping> localVarResponse = await GetProfileMappingWithHttpInfoAsync(mappingId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Profile Mapping Fetches a single Profile Mapping referenced by its ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileMapping)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProfileMapping>> GetProfileMappingWithHttpInfoAsync(string mappingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mappingId' when calling ProfileMappingApi->GetProfileMapping");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mappingId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mappingId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProfileMapping>("/api/v1/mappings/{mappingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Profile Mappings Enumerates Profile Mappings in your organization with pagination.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional, default to &quot;&quot;)</param>
        /// <returns>List&lt;ProfileMapping&gt;</returns>
        public List<ProfileMapping> ListProfileMappings(string after = default(string), int? limit = default(int?), string sourceId = default(string), string targetId = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<List<ProfileMapping>> localVarResponse = ListProfileMappingsWithHttpInfo(after, limit, sourceId, targetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Profile Mappings Enumerates Profile Mappings in your organization with pagination.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of List&lt;ProfileMapping&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<ProfileMapping>> ListProfileMappingsWithHttpInfo(string after = default(string), int? limit = default(int?), string sourceId = default(string), string targetId = default(string))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            }
            if (targetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "targetId", targetId));
            }

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ProfileMapping>>("/api/v1/mappings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProfileMappings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Profile Mappings Enumerates Profile Mappings in your organization with pagination.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProfileMapping&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProfileMapping>> ListProfileMappingsAsync(string after = default(string), int? limit = default(int?), string sourceId = default(string), string targetId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<ProfileMapping>> localVarResponse = await ListProfileMappingsWithHttpInfoAsync(after, limit, sourceId, targetId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Profile Mappings Enumerates Profile Mappings in your organization with pagination.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProfileMapping&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<ProfileMapping>>> ListProfileMappingsWithHttpInfoAsync(string after = default(string), int? limit = default(int?), string sourceId = default(string), string targetId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            }
            if (targetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "targetId", targetId));
            }

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ProfileMapping>>("/api/v1/mappings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProfileMappings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Profile Mapping Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <param name="profileMapping"></param>
        /// <returns>ProfileMapping</returns>
        public ProfileMapping UpdateProfileMapping(string mappingId, ProfileMapping profileMapping)
        {
            Org.OpenAPITools.Client.ApiResponse<ProfileMapping> localVarResponse = UpdateProfileMappingWithHttpInfo(mappingId, profileMapping);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Profile Mapping Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <param name="profileMapping"></param>
        /// <returns>ApiResponse of ProfileMapping</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProfileMapping> UpdateProfileMappingWithHttpInfo(string mappingId, ProfileMapping profileMapping)
        {
            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mappingId' when calling ProfileMappingApi->UpdateProfileMapping");
            }

            // verify the required parameter 'profileMapping' is set
            if (profileMapping == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'profileMapping' when calling ProfileMappingApi->UpdateProfileMapping");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mappingId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mappingId)); // path parameter
            localVarRequestOptions.Data = profileMapping;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProfileMapping>("/api/v1/mappings/{mappingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProfileMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Profile Mapping Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <param name="profileMapping"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileMapping</returns>
        public async System.Threading.Tasks.Task<ProfileMapping> UpdateProfileMappingAsync(string mappingId, ProfileMapping profileMapping, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProfileMapping> localVarResponse = await UpdateProfileMappingWithHttpInfoAsync(mappingId, profileMapping, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Profile Mapping Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <param name="profileMapping"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileMapping)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProfileMapping>> UpdateProfileMappingWithHttpInfoAsync(string mappingId, ProfileMapping profileMapping, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mappingId' when calling ProfileMappingApi->UpdateProfileMapping");
            }

            // verify the required parameter 'profileMapping' is set
            if (profileMapping == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'profileMapping' when calling ProfileMappingApi->UpdateProfileMapping");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mappingId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mappingId)); // path parameter
            localVarRequestOptions.Data = profileMapping;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProfileMapping>("/api/v1/mappings/{mappingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProfileMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
