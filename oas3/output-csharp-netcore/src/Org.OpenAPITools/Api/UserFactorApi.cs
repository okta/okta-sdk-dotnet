/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserFactorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate Factor
        /// </summary>
        /// <remarks>
        /// The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserFactor</returns>
        UserFactor ActivateFactor(string userId, string factorId, ActivateFactorRequest body = default(ActivateFactorRequest));

        /// <summary>
        /// Activate Factor
        /// </summary>
        /// <remarks>
        /// The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserFactor</returns>
        ApiResponse<UserFactor> ActivateFactorWithHttpInfo(string userId, string factorId, ActivateFactorRequest body = default(ActivateFactorRequest));
        /// <summary>
        /// Delete Factor
        /// </summary>
        /// <remarks>
        /// Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns></returns>
        void DeleteFactor(string userId, string factorId);

        /// <summary>
        /// Delete Factor
        /// </summary>
        /// <remarks>
        /// Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFactorWithHttpInfo(string userId, string factorId);
        /// <summary>
        /// Enroll Factor
        /// </summary>
        /// <remarks>
        /// Enrolls a user with a supported factor.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body">Factor</param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <returns>UserFactor</returns>
        UserFactor EnrollFactor(string userId, UserFactor body, bool? updatePhone = default(bool?), string templateId = default(string), int? tokenLifetimeSeconds = default(int?), bool? activate = default(bool?));

        /// <summary>
        /// Enroll Factor
        /// </summary>
        /// <remarks>
        /// Enrolls a user with a supported factor.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body">Factor</param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <returns>ApiResponse of UserFactor</returns>
        ApiResponse<UserFactor> EnrollFactorWithHttpInfo(string userId, UserFactor body, bool? updatePhone = default(bool?), string templateId = default(string), int? tokenLifetimeSeconds = default(int?), bool? activate = default(bool?));
        /// <summary>
        /// Get Factor
        /// </summary>
        /// <remarks>
        /// Fetches a factor for the specified user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>UserFactor</returns>
        UserFactor GetFactor(string userId, string factorId);

        /// <summary>
        /// Get Factor
        /// </summary>
        /// <remarks>
        /// Fetches a factor for the specified user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>ApiResponse of UserFactor</returns>
        ApiResponse<UserFactor> GetFactorWithHttpInfo(string userId, string factorId);
        /// <summary>
        /// Get Factor Transaction Status
        /// </summary>
        /// <remarks>
        /// Polls factors verification transaction for status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <returns>VerifyUserFactorResponse</returns>
        VerifyUserFactorResponse GetFactorTransactionStatus(string userId, string factorId, string transactionId);

        /// <summary>
        /// Get Factor Transaction Status
        /// </summary>
        /// <remarks>
        /// Polls factors verification transaction for status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of VerifyUserFactorResponse</returns>
        ApiResponse<VerifyUserFactorResponse> GetFactorTransactionStatusWithHttpInfo(string userId, string factorId, string transactionId);
        /// <summary>
        /// List Factors
        /// </summary>
        /// <remarks>
        /// Enumerates all the enrolled factors for the specified user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>List&lt;UserFactor&gt;</returns>
        List<UserFactor> ListFactors(string userId);

        /// <summary>
        /// List Factors
        /// </summary>
        /// <remarks>
        /// Enumerates all the enrolled factors for the specified user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;UserFactor&gt;</returns>
        ApiResponse<List<UserFactor>> ListFactorsWithHttpInfo(string userId);
        /// <summary>
        /// List Supported Factors
        /// </summary>
        /// <remarks>
        /// Enumerates all the supported factors that can be enrolled for the specified user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>List&lt;UserFactor&gt;</returns>
        List<UserFactor> ListSupportedFactors(string userId);

        /// <summary>
        /// List Supported Factors
        /// </summary>
        /// <remarks>
        /// Enumerates all the supported factors that can be enrolled for the specified user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;UserFactor&gt;</returns>
        ApiResponse<List<UserFactor>> ListSupportedFactorsWithHttpInfo(string userId);
        /// <summary>
        /// List Supported Security Questions
        /// </summary>
        /// <remarks>
        /// Enumerates all available security questions for a user&#39;s &#x60;question&#x60; factor
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>List&lt;SecurityQuestion&gt;</returns>
        List<SecurityQuestion> ListSupportedSecurityQuestions(string userId);

        /// <summary>
        /// List Supported Security Questions
        /// </summary>
        /// <remarks>
        /// Enumerates all available security questions for a user&#39;s &#x60;question&#x60; factor
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;SecurityQuestion&gt;</returns>
        ApiResponse<List<SecurityQuestion>> ListSupportedSecurityQuestionsWithHttpInfo(string userId);
        /// <summary>
        /// Verify MFA Factor
        /// </summary>
        /// <remarks>
        /// Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>VerifyUserFactorResponse</returns>
        VerifyUserFactorResponse VerifyFactor(string userId, string factorId, string templateId = default(string), int? tokenLifetimeSeconds = default(int?), string xForwardedFor = default(string), string userAgent = default(string), string acceptLanguage = default(string), VerifyFactorRequest body = default(VerifyFactorRequest));

        /// <summary>
        /// Verify MFA Factor
        /// </summary>
        /// <remarks>
        /// Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of VerifyUserFactorResponse</returns>
        ApiResponse<VerifyUserFactorResponse> VerifyFactorWithHttpInfo(string userId, string factorId, string templateId = default(string), int? tokenLifetimeSeconds = default(int?), string xForwardedFor = default(string), string userAgent = default(string), string acceptLanguage = default(string), VerifyFactorRequest body = default(VerifyFactorRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserFactorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Activate Factor
        /// </summary>
        /// <remarks>
        /// The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactor</returns>
        System.Threading.Tasks.Task<UserFactor> ActivateFactorAsync(string userId, string factorId, ActivateFactorRequest body = default(ActivateFactorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Activate Factor
        /// </summary>
        /// <remarks>
        /// The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFactor>> ActivateFactorWithHttpInfoAsync(string userId, string factorId, ActivateFactorRequest body = default(ActivateFactorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Factor
        /// </summary>
        /// <remarks>
        /// Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFactorAsync(string userId, string factorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Factor
        /// </summary>
        /// <remarks>
        /// Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFactorWithHttpInfoAsync(string userId, string factorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enroll Factor
        /// </summary>
        /// <remarks>
        /// Enrolls a user with a supported factor.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body">Factor</param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactor</returns>
        System.Threading.Tasks.Task<UserFactor> EnrollFactorAsync(string userId, UserFactor body, bool? updatePhone = default(bool?), string templateId = default(string), int? tokenLifetimeSeconds = default(int?), bool? activate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enroll Factor
        /// </summary>
        /// <remarks>
        /// Enrolls a user with a supported factor.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body">Factor</param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFactor>> EnrollFactorWithHttpInfoAsync(string userId, UserFactor body, bool? updatePhone = default(bool?), string templateId = default(string), int? tokenLifetimeSeconds = default(int?), bool? activate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Factor
        /// </summary>
        /// <remarks>
        /// Fetches a factor for the specified user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactor</returns>
        System.Threading.Tasks.Task<UserFactor> GetFactorAsync(string userId, string factorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Factor
        /// </summary>
        /// <remarks>
        /// Fetches a factor for the specified user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFactor>> GetFactorWithHttpInfoAsync(string userId, string factorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Factor Transaction Status
        /// </summary>
        /// <remarks>
        /// Polls factors verification transaction for status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyUserFactorResponse</returns>
        System.Threading.Tasks.Task<VerifyUserFactorResponse> GetFactorTransactionStatusAsync(string userId, string factorId, string transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Factor Transaction Status
        /// </summary>
        /// <remarks>
        /// Polls factors verification transaction for status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyUserFactorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyUserFactorResponse>> GetFactorTransactionStatusWithHttpInfoAsync(string userId, string factorId, string transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Factors
        /// </summary>
        /// <remarks>
        /// Enumerates all the enrolled factors for the specified user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserFactor&gt;</returns>
        System.Threading.Tasks.Task<List<UserFactor>> ListFactorsAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Factors
        /// </summary>
        /// <remarks>
        /// Enumerates all the enrolled factors for the specified user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserFactor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserFactor>>> ListFactorsWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Supported Factors
        /// </summary>
        /// <remarks>
        /// Enumerates all the supported factors that can be enrolled for the specified user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserFactor&gt;</returns>
        System.Threading.Tasks.Task<List<UserFactor>> ListSupportedFactorsAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Supported Factors
        /// </summary>
        /// <remarks>
        /// Enumerates all the supported factors that can be enrolled for the specified user
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserFactor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserFactor>>> ListSupportedFactorsWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Supported Security Questions
        /// </summary>
        /// <remarks>
        /// Enumerates all available security questions for a user&#39;s &#x60;question&#x60; factor
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SecurityQuestion&gt;</returns>
        System.Threading.Tasks.Task<List<SecurityQuestion>> ListSupportedSecurityQuestionsAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Supported Security Questions
        /// </summary>
        /// <remarks>
        /// Enumerates all available security questions for a user&#39;s &#x60;question&#x60; factor
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SecurityQuestion&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SecurityQuestion>>> ListSupportedSecurityQuestionsWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify MFA Factor
        /// </summary>
        /// <remarks>
        /// Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyUserFactorResponse</returns>
        System.Threading.Tasks.Task<VerifyUserFactorResponse> VerifyFactorAsync(string userId, string factorId, string templateId = default(string), int? tokenLifetimeSeconds = default(int?), string xForwardedFor = default(string), string userAgent = default(string), string acceptLanguage = default(string), VerifyFactorRequest body = default(VerifyFactorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verify MFA Factor
        /// </summary>
        /// <remarks>
        /// Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyUserFactorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyUserFactorResponse>> VerifyFactorWithHttpInfoAsync(string userId, string factorId, string templateId = default(string), int? tokenLifetimeSeconds = default(int?), string xForwardedFor = default(string), string userAgent = default(string), string acceptLanguage = default(string), VerifyFactorRequest body = default(VerifyFactorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserFactorApi : IUserFactorApiSync, IUserFactorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserFactorApi : IUserFactorApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserFactorApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserFactorApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserFactorApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserFactorApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Activate Factor The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserFactor</returns>
        public UserFactor ActivateFactor(string userId, string factorId, ActivateFactorRequest body = default(ActivateFactorRequest))
        {
            Org.OpenAPITools.Client.ApiResponse<UserFactor> localVarResponse = ActivateFactorWithHttpInfo(userId, factorId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activate Factor The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserFactor</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserFactor> ActivateFactorWithHttpInfo(string userId, string factorId, ActivateFactorRequest body = default(ActivateFactorRequest))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ActivateFactor");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->ActivateFactor");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(factorId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserFactor>("/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate Factor The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactor</returns>
        public async System.Threading.Tasks.Task<UserFactor> ActivateFactorAsync(string userId, string factorId, ActivateFactorRequest body = default(ActivateFactorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserFactor> localVarResponse = await ActivateFactorWithHttpInfoAsync(userId, factorId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activate Factor The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserFactor>> ActivateFactorWithHttpInfoAsync(string userId, string factorId, ActivateFactorRequest body = default(ActivateFactorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ActivateFactor");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->ActivateFactor");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(factorId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserFactor>("/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Factor Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns></returns>
        public void DeleteFactor(string userId, string factorId)
        {
            DeleteFactorWithHttpInfo(userId, factorId);
        }

        /// <summary>
        /// Delete Factor Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeleteFactorWithHttpInfo(string userId, string factorId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->DeleteFactor");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->DeleteFactor");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(factorId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/users/{userId}/factors/{factorId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Factor Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFactorAsync(string userId, string factorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFactorWithHttpInfoAsync(userId, factorId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Factor Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeleteFactorWithHttpInfoAsync(string userId, string factorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->DeleteFactor");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->DeleteFactor");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(factorId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/users/{userId}/factors/{factorId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enroll Factor Enrolls a user with a supported factor.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body">Factor</param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <returns>UserFactor</returns>
        public UserFactor EnrollFactor(string userId, UserFactor body, bool? updatePhone = default(bool?), string templateId = default(string), int? tokenLifetimeSeconds = default(int?), bool? activate = default(bool?))
        {
            Org.OpenAPITools.Client.ApiResponse<UserFactor> localVarResponse = EnrollFactorWithHttpInfo(userId, body, updatePhone, templateId, tokenLifetimeSeconds, activate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enroll Factor Enrolls a user with a supported factor.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body">Factor</param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <returns>ApiResponse of UserFactor</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserFactor> EnrollFactorWithHttpInfo(string userId, UserFactor body, bool? updatePhone = default(bool?), string templateId = default(string), int? tokenLifetimeSeconds = default(int?), bool? activate = default(bool?))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->EnrollFactor");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling UserFactorApi->EnrollFactor");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (updatePhone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "updatePhone", updatePhone));
            }
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }
            if (tokenLifetimeSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenLifetimeSeconds", tokenLifetimeSeconds));
            }
            if (activate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "activate", activate));
            }
            localVarRequestOptions.Data = body;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserFactor>("/api/v1/users/{userId}/factors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnrollFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enroll Factor Enrolls a user with a supported factor.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body">Factor</param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactor</returns>
        public async System.Threading.Tasks.Task<UserFactor> EnrollFactorAsync(string userId, UserFactor body, bool? updatePhone = default(bool?), string templateId = default(string), int? tokenLifetimeSeconds = default(int?), bool? activate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserFactor> localVarResponse = await EnrollFactorWithHttpInfoAsync(userId, body, updatePhone, templateId, tokenLifetimeSeconds, activate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enroll Factor Enrolls a user with a supported factor.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body">Factor</param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserFactor>> EnrollFactorWithHttpInfoAsync(string userId, UserFactor body, bool? updatePhone = default(bool?), string templateId = default(string), int? tokenLifetimeSeconds = default(int?), bool? activate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->EnrollFactor");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling UserFactorApi->EnrollFactor");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (updatePhone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "updatePhone", updatePhone));
            }
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }
            if (tokenLifetimeSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenLifetimeSeconds", tokenLifetimeSeconds));
            }
            if (activate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "activate", activate));
            }
            localVarRequestOptions.Data = body;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserFactor>("/api/v1/users/{userId}/factors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnrollFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Factor Fetches a factor for the specified user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>UserFactor</returns>
        public UserFactor GetFactor(string userId, string factorId)
        {
            Org.OpenAPITools.Client.ApiResponse<UserFactor> localVarResponse = GetFactorWithHttpInfo(userId, factorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Factor Fetches a factor for the specified user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>ApiResponse of UserFactor</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserFactor> GetFactorWithHttpInfo(string userId, string factorId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->GetFactor");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->GetFactor");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(factorId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserFactor>("/api/v1/users/{userId}/factors/{factorId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Factor Fetches a factor for the specified user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFactor</returns>
        public async System.Threading.Tasks.Task<UserFactor> GetFactorAsync(string userId, string factorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserFactor> localVarResponse = await GetFactorWithHttpInfoAsync(userId, factorId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Factor Fetches a factor for the specified user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserFactor>> GetFactorWithHttpInfoAsync(string userId, string factorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->GetFactor");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->GetFactor");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(factorId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserFactor>("/api/v1/users/{userId}/factors/{factorId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Factor Transaction Status Polls factors verification transaction for status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <returns>VerifyUserFactorResponse</returns>
        public VerifyUserFactorResponse GetFactorTransactionStatus(string userId, string factorId, string transactionId)
        {
            Org.OpenAPITools.Client.ApiResponse<VerifyUserFactorResponse> localVarResponse = GetFactorTransactionStatusWithHttpInfo(userId, factorId, transactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Factor Transaction Status Polls factors verification transaction for status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of VerifyUserFactorResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<VerifyUserFactorResponse> GetFactorTransactionStatusWithHttpInfo(string userId, string factorId, string transactionId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->GetFactorTransactionStatus");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->GetFactorTransactionStatus");
            }

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionId' when calling UserFactorApi->GetFactorTransactionStatus");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(factorId)); // path parameter
            localVarRequestOptions.PathParameters.Add("transactionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(transactionId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VerifyUserFactorResponse>("/api/v1/users/{userId}/factors/{factorId}/transactions/{transactionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactorTransactionStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Factor Transaction Status Polls factors verification transaction for status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyUserFactorResponse</returns>
        public async System.Threading.Tasks.Task<VerifyUserFactorResponse> GetFactorTransactionStatusAsync(string userId, string factorId, string transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<VerifyUserFactorResponse> localVarResponse = await GetFactorTransactionStatusWithHttpInfoAsync(userId, factorId, transactionId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Factor Transaction Status Polls factors verification transaction for status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyUserFactorResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<VerifyUserFactorResponse>> GetFactorTransactionStatusWithHttpInfoAsync(string userId, string factorId, string transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->GetFactorTransactionStatus");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->GetFactorTransactionStatus");
            }

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionId' when calling UserFactorApi->GetFactorTransactionStatus");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(factorId)); // path parameter
            localVarRequestOptions.PathParameters.Add("transactionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(transactionId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VerifyUserFactorResponse>("/api/v1/users/{userId}/factors/{factorId}/transactions/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactorTransactionStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Factors Enumerates all the enrolled factors for the specified user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>List&lt;UserFactor&gt;</returns>
        public List<UserFactor> ListFactors(string userId)
        {
            Org.OpenAPITools.Client.ApiResponse<List<UserFactor>> localVarResponse = ListFactorsWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Factors Enumerates all the enrolled factors for the specified user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;UserFactor&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<UserFactor>> ListFactorsWithHttpInfo(string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListFactors");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserFactor>>("/api/v1/users/{userId}/factors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFactors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Factors Enumerates all the enrolled factors for the specified user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserFactor&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserFactor>> ListFactorsAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<UserFactor>> localVarResponse = await ListFactorsWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Factors Enumerates all the enrolled factors for the specified user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserFactor&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<UserFactor>>> ListFactorsWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListFactors");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserFactor>>("/api/v1/users/{userId}/factors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFactors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Supported Factors Enumerates all the supported factors that can be enrolled for the specified user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>List&lt;UserFactor&gt;</returns>
        public List<UserFactor> ListSupportedFactors(string userId)
        {
            Org.OpenAPITools.Client.ApiResponse<List<UserFactor>> localVarResponse = ListSupportedFactorsWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Supported Factors Enumerates all the supported factors that can be enrolled for the specified user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;UserFactor&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<UserFactor>> ListSupportedFactorsWithHttpInfo(string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListSupportedFactors");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserFactor>>("/api/v1/users/{userId}/factors/catalog", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSupportedFactors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Supported Factors Enumerates all the supported factors that can be enrolled for the specified user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserFactor&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserFactor>> ListSupportedFactorsAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<UserFactor>> localVarResponse = await ListSupportedFactorsWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Supported Factors Enumerates all the supported factors that can be enrolled for the specified user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserFactor&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<UserFactor>>> ListSupportedFactorsWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListSupportedFactors");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserFactor>>("/api/v1/users/{userId}/factors/catalog", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSupportedFactors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Supported Security Questions Enumerates all available security questions for a user&#39;s &#x60;question&#x60; factor
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>List&lt;SecurityQuestion&gt;</returns>
        public List<SecurityQuestion> ListSupportedSecurityQuestions(string userId)
        {
            Org.OpenAPITools.Client.ApiResponse<List<SecurityQuestion>> localVarResponse = ListSupportedSecurityQuestionsWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Supported Security Questions Enumerates all available security questions for a user&#39;s &#x60;question&#x60; factor
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;SecurityQuestion&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<SecurityQuestion>> ListSupportedSecurityQuestionsWithHttpInfo(string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListSupportedSecurityQuestions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SecurityQuestion>>("/api/v1/users/{userId}/factors/questions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSupportedSecurityQuestions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Supported Security Questions Enumerates all available security questions for a user&#39;s &#x60;question&#x60; factor
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SecurityQuestion&gt;</returns>
        public async System.Threading.Tasks.Task<List<SecurityQuestion>> ListSupportedSecurityQuestionsAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<SecurityQuestion>> localVarResponse = await ListSupportedSecurityQuestionsWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Supported Security Questions Enumerates all available security questions for a user&#39;s &#x60;question&#x60; factor
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SecurityQuestion&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<SecurityQuestion>>> ListSupportedSecurityQuestionsWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListSupportedSecurityQuestions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SecurityQuestion>>("/api/v1/users/{userId}/factors/questions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSupportedSecurityQuestions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify MFA Factor Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>VerifyUserFactorResponse</returns>
        public VerifyUserFactorResponse VerifyFactor(string userId, string factorId, string templateId = default(string), int? tokenLifetimeSeconds = default(int?), string xForwardedFor = default(string), string userAgent = default(string), string acceptLanguage = default(string), VerifyFactorRequest body = default(VerifyFactorRequest))
        {
            Org.OpenAPITools.Client.ApiResponse<VerifyUserFactorResponse> localVarResponse = VerifyFactorWithHttpInfo(userId, factorId, templateId, tokenLifetimeSeconds, xForwardedFor, userAgent, acceptLanguage, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify MFA Factor Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of VerifyUserFactorResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<VerifyUserFactorResponse> VerifyFactorWithHttpInfo(string userId, string factorId, string templateId = default(string), int? tokenLifetimeSeconds = default(int?), string xForwardedFor = default(string), string userAgent = default(string), string acceptLanguage = default(string), VerifyFactorRequest body = default(VerifyFactorRequest))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->VerifyFactor");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->VerifyFactor");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(factorId)); // path parameter
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }
            if (tokenLifetimeSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenLifetimeSeconds", tokenLifetimeSeconds));
            }
            if (xForwardedFor != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Forwarded-For", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xForwardedFor)); // header parameter
            }
            if (userAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Org.OpenAPITools.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            localVarRequestOptions.Data = body;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<VerifyUserFactorResponse>("/api/v1/users/{userId}/factors/{factorId}/verify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify MFA Factor Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyUserFactorResponse</returns>
        public async System.Threading.Tasks.Task<VerifyUserFactorResponse> VerifyFactorAsync(string userId, string factorId, string templateId = default(string), int? tokenLifetimeSeconds = default(int?), string xForwardedFor = default(string), string userAgent = default(string), string acceptLanguage = default(string), VerifyFactorRequest body = default(VerifyFactorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<VerifyUserFactorResponse> localVarResponse = await VerifyFactorWithHttpInfoAsync(userId, factorId, templateId, tokenLifetimeSeconds, xForwardedFor, userAgent, acceptLanguage, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify MFA Factor Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional, default to 300)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyUserFactorResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<VerifyUserFactorResponse>> VerifyFactorWithHttpInfoAsync(string userId, string factorId, string templateId = default(string), int? tokenLifetimeSeconds = default(int?), string xForwardedFor = default(string), string userAgent = default(string), string acceptLanguage = default(string), VerifyFactorRequest body = default(VerifyFactorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->VerifyFactor");
            }

            // verify the required parameter 'factorId' is set
            if (factorId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->VerifyFactor");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("factorId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(factorId)); // path parameter
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }
            if (tokenLifetimeSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tokenLifetimeSeconds", tokenLifetimeSeconds));
            }
            if (xForwardedFor != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Forwarded-For", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xForwardedFor)); // header parameter
            }
            if (userAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", Org.OpenAPITools.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            localVarRequestOptions.Data = body;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VerifyUserFactorResponse>("/api/v1/users/{userId}/factors/{factorId}/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
