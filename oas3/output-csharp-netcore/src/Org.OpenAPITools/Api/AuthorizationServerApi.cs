/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizationServerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns></returns>
        void ActivateAuthorizationServer(string authServerId);

        /// <summary>
        /// Activate Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivateAuthorizationServerWithHttpInfo(string authServerId);
        /// <summary>
        /// Activate Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns></returns>
        void ActivateAuthorizationServerPolicy(string authServerId, string policyId);

        /// <summary>
        /// Activate Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivateAuthorizationServerPolicyWithHttpInfo(string authServerId, string policyId);
        /// <summary>
        /// Activate Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        void ActivateAuthorizationServerPolicyRule(string authServerId, string policyId, string ruleId);

        /// <summary>
        /// Activate Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivateAuthorizationServerPolicyRuleWithHttpInfo(string authServerId, string policyId, string ruleId);
        /// <summary>
        /// Create Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationServer"></param>
        /// <returns>AuthorizationServer</returns>
        AuthorizationServer CreateAuthorizationServer(AuthorizationServer authorizationServer);

        /// <summary>
        /// Create Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationServer"></param>
        /// <returns>ApiResponse of AuthorizationServer</returns>
        ApiResponse<AuthorizationServer> CreateAuthorizationServerWithHttpInfo(AuthorizationServer authorizationServer);
        /// <summary>
        /// Create Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policy"></param>
        /// <returns>AuthorizationServerPolicy</returns>
        AuthorizationServerPolicy CreateAuthorizationServerPolicy(string authServerId, AuthorizationServerPolicy policy);

        /// <summary>
        /// Create Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policy"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicy</returns>
        ApiResponse<AuthorizationServerPolicy> CreateAuthorizationServerPolicyWithHttpInfo(string authServerId, AuthorizationServerPolicy policy);
        /// <summary>
        /// Create Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyRule"></param>
        /// <returns>AuthorizationServerPolicyRule</returns>
        AuthorizationServerPolicyRule CreateAuthorizationServerPolicyRule(string policyId, string authServerId, AuthorizationServerPolicyRule policyRule);

        /// <summary>
        /// Create Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyRule"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicyRule</returns>
        ApiResponse<AuthorizationServerPolicyRule> CreateAuthorizationServerPolicyRuleWithHttpInfo(string policyId, string authServerId, AuthorizationServerPolicyRule policyRule);
        /// <summary>
        /// Create Custom OAuth 2.0 Token Claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <returns>OAuth2Claim</returns>
        OAuth2Claim CreateOAuth2Claim(string authServerId, OAuth2Claim oAuth2Claim);

        /// <summary>
        /// Create Custom OAuth 2.0 Token Claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <returns>ApiResponse of OAuth2Claim</returns>
        ApiResponse<OAuth2Claim> CreateOAuth2ClaimWithHttpInfo(string authServerId, OAuth2Claim oAuth2Claim);
        /// <summary>
        /// Create Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <returns>OAuth2Scope</returns>
        OAuth2Scope CreateOAuth2Scope(string authServerId, OAuth2Scope oAuth2Scope);

        /// <summary>
        /// Create Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <returns>ApiResponse of OAuth2Scope</returns>
        ApiResponse<OAuth2Scope> CreateOAuth2ScopeWithHttpInfo(string authServerId, OAuth2Scope oAuth2Scope);
        /// <summary>
        /// Deactivate Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns></returns>
        void DeactivateAuthorizationServer(string authServerId);

        /// <summary>
        /// Deactivate Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeactivateAuthorizationServerWithHttpInfo(string authServerId);
        /// <summary>
        /// Deactivate Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns></returns>
        void DeactivateAuthorizationServerPolicy(string authServerId, string policyId);

        /// <summary>
        /// Deactivate Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeactivateAuthorizationServerPolicyWithHttpInfo(string authServerId, string policyId);
        /// <summary>
        /// Deactivate Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        void DeactivateAuthorizationServerPolicyRule(string authServerId, string policyId, string ruleId);

        /// <summary>
        /// Deactivate Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeactivateAuthorizationServerPolicyRuleWithHttpInfo(string authServerId, string policyId, string ruleId);
        /// <summary>
        /// Delete Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns></returns>
        void DeleteAuthorizationServer(string authServerId);

        /// <summary>
        /// Delete Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthorizationServerWithHttpInfo(string authServerId);
        /// <summary>
        /// Delete Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns></returns>
        void DeleteAuthorizationServerPolicy(string authServerId, string policyId);

        /// <summary>
        /// Delete Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthorizationServerPolicyWithHttpInfo(string authServerId, string policyId);
        /// <summary>
        /// Delete Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        void DeleteAuthorizationServerPolicyRule(string policyId, string authServerId, string ruleId);

        /// <summary>
        /// Delete Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthorizationServerPolicyRuleWithHttpInfo(string policyId, string authServerId, string ruleId);
        /// <summary>
        /// Delete Custom OAuth 2.0 Token Claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns></returns>
        void DeleteOAuth2Claim(string authServerId, string claimId);

        /// <summary>
        /// Delete Custom OAuth 2.0 Token Claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOAuth2ClaimWithHttpInfo(string authServerId, string claimId);
        /// <summary>
        /// Delete Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns></returns>
        void DeleteOAuth2Scope(string authServerId, string scopeId);

        /// <summary>
        /// Delete Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOAuth2ScopeWithHttpInfo(string authServerId, string scopeId);
        /// <summary>
        /// Get Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>AuthorizationServer</returns>
        AuthorizationServer GetAuthorizationServer(string authServerId);

        /// <summary>
        /// Get Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of AuthorizationServer</returns>
        ApiResponse<AuthorizationServer> GetAuthorizationServerWithHttpInfo(string authServerId);
        /// <summary>
        /// Get Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>AuthorizationServerPolicy</returns>
        AuthorizationServerPolicy GetAuthorizationServerPolicy(string authServerId, string policyId);

        /// <summary>
        /// Get Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicy</returns>
        ApiResponse<AuthorizationServerPolicy> GetAuthorizationServerPolicyWithHttpInfo(string authServerId, string policyId);
        /// <summary>
        /// Get Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>AuthorizationServerPolicyRule</returns>
        AuthorizationServerPolicyRule GetAuthorizationServerPolicyRule(string policyId, string authServerId, string ruleId);

        /// <summary>
        /// Get Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicyRule</returns>
        ApiResponse<AuthorizationServerPolicyRule> GetAuthorizationServerPolicyRuleWithHttpInfo(string policyId, string authServerId, string ruleId);
        /// <summary>
        /// Get Oauth2claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>OAuth2Claim</returns>
        OAuth2Claim GetOAuth2Claim(string authServerId, string claimId);

        /// <summary>
        /// Get Oauth2claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>ApiResponse of OAuth2Claim</returns>
        ApiResponse<OAuth2Claim> GetOAuth2ClaimWithHttpInfo(string authServerId, string claimId);
        /// <summary>
        /// Get Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>OAuth2Scope</returns>
        OAuth2Scope GetOAuth2Scope(string authServerId, string scopeId);

        /// <summary>
        /// Get Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>ApiResponse of OAuth2Scope</returns>
        ApiResponse<OAuth2Scope> GetOAuth2ScopeWithHttpInfo(string authServerId, string scopeId);
        /// <summary>
        /// Get Refresh Token for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>OAuth2RefreshToken</returns>
        OAuth2RefreshToken GetRefreshTokenForAuthorizationServerAndClient(string authServerId, string clientId, string tokenId, string expand = default(string));

        /// <summary>
        /// Get Refresh Token for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of OAuth2RefreshToken</returns>
        ApiResponse<OAuth2RefreshToken> GetRefreshTokenForAuthorizationServerAndClientWithHttpInfo(string authServerId, string clientId, string tokenId, string expand = default(string));
        /// <summary>
        /// List Authorization Server Keys
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        List<JsonWebKey> ListAuthorizationServerKeys(string authServerId);

        /// <summary>
        /// List Authorization Server Keys
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        ApiResponse<List<JsonWebKey>> ListAuthorizationServerKeysWithHttpInfo(string authServerId);
        /// <summary>
        /// List Authorization Server Policies
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;AuthorizationServerPolicy&gt;</returns>
        List<AuthorizationServerPolicy> ListAuthorizationServerPolicies(string authServerId);

        /// <summary>
        /// List Authorization Server Policies
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;AuthorizationServerPolicy&gt;</returns>
        ApiResponse<List<AuthorizationServerPolicy>> ListAuthorizationServerPoliciesWithHttpInfo(string authServerId);
        /// <summary>
        /// List Authorization Server Policy Rules
        /// </summary>
        /// <remarks>
        /// Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;AuthorizationServerPolicyRule&gt;</returns>
        List<AuthorizationServerPolicyRule> ListAuthorizationServerPolicyRules(string policyId, string authServerId);

        /// <summary>
        /// List Authorization Server Policy Rules
        /// </summary>
        /// <remarks>
        /// Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;AuthorizationServerPolicyRule&gt;</returns>
        ApiResponse<List<AuthorizationServerPolicyRule>> ListAuthorizationServerPolicyRulesWithHttpInfo(string policyId, string authServerId);
        /// <summary>
        /// List Authorization Servers
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>List&lt;AuthorizationServer&gt;</returns>
        List<AuthorizationServer> ListAuthorizationServers(string q = default(string), string limit = default(string), string after = default(string));

        /// <summary>
        /// List Authorization Servers
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AuthorizationServer&gt;</returns>
        ApiResponse<List<AuthorizationServer>> ListAuthorizationServersWithHttpInfo(string q = default(string), string limit = default(string), string after = default(string));
        /// <summary>
        /// List Custom OAuth 2.0 Token Claims
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;OAuth2Claim&gt;</returns>
        List<OAuth2Claim> ListOAuth2Claims(string authServerId);

        /// <summary>
        /// List Custom OAuth 2.0 Token Claims
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;OAuth2Claim&gt;</returns>
        ApiResponse<List<OAuth2Claim>> ListOAuth2ClaimsWithHttpInfo(string authServerId);
        /// <summary>
        /// List Oauth2clients for Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;OAuth2Client&gt;</returns>
        List<OAuth2Client> ListOAuth2ClientsForAuthorizationServer(string authServerId);

        /// <summary>
        /// List Oauth2clients for Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;OAuth2Client&gt;</returns>
        ApiResponse<List<OAuth2Client>> ListOAuth2ClientsForAuthorizationServerWithHttpInfo(string authServerId);
        /// <summary>
        /// List Oauth2scopes
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <returns>List&lt;OAuth2Scope&gt;</returns>
        List<OAuth2Scope> ListOAuth2Scopes(string authServerId, string q = default(string), string filter = default(string), string cursor = default(string), int? limit = default(int?));

        /// <summary>
        /// List Oauth2scopes
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <returns>ApiResponse of List&lt;OAuth2Scope&gt;</returns>
        ApiResponse<List<OAuth2Scope>> ListOAuth2ScopesWithHttpInfo(string authServerId, string q = default(string), string filter = default(string), string cursor = default(string), int? limit = default(int?));
        /// <summary>
        /// List Refresh Tokens for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <returns>List&lt;OAuth2RefreshToken&gt;</returns>
        List<OAuth2RefreshToken> ListRefreshTokensForAuthorizationServerAndClient(string authServerId, string clientId, string expand = default(string), string after = default(string), int? limit = default(int?));

        /// <summary>
        /// List Refresh Tokens for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <returns>ApiResponse of List&lt;OAuth2RefreshToken&gt;</returns>
        ApiResponse<List<OAuth2RefreshToken>> ListRefreshTokensForAuthorizationServerAndClientWithHttpInfo(string authServerId, string clientId, string expand = default(string), string after = default(string), int? limit = default(int?));
        /// <summary>
        /// Revoke Refresh Token for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <returns></returns>
        void RevokeRefreshTokenForAuthorizationServerAndClient(string authServerId, string clientId, string tokenId);

        /// <summary>
        /// Revoke Refresh Token for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeRefreshTokenForAuthorizationServerAndClientWithHttpInfo(string authServerId, string clientId, string tokenId);
        /// <summary>
        /// Revoke Refresh Tokens for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <returns></returns>
        void RevokeRefreshTokensForAuthorizationServerAndClient(string authServerId, string clientId);

        /// <summary>
        /// Revoke Refresh Tokens for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeRefreshTokensForAuthorizationServerAndClientWithHttpInfo(string authServerId, string clientId);
        /// <summary>
        /// Rotate Authorization Server Keys
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="use"></param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        List<JsonWebKey> RotateAuthorizationServerKeys(string authServerId, JwkUse use);

        /// <summary>
        /// Rotate Authorization Server Keys
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="use"></param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        ApiResponse<List<JsonWebKey>> RotateAuthorizationServerKeysWithHttpInfo(string authServerId, JwkUse use);
        /// <summary>
        /// Update Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="authorizationServer"></param>
        /// <returns>AuthorizationServer</returns>
        AuthorizationServer UpdateAuthorizationServer(string authServerId, AuthorizationServer authorizationServer);

        /// <summary>
        /// Update Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="authorizationServer"></param>
        /// <returns>ApiResponse of AuthorizationServer</returns>
        ApiResponse<AuthorizationServer> UpdateAuthorizationServerWithHttpInfo(string authServerId, AuthorizationServer authorizationServer);
        /// <summary>
        /// Update Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="policy"></param>
        /// <returns>AuthorizationServerPolicy</returns>
        AuthorizationServerPolicy UpdateAuthorizationServerPolicy(string authServerId, string policyId, AuthorizationServerPolicy policy);

        /// <summary>
        /// Update Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="policy"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicy</returns>
        ApiResponse<AuthorizationServerPolicy> UpdateAuthorizationServerPolicyWithHttpInfo(string authServerId, string policyId, AuthorizationServerPolicy policy);
        /// <summary>
        /// Update Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="policyRule"></param>
        /// <returns>AuthorizationServerPolicyRule</returns>
        AuthorizationServerPolicyRule UpdateAuthorizationServerPolicyRule(string policyId, string authServerId, string ruleId, AuthorizationServerPolicyRule policyRule);

        /// <summary>
        /// Update Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="policyRule"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicyRule</returns>
        ApiResponse<AuthorizationServerPolicyRule> UpdateAuthorizationServerPolicyRuleWithHttpInfo(string policyId, string authServerId, string ruleId, AuthorizationServerPolicyRule policyRule);
        /// <summary>
        /// Update Custom OAuth 2.0 Token Claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <returns>OAuth2Claim</returns>
        OAuth2Claim UpdateOAuth2Claim(string authServerId, string claimId, OAuth2Claim oAuth2Claim);

        /// <summary>
        /// Update Custom OAuth 2.0 Token Claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <returns>ApiResponse of OAuth2Claim</returns>
        ApiResponse<OAuth2Claim> UpdateOAuth2ClaimWithHttpInfo(string authServerId, string claimId, OAuth2Claim oAuth2Claim);
        /// <summary>
        /// Update Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <returns>OAuth2Scope</returns>
        OAuth2Scope UpdateOAuth2Scope(string authServerId, string scopeId, OAuth2Scope oAuth2Scope);

        /// <summary>
        /// Update Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <returns>ApiResponse of OAuth2Scope</returns>
        ApiResponse<OAuth2Scope> UpdateOAuth2ScopeWithHttpInfo(string authServerId, string scopeId, OAuth2Scope oAuth2Scope);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizationServerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Activate Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivateAuthorizationServerAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Activate Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivateAuthorizationServerWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Activate Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivateAuthorizationServerPolicyAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Activate Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivateAuthorizationServerPolicyWithHttpInfoAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Activate Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivateAuthorizationServerPolicyRuleAsync(string authServerId, string policyId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Activate Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivateAuthorizationServerPolicyRuleWithHttpInfoAsync(string authServerId, string policyId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServer</returns>
        System.Threading.Tasks.Task<AuthorizationServer> CreateAuthorizationServerAsync(AuthorizationServer authorizationServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServer)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServer>> CreateAuthorizationServerWithHttpInfoAsync(AuthorizationServer authorizationServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServerPolicy</returns>
        System.Threading.Tasks.Task<AuthorizationServerPolicy> CreateAuthorizationServerPolicyAsync(string authServerId, AuthorizationServerPolicy policy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicy>> CreateAuthorizationServerPolicyWithHttpInfoAsync(string authServerId, AuthorizationServerPolicy policy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyRule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServerPolicyRule</returns>
        System.Threading.Tasks.Task<AuthorizationServerPolicyRule> CreateAuthorizationServerPolicyRuleAsync(string policyId, string authServerId, AuthorizationServerPolicyRule policyRule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyRule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicyRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicyRule>> CreateAuthorizationServerPolicyRuleWithHttpInfoAsync(string policyId, string authServerId, AuthorizationServerPolicyRule policyRule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Custom OAuth 2.0 Token Claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Claim</returns>
        System.Threading.Tasks.Task<OAuth2Claim> CreateOAuth2ClaimAsync(string authServerId, OAuth2Claim oAuth2Claim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Custom OAuth 2.0 Token Claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Claim)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Claim>> CreateOAuth2ClaimWithHttpInfoAsync(string authServerId, OAuth2Claim oAuth2Claim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Scope</returns>
        System.Threading.Tasks.Task<OAuth2Scope> CreateOAuth2ScopeAsync(string authServerId, OAuth2Scope oAuth2Scope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Scope)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Scope>> CreateOAuth2ScopeWithHttpInfoAsync(string authServerId, OAuth2Scope oAuth2Scope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deactivate Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeactivateAuthorizationServerAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deactivate Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateAuthorizationServerWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deactivate Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeactivateAuthorizationServerPolicyAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deactivate Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateAuthorizationServerPolicyWithHttpInfoAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deactivate Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeactivateAuthorizationServerPolicyRuleAsync(string authServerId, string policyId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deactivate Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateAuthorizationServerPolicyRuleWithHttpInfoAsync(string authServerId, string policyId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthorizationServerAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthorizationServerWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthorizationServerPolicyAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthorizationServerPolicyWithHttpInfoAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthorizationServerPolicyRuleAsync(string policyId, string authServerId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthorizationServerPolicyRuleWithHttpInfoAsync(string policyId, string authServerId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Custom OAuth 2.0 Token Claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOAuth2ClaimAsync(string authServerId, string claimId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Custom OAuth 2.0 Token Claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuth2ClaimWithHttpInfoAsync(string authServerId, string claimId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOAuth2ScopeAsync(string authServerId, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuth2ScopeWithHttpInfoAsync(string authServerId, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServer</returns>
        System.Threading.Tasks.Task<AuthorizationServer> GetAuthorizationServerAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServer)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServer>> GetAuthorizationServerWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServerPolicy</returns>
        System.Threading.Tasks.Task<AuthorizationServerPolicy> GetAuthorizationServerPolicyAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicy>> GetAuthorizationServerPolicyWithHttpInfoAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServerPolicyRule</returns>
        System.Threading.Tasks.Task<AuthorizationServerPolicyRule> GetAuthorizationServerPolicyRuleAsync(string policyId, string authServerId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicyRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicyRule>> GetAuthorizationServerPolicyRuleWithHttpInfoAsync(string policyId, string authServerId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Oauth2claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Claim</returns>
        System.Threading.Tasks.Task<OAuth2Claim> GetOAuth2ClaimAsync(string authServerId, string claimId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Oauth2claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Claim)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Claim>> GetOAuth2ClaimWithHttpInfoAsync(string authServerId, string claimId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Scope</returns>
        System.Threading.Tasks.Task<OAuth2Scope> GetOAuth2ScopeAsync(string authServerId, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Scope)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Scope>> GetOAuth2ScopeWithHttpInfoAsync(string authServerId, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Refresh Token for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2RefreshToken</returns>
        System.Threading.Tasks.Task<OAuth2RefreshToken> GetRefreshTokenForAuthorizationServerAndClientAsync(string authServerId, string clientId, string tokenId, string expand = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Refresh Token for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2RefreshToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2RefreshToken>> GetRefreshTokenForAuthorizationServerAndClientWithHttpInfoAsync(string authServerId, string clientId, string tokenId, string expand = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Authorization Server Keys
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        System.Threading.Tasks.Task<List<JsonWebKey>> ListAuthorizationServerKeysAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Authorization Server Keys
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JsonWebKey>>> ListAuthorizationServerKeysWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Authorization Server Policies
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AuthorizationServerPolicy&gt;</returns>
        System.Threading.Tasks.Task<List<AuthorizationServerPolicy>> ListAuthorizationServerPoliciesAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Authorization Server Policies
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizationServerPolicy&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuthorizationServerPolicy>>> ListAuthorizationServerPoliciesWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Authorization Server Policy Rules
        /// </summary>
        /// <remarks>
        /// Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AuthorizationServerPolicyRule&gt;</returns>
        System.Threading.Tasks.Task<List<AuthorizationServerPolicyRule>> ListAuthorizationServerPolicyRulesAsync(string policyId, string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Authorization Server Policy Rules
        /// </summary>
        /// <remarks>
        /// Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizationServerPolicyRule&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuthorizationServerPolicyRule>>> ListAuthorizationServerPolicyRulesWithHttpInfoAsync(string policyId, string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Authorization Servers
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AuthorizationServer&gt;</returns>
        System.Threading.Tasks.Task<List<AuthorizationServer>> ListAuthorizationServersAsync(string q = default(string), string limit = default(string), string after = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Authorization Servers
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizationServer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuthorizationServer>>> ListAuthorizationServersWithHttpInfoAsync(string q = default(string), string limit = default(string), string after = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Custom OAuth 2.0 Token Claims
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2Claim&gt;</returns>
        System.Threading.Tasks.Task<List<OAuth2Claim>> ListOAuth2ClaimsAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Custom OAuth 2.0 Token Claims
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Claim&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuth2Claim>>> ListOAuth2ClaimsWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Oauth2clients for Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2Client&gt;</returns>
        System.Threading.Tasks.Task<List<OAuth2Client>> ListOAuth2ClientsForAuthorizationServerAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Oauth2clients for Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Client&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuth2Client>>> ListOAuth2ClientsForAuthorizationServerWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Oauth2scopes
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2Scope&gt;</returns>
        System.Threading.Tasks.Task<List<OAuth2Scope>> ListOAuth2ScopesAsync(string authServerId, string q = default(string), string filter = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Oauth2scopes
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Scope&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuth2Scope>>> ListOAuth2ScopesWithHttpInfoAsync(string authServerId, string q = default(string), string filter = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Refresh Tokens for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2RefreshToken&gt;</returns>
        System.Threading.Tasks.Task<List<OAuth2RefreshToken>> ListRefreshTokensForAuthorizationServerAndClientAsync(string authServerId, string clientId, string expand = default(string), string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Refresh Tokens for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2RefreshToken&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuth2RefreshToken>>> ListRefreshTokensForAuthorizationServerAndClientWithHttpInfoAsync(string authServerId, string clientId, string expand = default(string), string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke Refresh Token for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeRefreshTokenForAuthorizationServerAndClientAsync(string authServerId, string clientId, string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revoke Refresh Token for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeRefreshTokenForAuthorizationServerAndClientWithHttpInfoAsync(string authServerId, string clientId, string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke Refresh Tokens for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeRefreshTokensForAuthorizationServerAndClientAsync(string authServerId, string clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revoke Refresh Tokens for Authorization Server and Client
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeRefreshTokensForAuthorizationServerAndClientWithHttpInfoAsync(string authServerId, string clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rotate Authorization Server Keys
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="use"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        System.Threading.Tasks.Task<List<JsonWebKey>> RotateAuthorizationServerKeysAsync(string authServerId, JwkUse use, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rotate Authorization Server Keys
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="use"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JsonWebKey>>> RotateAuthorizationServerKeysWithHttpInfoAsync(string authServerId, JwkUse use, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="authorizationServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServer</returns>
        System.Threading.Tasks.Task<AuthorizationServer> UpdateAuthorizationServerAsync(string authServerId, AuthorizationServer authorizationServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Authorization Server
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="authorizationServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServer)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServer>> UpdateAuthorizationServerWithHttpInfoAsync(string authServerId, AuthorizationServer authorizationServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="policy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServerPolicy</returns>
        System.Threading.Tasks.Task<AuthorizationServerPolicy> UpdateAuthorizationServerPolicyAsync(string authServerId, string policyId, AuthorizationServerPolicy policy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Authorization Server Policy
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="policy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicy>> UpdateAuthorizationServerPolicyWithHttpInfoAsync(string authServerId, string policyId, AuthorizationServerPolicy policy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="policyRule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServerPolicyRule</returns>
        System.Threading.Tasks.Task<AuthorizationServerPolicyRule> UpdateAuthorizationServerPolicyRuleAsync(string policyId, string authServerId, string ruleId, AuthorizationServerPolicyRule policyRule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Authorization Server Policy Rule
        /// </summary>
        /// <remarks>
        /// Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="policyRule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicyRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicyRule>> UpdateAuthorizationServerPolicyRuleWithHttpInfoAsync(string policyId, string authServerId, string ruleId, AuthorizationServerPolicyRule policyRule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Custom OAuth 2.0 Token Claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Claim</returns>
        System.Threading.Tasks.Task<OAuth2Claim> UpdateOAuth2ClaimAsync(string authServerId, string claimId, OAuth2Claim oAuth2Claim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Custom OAuth 2.0 Token Claim
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Claim)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Claim>> UpdateOAuth2ClaimWithHttpInfoAsync(string authServerId, string claimId, OAuth2Claim oAuth2Claim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Scope</returns>
        System.Threading.Tasks.Task<OAuth2Scope> UpdateOAuth2ScopeAsync(string authServerId, string scopeId, OAuth2Scope oAuth2Scope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Oauth2scope
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Scope)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Scope>> UpdateOAuth2ScopeWithHttpInfoAsync(string authServerId, string scopeId, OAuth2Scope oAuth2Scope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizationServerApi : IAuthorizationServerApiSync, IAuthorizationServerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthorizationServerApi : IAuthorizationServerApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationServerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthorizationServerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationServerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthorizationServerApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationServerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthorizationServerApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationServerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthorizationServerApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Activate Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns></returns>
        public void ActivateAuthorizationServer(string authServerId)
        {
            ActivateAuthorizationServerWithHttpInfo(authServerId);
        }

        /// <summary>
        /// Activate Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ActivateAuthorizationServerWithHttpInfo(string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ActivateAuthorizationServer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/authorizationServers/{authServerId}/lifecycle/activate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateAuthorizationServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivateAuthorizationServerAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ActivateAuthorizationServerWithHttpInfoAsync(authServerId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Activate Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ActivateAuthorizationServerWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ActivateAuthorizationServer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/authorizationServers/{authServerId}/lifecycle/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateAuthorizationServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate Authorization Server Policy Activate Authorization Server Policy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns></returns>
        public void ActivateAuthorizationServerPolicy(string authServerId, string policyId)
        {
            ActivateAuthorizationServerPolicyWithHttpInfo(authServerId, policyId);
        }

        /// <summary>
        /// Activate Authorization Server Policy Activate Authorization Server Policy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ActivateAuthorizationServerPolicyWithHttpInfo(string authServerId, string policyId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicy");
            }

            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicy");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/activate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateAuthorizationServerPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate Authorization Server Policy Activate Authorization Server Policy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivateAuthorizationServerPolicyAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ActivateAuthorizationServerPolicyWithHttpInfoAsync(authServerId, policyId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Activate Authorization Server Policy Activate Authorization Server Policy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ActivateAuthorizationServerPolicyWithHttpInfoAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicy");
            }

            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicy");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateAuthorizationServerPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate Authorization Server Policy Rule Activate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        public void ActivateAuthorizationServerPolicyRule(string authServerId, string policyId, string ruleId)
        {
            ActivateAuthorizationServerPolicyRuleWithHttpInfo(authServerId, policyId, ruleId);
        }

        /// <summary>
        /// Activate Authorization Server Policy Rule Activate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ActivateAuthorizationServerPolicyRuleWithHttpInfo(string authServerId, string policyId, string ruleId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicyRule");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ruleId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/activate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateAuthorizationServerPolicyRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate Authorization Server Policy Rule Activate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivateAuthorizationServerPolicyRuleAsync(string authServerId, string policyId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ActivateAuthorizationServerPolicyRuleWithHttpInfoAsync(authServerId, policyId, ruleId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Activate Authorization Server Policy Rule Activate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ActivateAuthorizationServerPolicyRuleWithHttpInfoAsync(string authServerId, string policyId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicyRule");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ruleId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateAuthorizationServerPolicyRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationServer"></param>
        /// <returns>AuthorizationServer</returns>
        public AuthorizationServer CreateAuthorizationServer(AuthorizationServer authorizationServer)
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServer> localVarResponse = CreateAuthorizationServerWithHttpInfo(authorizationServer);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationServer"></param>
        /// <returns>ApiResponse of AuthorizationServer</returns>
        public Org.OpenAPITools.Client.ApiResponse<AuthorizationServer> CreateAuthorizationServerWithHttpInfo(AuthorizationServer authorizationServer)
        {
            // verify the required parameter 'authorizationServer' is set
            if (authorizationServer == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorizationServer' when calling AuthorizationServerApi->CreateAuthorizationServer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authorizationServer;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthorizationServer>("/api/v1/authorizationServers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthorizationServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServer</returns>
        public async System.Threading.Tasks.Task<AuthorizationServer> CreateAuthorizationServerAsync(AuthorizationServer authorizationServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServer> localVarResponse = await CreateAuthorizationServerWithHttpInfoAsync(authorizationServer, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServer)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AuthorizationServer>> CreateAuthorizationServerWithHttpInfoAsync(AuthorizationServer authorizationServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorizationServer' is set
            if (authorizationServer == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorizationServer' when calling AuthorizationServerApi->CreateAuthorizationServer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authorizationServer;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthorizationServer>("/api/v1/authorizationServers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthorizationServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policy"></param>
        /// <returns>AuthorizationServerPolicy</returns>
        public AuthorizationServerPolicy CreateAuthorizationServerPolicy(string authServerId, AuthorizationServerPolicy policy)
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicy> localVarResponse = CreateAuthorizationServerPolicyWithHttpInfo(authServerId, policy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policy"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicy</returns>
        public Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicy> CreateAuthorizationServerPolicyWithHttpInfo(string authServerId, AuthorizationServerPolicy policy)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateAuthorizationServerPolicy");
            }

            // verify the required parameter 'policy' is set
            if (policy == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policy' when calling AuthorizationServerApi->CreateAuthorizationServerPolicy");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.Data = policy;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthorizationServerPolicy>("/api/v1/authorizationServers/{authServerId}/policies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthorizationServerPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServerPolicy</returns>
        public async System.Threading.Tasks.Task<AuthorizationServerPolicy> CreateAuthorizationServerPolicyAsync(string authServerId, AuthorizationServerPolicy policy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicy> localVarResponse = await CreateAuthorizationServerPolicyWithHttpInfoAsync(authServerId, policy, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicy)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicy>> CreateAuthorizationServerPolicyWithHttpInfoAsync(string authServerId, AuthorizationServerPolicy policy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateAuthorizationServerPolicy");
            }

            // verify the required parameter 'policy' is set
            if (policy == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policy' when calling AuthorizationServerApi->CreateAuthorizationServerPolicy");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.Data = policy;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthorizationServerPolicy>("/api/v1/authorizationServers/{authServerId}/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthorizationServerPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Authorization Server Policy Rule Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyRule"></param>
        /// <returns>AuthorizationServerPolicyRule</returns>
        public AuthorizationServerPolicyRule CreateAuthorizationServerPolicyRule(string policyId, string authServerId, AuthorizationServerPolicyRule policyRule)
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicyRule> localVarResponse = CreateAuthorizationServerPolicyRuleWithHttpInfo(policyId, authServerId, policyRule);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Authorization Server Policy Rule Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyRule"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicyRule</returns>
        public Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicyRule> CreateAuthorizationServerPolicyRuleWithHttpInfo(string policyId, string authServerId, AuthorizationServerPolicyRule policyRule)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->CreateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'policyRule' is set
            if (policyRule == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyRule' when calling AuthorizationServerApi->CreateAuthorizationServerPolicyRule");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.Data = policyRule;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthorizationServerPolicyRule>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthorizationServerPolicyRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Authorization Server Policy Rule Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyRule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServerPolicyRule</returns>
        public async System.Threading.Tasks.Task<AuthorizationServerPolicyRule> CreateAuthorizationServerPolicyRuleAsync(string policyId, string authServerId, AuthorizationServerPolicyRule policyRule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicyRule> localVarResponse = await CreateAuthorizationServerPolicyRuleWithHttpInfoAsync(policyId, authServerId, policyRule, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Authorization Server Policy Rule Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyRule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicyRule)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicyRule>> CreateAuthorizationServerPolicyRuleWithHttpInfoAsync(string policyId, string authServerId, AuthorizationServerPolicyRule policyRule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->CreateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'policyRule' is set
            if (policyRule == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyRule' when calling AuthorizationServerApi->CreateAuthorizationServerPolicyRule");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.Data = policyRule;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthorizationServerPolicyRule>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthorizationServerPolicyRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Custom OAuth 2.0 Token Claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <returns>OAuth2Claim</returns>
        public OAuth2Claim CreateOAuth2Claim(string authServerId, OAuth2Claim oAuth2Claim)
        {
            Org.OpenAPITools.Client.ApiResponse<OAuth2Claim> localVarResponse = CreateOAuth2ClaimWithHttpInfo(authServerId, oAuth2Claim);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Custom OAuth 2.0 Token Claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <returns>ApiResponse of OAuth2Claim</returns>
        public Org.OpenAPITools.Client.ApiResponse<OAuth2Claim> CreateOAuth2ClaimWithHttpInfo(string authServerId, OAuth2Claim oAuth2Claim)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateOAuth2Claim");
            }

            // verify the required parameter 'oAuth2Claim' is set
            if (oAuth2Claim == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'oAuth2Claim' when calling AuthorizationServerApi->CreateOAuth2Claim");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.Data = oAuth2Claim;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OAuth2Claim>("/api/v1/authorizationServers/{authServerId}/claims", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOAuth2Claim", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Custom OAuth 2.0 Token Claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Claim</returns>
        public async System.Threading.Tasks.Task<OAuth2Claim> CreateOAuth2ClaimAsync(string authServerId, OAuth2Claim oAuth2Claim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OAuth2Claim> localVarResponse = await CreateOAuth2ClaimWithHttpInfoAsync(authServerId, oAuth2Claim, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Custom OAuth 2.0 Token Claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Claim)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OAuth2Claim>> CreateOAuth2ClaimWithHttpInfoAsync(string authServerId, OAuth2Claim oAuth2Claim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateOAuth2Claim");
            }

            // verify the required parameter 'oAuth2Claim' is set
            if (oAuth2Claim == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'oAuth2Claim' when calling AuthorizationServerApi->CreateOAuth2Claim");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.Data = oAuth2Claim;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OAuth2Claim>("/api/v1/authorizationServers/{authServerId}/claims", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOAuth2Claim", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <returns>OAuth2Scope</returns>
        public OAuth2Scope CreateOAuth2Scope(string authServerId, OAuth2Scope oAuth2Scope)
        {
            Org.OpenAPITools.Client.ApiResponse<OAuth2Scope> localVarResponse = CreateOAuth2ScopeWithHttpInfo(authServerId, oAuth2Scope);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <returns>ApiResponse of OAuth2Scope</returns>
        public Org.OpenAPITools.Client.ApiResponse<OAuth2Scope> CreateOAuth2ScopeWithHttpInfo(string authServerId, OAuth2Scope oAuth2Scope)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateOAuth2Scope");
            }

            // verify the required parameter 'oAuth2Scope' is set
            if (oAuth2Scope == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'oAuth2Scope' when calling AuthorizationServerApi->CreateOAuth2Scope");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.Data = oAuth2Scope;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OAuth2Scope>("/api/v1/authorizationServers/{authServerId}/scopes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOAuth2Scope", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Scope</returns>
        public async System.Threading.Tasks.Task<OAuth2Scope> CreateOAuth2ScopeAsync(string authServerId, OAuth2Scope oAuth2Scope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OAuth2Scope> localVarResponse = await CreateOAuth2ScopeWithHttpInfoAsync(authServerId, oAuth2Scope, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Scope)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OAuth2Scope>> CreateOAuth2ScopeWithHttpInfoAsync(string authServerId, OAuth2Scope oAuth2Scope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateOAuth2Scope");
            }

            // verify the required parameter 'oAuth2Scope' is set
            if (oAuth2Scope == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'oAuth2Scope' when calling AuthorizationServerApi->CreateOAuth2Scope");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.Data = oAuth2Scope;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OAuth2Scope>("/api/v1/authorizationServers/{authServerId}/scopes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOAuth2Scope", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns></returns>
        public void DeactivateAuthorizationServer(string authServerId)
        {
            DeactivateAuthorizationServerWithHttpInfo(authServerId);
        }

        /// <summary>
        /// Deactivate Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeactivateAuthorizationServerWithHttpInfo(string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeactivateAuthorizationServer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/authorizationServers/{authServerId}/lifecycle/deactivate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateAuthorizationServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeactivateAuthorizationServerAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeactivateAuthorizationServerWithHttpInfoAsync(authServerId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deactivate Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeactivateAuthorizationServerWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeactivateAuthorizationServer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/authorizationServers/{authServerId}/lifecycle/deactivate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateAuthorizationServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate Authorization Server Policy Deactivate Authorization Server Policy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns></returns>
        public void DeactivateAuthorizationServerPolicy(string authServerId, string policyId)
        {
            DeactivateAuthorizationServerPolicyWithHttpInfo(authServerId, policyId);
        }

        /// <summary>
        /// Deactivate Authorization Server Policy Deactivate Authorization Server Policy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeactivateAuthorizationServerPolicyWithHttpInfo(string authServerId, string policyId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicy");
            }

            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicy");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/deactivate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateAuthorizationServerPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate Authorization Server Policy Deactivate Authorization Server Policy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeactivateAuthorizationServerPolicyAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeactivateAuthorizationServerPolicyWithHttpInfoAsync(authServerId, policyId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deactivate Authorization Server Policy Deactivate Authorization Server Policy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeactivateAuthorizationServerPolicyWithHttpInfoAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicy");
            }

            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicy");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/deactivate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateAuthorizationServerPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate Authorization Server Policy Rule Deactivate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        public void DeactivateAuthorizationServerPolicyRule(string authServerId, string policyId, string ruleId)
        {
            DeactivateAuthorizationServerPolicyRuleWithHttpInfo(authServerId, policyId, ruleId);
        }

        /// <summary>
        /// Deactivate Authorization Server Policy Rule Deactivate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeactivateAuthorizationServerPolicyRuleWithHttpInfo(string authServerId, string policyId, string ruleId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicyRule");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ruleId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateAuthorizationServerPolicyRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate Authorization Server Policy Rule Deactivate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeactivateAuthorizationServerPolicyRuleAsync(string authServerId, string policyId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeactivateAuthorizationServerPolicyRuleWithHttpInfoAsync(authServerId, policyId, ruleId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deactivate Authorization Server Policy Rule Deactivate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeactivateAuthorizationServerPolicyRuleWithHttpInfoAsync(string authServerId, string policyId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicyRule");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ruleId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateAuthorizationServerPolicyRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns></returns>
        public void DeleteAuthorizationServer(string authServerId)
        {
            DeleteAuthorizationServerWithHttpInfo(authServerId);
        }

        /// <summary>
        /// Delete Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeleteAuthorizationServerWithHttpInfo(string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteAuthorizationServer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/authorizationServers/{authServerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthorizationServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthorizationServerAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthorizationServerWithHttpInfoAsync(authServerId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeleteAuthorizationServerWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteAuthorizationServer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/authorizationServers/{authServerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthorizationServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns></returns>
        public void DeleteAuthorizationServerPolicy(string authServerId, string policyId)
        {
            DeleteAuthorizationServerPolicyWithHttpInfo(authServerId, policyId);
        }

        /// <summary>
        /// Delete Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeleteAuthorizationServerPolicyWithHttpInfo(string authServerId, string policyId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicy");
            }

            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicy");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthorizationServerPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthorizationServerPolicyAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthorizationServerPolicyWithHttpInfoAsync(authServerId, policyId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeleteAuthorizationServerPolicyWithHttpInfoAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicy");
            }

            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicy");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthorizationServerPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Authorization Server Policy Rule Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        public void DeleteAuthorizationServerPolicyRule(string policyId, string authServerId, string ruleId)
        {
            DeleteAuthorizationServerPolicyRuleWithHttpInfo(policyId, authServerId, ruleId);
        }

        /// <summary>
        /// Delete Authorization Server Policy Rule Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeleteAuthorizationServerPolicyRuleWithHttpInfo(string policyId, string authServerId, string ruleId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicyRule");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ruleId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthorizationServerPolicyRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Authorization Server Policy Rule Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthorizationServerPolicyRuleAsync(string policyId, string authServerId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthorizationServerPolicyRuleWithHttpInfoAsync(policyId, authServerId, ruleId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Authorization Server Policy Rule Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeleteAuthorizationServerPolicyRuleWithHttpInfoAsync(string policyId, string authServerId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicyRule");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ruleId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthorizationServerPolicyRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Custom OAuth 2.0 Token Claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns></returns>
        public void DeleteOAuth2Claim(string authServerId, string claimId)
        {
            DeleteOAuth2ClaimWithHttpInfo(authServerId, claimId);
        }

        /// <summary>
        /// Delete Custom OAuth 2.0 Token Claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeleteOAuth2ClaimWithHttpInfo(string authServerId, string claimId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteOAuth2Claim");
            }

            // verify the required parameter 'claimId' is set
            if (claimId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'claimId' when calling AuthorizationServerApi->DeleteOAuth2Claim");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("claimId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(claimId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/authorizationServers/{authServerId}/claims/{claimId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Claim", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Custom OAuth 2.0 Token Claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOAuth2ClaimAsync(string authServerId, string claimId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteOAuth2ClaimWithHttpInfoAsync(authServerId, claimId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Custom OAuth 2.0 Token Claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeleteOAuth2ClaimWithHttpInfoAsync(string authServerId, string claimId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteOAuth2Claim");
            }

            // verify the required parameter 'claimId' is set
            if (claimId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'claimId' when calling AuthorizationServerApi->DeleteOAuth2Claim");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("claimId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(claimId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/authorizationServers/{authServerId}/claims/{claimId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Claim", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns></returns>
        public void DeleteOAuth2Scope(string authServerId, string scopeId)
        {
            DeleteOAuth2ScopeWithHttpInfo(authServerId, scopeId);
        }

        /// <summary>
        /// Delete Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeleteOAuth2ScopeWithHttpInfo(string authServerId, string scopeId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteOAuth2Scope");
            }

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'scopeId' when calling AuthorizationServerApi->DeleteOAuth2Scope");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scopeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(scopeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Scope", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOAuth2ScopeAsync(string authServerId, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteOAuth2ScopeWithHttpInfoAsync(authServerId, scopeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeleteOAuth2ScopeWithHttpInfoAsync(string authServerId, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteOAuth2Scope");
            }

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'scopeId' when calling AuthorizationServerApi->DeleteOAuth2Scope");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scopeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(scopeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Scope", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>AuthorizationServer</returns>
        public AuthorizationServer GetAuthorizationServer(string authServerId)
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServer> localVarResponse = GetAuthorizationServerWithHttpInfo(authServerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of AuthorizationServer</returns>
        public Org.OpenAPITools.Client.ApiResponse<AuthorizationServer> GetAuthorizationServerWithHttpInfo(string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetAuthorizationServer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthorizationServer>("/api/v1/authorizationServers/{authServerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthorizationServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServer</returns>
        public async System.Threading.Tasks.Task<AuthorizationServer> GetAuthorizationServerAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServer> localVarResponse = await GetAuthorizationServerWithHttpInfoAsync(authServerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServer)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AuthorizationServer>> GetAuthorizationServerWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetAuthorizationServer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthorizationServer>("/api/v1/authorizationServers/{authServerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthorizationServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>AuthorizationServerPolicy</returns>
        public AuthorizationServerPolicy GetAuthorizationServerPolicy(string authServerId, string policyId)
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicy> localVarResponse = GetAuthorizationServerPolicyWithHttpInfo(authServerId, policyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicy</returns>
        public Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicy> GetAuthorizationServerPolicyWithHttpInfo(string authServerId, string policyId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetAuthorizationServerPolicy");
            }

            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->GetAuthorizationServerPolicy");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthorizationServerPolicy>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthorizationServerPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServerPolicy</returns>
        public async System.Threading.Tasks.Task<AuthorizationServerPolicy> GetAuthorizationServerPolicyAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicy> localVarResponse = await GetAuthorizationServerPolicyWithHttpInfoAsync(authServerId, policyId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicy)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicy>> GetAuthorizationServerPolicyWithHttpInfoAsync(string authServerId, string policyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetAuthorizationServerPolicy");
            }

            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->GetAuthorizationServerPolicy");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthorizationServerPolicy>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthorizationServerPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Authorization Server Policy Rule Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>AuthorizationServerPolicyRule</returns>
        public AuthorizationServerPolicyRule GetAuthorizationServerPolicyRule(string policyId, string authServerId, string ruleId)
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicyRule> localVarResponse = GetAuthorizationServerPolicyRuleWithHttpInfo(policyId, authServerId, ruleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Authorization Server Policy Rule Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicyRule</returns>
        public Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicyRule> GetAuthorizationServerPolicyRuleWithHttpInfo(string policyId, string authServerId, string ruleId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->GetAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->GetAuthorizationServerPolicyRule");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ruleId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthorizationServerPolicyRule>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthorizationServerPolicyRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Authorization Server Policy Rule Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServerPolicyRule</returns>
        public async System.Threading.Tasks.Task<AuthorizationServerPolicyRule> GetAuthorizationServerPolicyRuleAsync(string policyId, string authServerId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicyRule> localVarResponse = await GetAuthorizationServerPolicyRuleWithHttpInfoAsync(policyId, authServerId, ruleId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Authorization Server Policy Rule Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicyRule)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicyRule>> GetAuthorizationServerPolicyRuleWithHttpInfoAsync(string policyId, string authServerId, string ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->GetAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->GetAuthorizationServerPolicyRule");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ruleId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthorizationServerPolicyRule>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthorizationServerPolicyRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Oauth2claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>OAuth2Claim</returns>
        public OAuth2Claim GetOAuth2Claim(string authServerId, string claimId)
        {
            Org.OpenAPITools.Client.ApiResponse<OAuth2Claim> localVarResponse = GetOAuth2ClaimWithHttpInfo(authServerId, claimId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Oauth2claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>ApiResponse of OAuth2Claim</returns>
        public Org.OpenAPITools.Client.ApiResponse<OAuth2Claim> GetOAuth2ClaimWithHttpInfo(string authServerId, string claimId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetOAuth2Claim");
            }

            // verify the required parameter 'claimId' is set
            if (claimId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'claimId' when calling AuthorizationServerApi->GetOAuth2Claim");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("claimId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(claimId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OAuth2Claim>("/api/v1/authorizationServers/{authServerId}/claims/{claimId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2Claim", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Oauth2claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Claim</returns>
        public async System.Threading.Tasks.Task<OAuth2Claim> GetOAuth2ClaimAsync(string authServerId, string claimId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OAuth2Claim> localVarResponse = await GetOAuth2ClaimWithHttpInfoAsync(authServerId, claimId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Oauth2claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Claim)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OAuth2Claim>> GetOAuth2ClaimWithHttpInfoAsync(string authServerId, string claimId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetOAuth2Claim");
            }

            // verify the required parameter 'claimId' is set
            if (claimId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'claimId' when calling AuthorizationServerApi->GetOAuth2Claim");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("claimId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(claimId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OAuth2Claim>("/api/v1/authorizationServers/{authServerId}/claims/{claimId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2Claim", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>OAuth2Scope</returns>
        public OAuth2Scope GetOAuth2Scope(string authServerId, string scopeId)
        {
            Org.OpenAPITools.Client.ApiResponse<OAuth2Scope> localVarResponse = GetOAuth2ScopeWithHttpInfo(authServerId, scopeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>ApiResponse of OAuth2Scope</returns>
        public Org.OpenAPITools.Client.ApiResponse<OAuth2Scope> GetOAuth2ScopeWithHttpInfo(string authServerId, string scopeId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetOAuth2Scope");
            }

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'scopeId' when calling AuthorizationServerApi->GetOAuth2Scope");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scopeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(scopeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OAuth2Scope>("/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2Scope", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Scope</returns>
        public async System.Threading.Tasks.Task<OAuth2Scope> GetOAuth2ScopeAsync(string authServerId, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OAuth2Scope> localVarResponse = await GetOAuth2ScopeWithHttpInfoAsync(authServerId, scopeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Scope)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OAuth2Scope>> GetOAuth2ScopeWithHttpInfoAsync(string authServerId, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetOAuth2Scope");
            }

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'scopeId' when calling AuthorizationServerApi->GetOAuth2Scope");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scopeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(scopeId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OAuth2Scope>("/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2Scope", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Refresh Token for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>OAuth2RefreshToken</returns>
        public OAuth2RefreshToken GetRefreshTokenForAuthorizationServerAndClient(string authServerId, string clientId, string tokenId, string expand = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<OAuth2RefreshToken> localVarResponse = GetRefreshTokenForAuthorizationServerAndClientWithHttpInfo(authServerId, clientId, tokenId, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Refresh Token for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of OAuth2RefreshToken</returns>
        public Org.OpenAPITools.Client.ApiResponse<OAuth2RefreshToken> GetRefreshTokenForAuthorizationServerAndClientWithHttpInfo(string authServerId, string clientId, string tokenId, string expand = default(string))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetRefreshTokenForAuthorizationServerAndClient");
            }

            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->GetRefreshTokenForAuthorizationServerAndClient");
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'tokenId' when calling AuthorizationServerApi->GetRefreshTokenForAuthorizationServerAndClient");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OAuth2RefreshToken>("/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRefreshTokenForAuthorizationServerAndClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Refresh Token for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2RefreshToken</returns>
        public async System.Threading.Tasks.Task<OAuth2RefreshToken> GetRefreshTokenForAuthorizationServerAndClientAsync(string authServerId, string clientId, string tokenId, string expand = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OAuth2RefreshToken> localVarResponse = await GetRefreshTokenForAuthorizationServerAndClientWithHttpInfoAsync(authServerId, clientId, tokenId, expand, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Refresh Token for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2RefreshToken)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OAuth2RefreshToken>> GetRefreshTokenForAuthorizationServerAndClientWithHttpInfoAsync(string authServerId, string clientId, string tokenId, string expand = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetRefreshTokenForAuthorizationServerAndClient");
            }

            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->GetRefreshTokenForAuthorizationServerAndClient");
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'tokenId' when calling AuthorizationServerApi->GetRefreshTokenForAuthorizationServerAndClient");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OAuth2RefreshToken>("/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRefreshTokenForAuthorizationServerAndClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Authorization Server Keys Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        public List<JsonWebKey> ListAuthorizationServerKeys(string authServerId)
        {
            Org.OpenAPITools.Client.ApiResponse<List<JsonWebKey>> localVarResponse = ListAuthorizationServerKeysWithHttpInfo(authServerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Authorization Server Keys Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<JsonWebKey>> ListAuthorizationServerKeysWithHttpInfo(string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListAuthorizationServerKeys");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<JsonWebKey>>("/api/v1/authorizationServers/{authServerId}/credentials/keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAuthorizationServerKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Authorization Server Keys Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<JsonWebKey>> ListAuthorizationServerKeysAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<JsonWebKey>> localVarResponse = await ListAuthorizationServerKeysWithHttpInfoAsync(authServerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Authorization Server Keys Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<JsonWebKey>>> ListAuthorizationServerKeysWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListAuthorizationServerKeys");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<JsonWebKey>>("/api/v1/authorizationServers/{authServerId}/credentials/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAuthorizationServerKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Authorization Server Policies Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;AuthorizationServerPolicy&gt;</returns>
        public List<AuthorizationServerPolicy> ListAuthorizationServerPolicies(string authServerId)
        {
            Org.OpenAPITools.Client.ApiResponse<List<AuthorizationServerPolicy>> localVarResponse = ListAuthorizationServerPoliciesWithHttpInfo(authServerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Authorization Server Policies Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;AuthorizationServerPolicy&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<AuthorizationServerPolicy>> ListAuthorizationServerPoliciesWithHttpInfo(string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListAuthorizationServerPolicies");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AuthorizationServerPolicy>>("/api/v1/authorizationServers/{authServerId}/policies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAuthorizationServerPolicies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Authorization Server Policies Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AuthorizationServerPolicy&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuthorizationServerPolicy>> ListAuthorizationServerPoliciesAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<AuthorizationServerPolicy>> localVarResponse = await ListAuthorizationServerPoliciesWithHttpInfoAsync(authServerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Authorization Server Policies Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizationServerPolicy&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<AuthorizationServerPolicy>>> ListAuthorizationServerPoliciesWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListAuthorizationServerPolicies");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AuthorizationServerPolicy>>("/api/v1/authorizationServers/{authServerId}/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAuthorizationServerPolicies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Authorization Server Policy Rules Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;AuthorizationServerPolicyRule&gt;</returns>
        public List<AuthorizationServerPolicyRule> ListAuthorizationServerPolicyRules(string policyId, string authServerId)
        {
            Org.OpenAPITools.Client.ApiResponse<List<AuthorizationServerPolicyRule>> localVarResponse = ListAuthorizationServerPolicyRulesWithHttpInfo(policyId, authServerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Authorization Server Policy Rules Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;AuthorizationServerPolicyRule&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<AuthorizationServerPolicyRule>> ListAuthorizationServerPolicyRulesWithHttpInfo(string policyId, string authServerId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->ListAuthorizationServerPolicyRules");
            }

            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListAuthorizationServerPolicyRules");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AuthorizationServerPolicyRule>>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAuthorizationServerPolicyRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Authorization Server Policy Rules Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AuthorizationServerPolicyRule&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuthorizationServerPolicyRule>> ListAuthorizationServerPolicyRulesAsync(string policyId, string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<AuthorizationServerPolicyRule>> localVarResponse = await ListAuthorizationServerPolicyRulesWithHttpInfoAsync(policyId, authServerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Authorization Server Policy Rules Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizationServerPolicyRule&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<AuthorizationServerPolicyRule>>> ListAuthorizationServerPolicyRulesWithHttpInfoAsync(string policyId, string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->ListAuthorizationServerPolicyRules");
            }

            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListAuthorizationServerPolicyRules");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AuthorizationServerPolicyRule>>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAuthorizationServerPolicyRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Authorization Servers Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>List&lt;AuthorizationServer&gt;</returns>
        public List<AuthorizationServer> ListAuthorizationServers(string q = default(string), string limit = default(string), string after = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<List<AuthorizationServer>> localVarResponse = ListAuthorizationServersWithHttpInfo(q, limit, after);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Authorization Servers Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AuthorizationServer&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<AuthorizationServer>> ListAuthorizationServersWithHttpInfo(string q = default(string), string limit = default(string), string after = default(string))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AuthorizationServer>>("/api/v1/authorizationServers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAuthorizationServers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Authorization Servers Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AuthorizationServer&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuthorizationServer>> ListAuthorizationServersAsync(string q = default(string), string limit = default(string), string after = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<AuthorizationServer>> localVarResponse = await ListAuthorizationServersWithHttpInfoAsync(q, limit, after, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Authorization Servers Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizationServer&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<AuthorizationServer>>> ListAuthorizationServersWithHttpInfoAsync(string q = default(string), string limit = default(string), string after = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AuthorizationServer>>("/api/v1/authorizationServers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAuthorizationServers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Custom OAuth 2.0 Token Claims Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;OAuth2Claim&gt;</returns>
        public List<OAuth2Claim> ListOAuth2Claims(string authServerId)
        {
            Org.OpenAPITools.Client.ApiResponse<List<OAuth2Claim>> localVarResponse = ListOAuth2ClaimsWithHttpInfo(authServerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Custom OAuth 2.0 Token Claims Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;OAuth2Claim&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<OAuth2Claim>> ListOAuth2ClaimsWithHttpInfo(string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListOAuth2Claims");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OAuth2Claim>>("/api/v1/authorizationServers/{authServerId}/claims", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2Claims", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Custom OAuth 2.0 Token Claims Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2Claim&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuth2Claim>> ListOAuth2ClaimsAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<OAuth2Claim>> localVarResponse = await ListOAuth2ClaimsWithHttpInfoAsync(authServerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Custom OAuth 2.0 Token Claims Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Claim&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<OAuth2Claim>>> ListOAuth2ClaimsWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListOAuth2Claims");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OAuth2Claim>>("/api/v1/authorizationServers/{authServerId}/claims", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2Claims", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Oauth2clients for Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;OAuth2Client&gt;</returns>
        public List<OAuth2Client> ListOAuth2ClientsForAuthorizationServer(string authServerId)
        {
            Org.OpenAPITools.Client.ApiResponse<List<OAuth2Client>> localVarResponse = ListOAuth2ClientsForAuthorizationServerWithHttpInfo(authServerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Oauth2clients for Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;OAuth2Client&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<OAuth2Client>> ListOAuth2ClientsForAuthorizationServerWithHttpInfo(string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListOAuth2ClientsForAuthorizationServer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OAuth2Client>>("/api/v1/authorizationServers/{authServerId}/clients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2ClientsForAuthorizationServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Oauth2clients for Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2Client&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuth2Client>> ListOAuth2ClientsForAuthorizationServerAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<OAuth2Client>> localVarResponse = await ListOAuth2ClientsForAuthorizationServerWithHttpInfoAsync(authServerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Oauth2clients for Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Client&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<OAuth2Client>>> ListOAuth2ClientsForAuthorizationServerWithHttpInfoAsync(string authServerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListOAuth2ClientsForAuthorizationServer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OAuth2Client>>("/api/v1/authorizationServers/{authServerId}/clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2ClientsForAuthorizationServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Oauth2scopes Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <returns>List&lt;OAuth2Scope&gt;</returns>
        public List<OAuth2Scope> ListOAuth2Scopes(string authServerId, string q = default(string), string filter = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<List<OAuth2Scope>> localVarResponse = ListOAuth2ScopesWithHttpInfo(authServerId, q, filter, cursor, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Oauth2scopes Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <returns>ApiResponse of List&lt;OAuth2Scope&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<OAuth2Scope>> ListOAuth2ScopesWithHttpInfo(string authServerId, string q = default(string), string filter = default(string), string cursor = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListOAuth2Scopes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OAuth2Scope>>("/api/v1/authorizationServers/{authServerId}/scopes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2Scopes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Oauth2scopes Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2Scope&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuth2Scope>> ListOAuth2ScopesAsync(string authServerId, string q = default(string), string filter = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<OAuth2Scope>> localVarResponse = await ListOAuth2ScopesWithHttpInfoAsync(authServerId, q, filter, cursor, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Oauth2scopes Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Scope&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<OAuth2Scope>>> ListOAuth2ScopesWithHttpInfoAsync(string authServerId, string q = default(string), string filter = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListOAuth2Scopes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OAuth2Scope>>("/api/v1/authorizationServers/{authServerId}/scopes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2Scopes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Refresh Tokens for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <returns>List&lt;OAuth2RefreshToken&gt;</returns>
        public List<OAuth2RefreshToken> ListRefreshTokensForAuthorizationServerAndClient(string authServerId, string clientId, string expand = default(string), string after = default(string), int? limit = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<List<OAuth2RefreshToken>> localVarResponse = ListRefreshTokensForAuthorizationServerAndClientWithHttpInfo(authServerId, clientId, expand, after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Refresh Tokens for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <returns>ApiResponse of List&lt;OAuth2RefreshToken&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<OAuth2RefreshToken>> ListRefreshTokensForAuthorizationServerAndClientWithHttpInfo(string authServerId, string clientId, string expand = default(string), string after = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListRefreshTokensForAuthorizationServerAndClient");
            }

            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->ListRefreshTokensForAuthorizationServerAndClient");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OAuth2RefreshToken>>("/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRefreshTokensForAuthorizationServerAndClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Refresh Tokens for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2RefreshToken&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuth2RefreshToken>> ListRefreshTokensForAuthorizationServerAndClientAsync(string authServerId, string clientId, string expand = default(string), string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<OAuth2RefreshToken>> localVarResponse = await ListRefreshTokensForAuthorizationServerAndClientWithHttpInfoAsync(authServerId, clientId, expand, after, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Refresh Tokens for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2RefreshToken&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<OAuth2RefreshToken>>> ListRefreshTokensForAuthorizationServerAndClientWithHttpInfoAsync(string authServerId, string clientId, string expand = default(string), string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListRefreshTokensForAuthorizationServerAndClient");
            }

            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->ListRefreshTokensForAuthorizationServerAndClient");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OAuth2RefreshToken>>("/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRefreshTokensForAuthorizationServerAndClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke Refresh Token for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <returns></returns>
        public void RevokeRefreshTokenForAuthorizationServerAndClient(string authServerId, string clientId, string tokenId)
        {
            RevokeRefreshTokenForAuthorizationServerAndClientWithHttpInfo(authServerId, clientId, tokenId);
        }

        /// <summary>
        /// Revoke Refresh Token for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RevokeRefreshTokenForAuthorizationServerAndClientWithHttpInfo(string authServerId, string clientId, string tokenId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->RevokeRefreshTokenForAuthorizationServerAndClient");
            }

            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->RevokeRefreshTokenForAuthorizationServerAndClient");
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'tokenId' when calling AuthorizationServerApi->RevokeRefreshTokenForAuthorizationServerAndClient");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tokenId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeRefreshTokenForAuthorizationServerAndClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke Refresh Token for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeRefreshTokenForAuthorizationServerAndClientAsync(string authServerId, string clientId, string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeRefreshTokenForAuthorizationServerAndClientWithHttpInfoAsync(authServerId, clientId, tokenId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revoke Refresh Token for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RevokeRefreshTokenForAuthorizationServerAndClientWithHttpInfoAsync(string authServerId, string clientId, string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->RevokeRefreshTokenForAuthorizationServerAndClient");
            }

            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->RevokeRefreshTokenForAuthorizationServerAndClient");
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'tokenId' when calling AuthorizationServerApi->RevokeRefreshTokenForAuthorizationServerAndClient");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tokenId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeRefreshTokenForAuthorizationServerAndClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke Refresh Tokens for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <returns></returns>
        public void RevokeRefreshTokensForAuthorizationServerAndClient(string authServerId, string clientId)
        {
            RevokeRefreshTokensForAuthorizationServerAndClientWithHttpInfo(authServerId, clientId);
        }

        /// <summary>
        /// Revoke Refresh Tokens for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RevokeRefreshTokensForAuthorizationServerAndClientWithHttpInfo(string authServerId, string clientId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->RevokeRefreshTokensForAuthorizationServerAndClient");
            }

            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->RevokeRefreshTokensForAuthorizationServerAndClient");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeRefreshTokensForAuthorizationServerAndClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke Refresh Tokens for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeRefreshTokensForAuthorizationServerAndClientAsync(string authServerId, string clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeRefreshTokensForAuthorizationServerAndClientWithHttpInfoAsync(authServerId, clientId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revoke Refresh Tokens for Authorization Server and Client Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RevokeRefreshTokensForAuthorizationServerAndClientWithHttpInfoAsync(string authServerId, string clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->RevokeRefreshTokensForAuthorizationServerAndClient");
            }

            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->RevokeRefreshTokensForAuthorizationServerAndClient");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeRefreshTokensForAuthorizationServerAndClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rotate Authorization Server Keys Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="use"></param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        public List<JsonWebKey> RotateAuthorizationServerKeys(string authServerId, JwkUse use)
        {
            Org.OpenAPITools.Client.ApiResponse<List<JsonWebKey>> localVarResponse = RotateAuthorizationServerKeysWithHttpInfo(authServerId, use);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rotate Authorization Server Keys Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="use"></param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<JsonWebKey>> RotateAuthorizationServerKeysWithHttpInfo(string authServerId, JwkUse use)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->RotateAuthorizationServerKeys");
            }

            // verify the required parameter 'use' is set
            if (use == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'use' when calling AuthorizationServerApi->RotateAuthorizationServerKeys");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.Data = use;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<JsonWebKey>>("/api/v1/authorizationServers/{authServerId}/credentials/lifecycle/keyRotate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RotateAuthorizationServerKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rotate Authorization Server Keys Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="use"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<JsonWebKey>> RotateAuthorizationServerKeysAsync(string authServerId, JwkUse use, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<JsonWebKey>> localVarResponse = await RotateAuthorizationServerKeysWithHttpInfoAsync(authServerId, use, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rotate Authorization Server Keys Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="use"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<JsonWebKey>>> RotateAuthorizationServerKeysWithHttpInfoAsync(string authServerId, JwkUse use, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->RotateAuthorizationServerKeys");
            }

            // verify the required parameter 'use' is set
            if (use == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'use' when calling AuthorizationServerApi->RotateAuthorizationServerKeys");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.Data = use;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<JsonWebKey>>("/api/v1/authorizationServers/{authServerId}/credentials/lifecycle/keyRotate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RotateAuthorizationServerKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="authorizationServer"></param>
        /// <returns>AuthorizationServer</returns>
        public AuthorizationServer UpdateAuthorizationServer(string authServerId, AuthorizationServer authorizationServer)
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServer> localVarResponse = UpdateAuthorizationServerWithHttpInfo(authServerId, authorizationServer);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="authorizationServer"></param>
        /// <returns>ApiResponse of AuthorizationServer</returns>
        public Org.OpenAPITools.Client.ApiResponse<AuthorizationServer> UpdateAuthorizationServerWithHttpInfo(string authServerId, AuthorizationServer authorizationServer)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateAuthorizationServer");
            }

            // verify the required parameter 'authorizationServer' is set
            if (authorizationServer == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorizationServer' when calling AuthorizationServerApi->UpdateAuthorizationServer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.Data = authorizationServer;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthorizationServer>("/api/v1/authorizationServers/{authServerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthorizationServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="authorizationServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServer</returns>
        public async System.Threading.Tasks.Task<AuthorizationServer> UpdateAuthorizationServerAsync(string authServerId, AuthorizationServer authorizationServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServer> localVarResponse = await UpdateAuthorizationServerWithHttpInfoAsync(authServerId, authorizationServer, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Authorization Server Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="authorizationServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServer)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AuthorizationServer>> UpdateAuthorizationServerWithHttpInfoAsync(string authServerId, AuthorizationServer authorizationServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateAuthorizationServer");
            }

            // verify the required parameter 'authorizationServer' is set
            if (authorizationServer == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorizationServer' when calling AuthorizationServerApi->UpdateAuthorizationServer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.Data = authorizationServer;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthorizationServer>("/api/v1/authorizationServers/{authServerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthorizationServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="policy"></param>
        /// <returns>AuthorizationServerPolicy</returns>
        public AuthorizationServerPolicy UpdateAuthorizationServerPolicy(string authServerId, string policyId, AuthorizationServerPolicy policy)
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicy> localVarResponse = UpdateAuthorizationServerPolicyWithHttpInfo(authServerId, policyId, policy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="policy"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicy</returns>
        public Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicy> UpdateAuthorizationServerPolicyWithHttpInfo(string authServerId, string policyId, AuthorizationServerPolicy policy)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicy");
            }

            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicy");
            }

            // verify the required parameter 'policy' is set
            if (policy == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policy' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicy");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.Data = policy;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthorizationServerPolicy>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthorizationServerPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="policy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServerPolicy</returns>
        public async System.Threading.Tasks.Task<AuthorizationServerPolicy> UpdateAuthorizationServerPolicyAsync(string authServerId, string policyId, AuthorizationServerPolicy policy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicy> localVarResponse = await UpdateAuthorizationServerPolicyWithHttpInfoAsync(authServerId, policyId, policy, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Authorization Server Policy Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="policy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicy)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicy>> UpdateAuthorizationServerPolicyWithHttpInfoAsync(string authServerId, string policyId, AuthorizationServerPolicy policy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicy");
            }

            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicy");
            }

            // verify the required parameter 'policy' is set
            if (policy == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policy' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicy");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.Data = policy;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthorizationServerPolicy>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthorizationServerPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Authorization Server Policy Rule Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="policyRule"></param>
        /// <returns>AuthorizationServerPolicyRule</returns>
        public AuthorizationServerPolicyRule UpdateAuthorizationServerPolicyRule(string policyId, string authServerId, string ruleId, AuthorizationServerPolicyRule policyRule)
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicyRule> localVarResponse = UpdateAuthorizationServerPolicyRuleWithHttpInfo(policyId, authServerId, ruleId, policyRule);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Authorization Server Policy Rule Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="policyRule"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicyRule</returns>
        public Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicyRule> UpdateAuthorizationServerPolicyRuleWithHttpInfo(string policyId, string authServerId, string ruleId, AuthorizationServerPolicyRule policyRule)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'policyRule' is set
            if (policyRule == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyRule' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ruleId)); // path parameter
            localVarRequestOptions.Data = policyRule;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthorizationServerPolicyRule>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthorizationServerPolicyRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Authorization Server Policy Rule Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="policyRule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationServerPolicyRule</returns>
        public async System.Threading.Tasks.Task<AuthorizationServerPolicyRule> UpdateAuthorizationServerPolicyRuleAsync(string policyId, string authServerId, string ruleId, AuthorizationServerPolicyRule policyRule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicyRule> localVarResponse = await UpdateAuthorizationServerPolicyRuleWithHttpInfoAsync(policyId, authServerId, ruleId, policyRule, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Authorization Server Policy Rule Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <param name="policyRule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicyRule)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AuthorizationServerPolicyRule>> UpdateAuthorizationServerPolicyRuleWithHttpInfoAsync(string policyId, string authServerId, string ruleId, AuthorizationServerPolicyRule policyRule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");
            }

            // verify the required parameter 'policyRule' is set
            if (policyRule == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policyRule' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("policyId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ruleId)); // path parameter
            localVarRequestOptions.Data = policyRule;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthorizationServerPolicyRule>("/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthorizationServerPolicyRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Custom OAuth 2.0 Token Claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <returns>OAuth2Claim</returns>
        public OAuth2Claim UpdateOAuth2Claim(string authServerId, string claimId, OAuth2Claim oAuth2Claim)
        {
            Org.OpenAPITools.Client.ApiResponse<OAuth2Claim> localVarResponse = UpdateOAuth2ClaimWithHttpInfo(authServerId, claimId, oAuth2Claim);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Custom OAuth 2.0 Token Claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <returns>ApiResponse of OAuth2Claim</returns>
        public Org.OpenAPITools.Client.ApiResponse<OAuth2Claim> UpdateOAuth2ClaimWithHttpInfo(string authServerId, string claimId, OAuth2Claim oAuth2Claim)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateOAuth2Claim");
            }

            // verify the required parameter 'claimId' is set
            if (claimId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'claimId' when calling AuthorizationServerApi->UpdateOAuth2Claim");
            }

            // verify the required parameter 'oAuth2Claim' is set
            if (oAuth2Claim == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'oAuth2Claim' when calling AuthorizationServerApi->UpdateOAuth2Claim");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("claimId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(claimId)); // path parameter
            localVarRequestOptions.Data = oAuth2Claim;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<OAuth2Claim>("/api/v1/authorizationServers/{authServerId}/claims/{claimId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOAuth2Claim", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Custom OAuth 2.0 Token Claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Claim</returns>
        public async System.Threading.Tasks.Task<OAuth2Claim> UpdateOAuth2ClaimAsync(string authServerId, string claimId, OAuth2Claim oAuth2Claim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OAuth2Claim> localVarResponse = await UpdateOAuth2ClaimWithHttpInfoAsync(authServerId, claimId, oAuth2Claim, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Custom OAuth 2.0 Token Claim Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <param name="oAuth2Claim"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Claim)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OAuth2Claim>> UpdateOAuth2ClaimWithHttpInfoAsync(string authServerId, string claimId, OAuth2Claim oAuth2Claim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateOAuth2Claim");
            }

            // verify the required parameter 'claimId' is set
            if (claimId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'claimId' when calling AuthorizationServerApi->UpdateOAuth2Claim");
            }

            // verify the required parameter 'oAuth2Claim' is set
            if (oAuth2Claim == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'oAuth2Claim' when calling AuthorizationServerApi->UpdateOAuth2Claim");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("claimId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(claimId)); // path parameter
            localVarRequestOptions.Data = oAuth2Claim;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<OAuth2Claim>("/api/v1/authorizationServers/{authServerId}/claims/{claimId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOAuth2Claim", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <returns>OAuth2Scope</returns>
        public OAuth2Scope UpdateOAuth2Scope(string authServerId, string scopeId, OAuth2Scope oAuth2Scope)
        {
            Org.OpenAPITools.Client.ApiResponse<OAuth2Scope> localVarResponse = UpdateOAuth2ScopeWithHttpInfo(authServerId, scopeId, oAuth2Scope);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <returns>ApiResponse of OAuth2Scope</returns>
        public Org.OpenAPITools.Client.ApiResponse<OAuth2Scope> UpdateOAuth2ScopeWithHttpInfo(string authServerId, string scopeId, OAuth2Scope oAuth2Scope)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateOAuth2Scope");
            }

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'scopeId' when calling AuthorizationServerApi->UpdateOAuth2Scope");
            }

            // verify the required parameter 'oAuth2Scope' is set
            if (oAuth2Scope == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'oAuth2Scope' when calling AuthorizationServerApi->UpdateOAuth2Scope");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scopeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.Data = oAuth2Scope;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<OAuth2Scope>("/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOAuth2Scope", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Scope</returns>
        public async System.Threading.Tasks.Task<OAuth2Scope> UpdateOAuth2ScopeAsync(string authServerId, string scopeId, OAuth2Scope oAuth2Scope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OAuth2Scope> localVarResponse = await UpdateOAuth2ScopeWithHttpInfoAsync(authServerId, scopeId, oAuth2Scope, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Oauth2scope Success
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <param name="oAuth2Scope"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Scope)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OAuth2Scope>> UpdateOAuth2ScopeWithHttpInfoAsync(string authServerId, string scopeId, OAuth2Scope oAuth2Scope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateOAuth2Scope");
            }

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'scopeId' when calling AuthorizationServerApi->UpdateOAuth2Scope");
            }

            // verify the required parameter 'oAuth2Scope' is set
            if (oAuth2Scope == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'oAuth2Scope' when calling AuthorizationServerApi->UpdateOAuth2Scope");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("authServerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authServerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scopeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.Data = oAuth2Scope;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<OAuth2Scope>("/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOAuth2Scope", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
