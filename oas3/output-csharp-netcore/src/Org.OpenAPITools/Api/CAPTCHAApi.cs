/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICAPTCHAApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create new CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Adds a new CAPTCHA instance to your organization. In the current release, we only allow one CAPTCHA instance per org.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instance"></param>
        /// <returns>CAPTCHAInstance</returns>
        CAPTCHAInstance CreateCaptchaInstance(CAPTCHAInstance instance);

        /// <summary>
        /// Create new CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Adds a new CAPTCHA instance to your organization. In the current release, we only allow one CAPTCHA instance per org.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instance"></param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        ApiResponse<CAPTCHAInstance> CreateCaptchaInstanceWithHttpInfo(CAPTCHAInstance instance);
        /// <summary>
        /// Delete CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Delete a CAPTCHA instance by &#x60;id&#x60;. If the CAPTCHA instance is currently being used in the org, the delete will not be allowed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns></returns>
        void DeleteCaptchaInstance(string captchaId);

        /// <summary>
        /// Delete CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Delete a CAPTCHA instance by &#x60;id&#x60;. If the CAPTCHA instance is currently being used in the org, the delete will not be allowed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCaptchaInstanceWithHttpInfo(string captchaId);
        /// <summary>
        /// Get CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>CAPTCHAInstance</returns>
        CAPTCHAInstance GetCaptchaInstance(string captchaId);

        /// <summary>
        /// Get CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        ApiResponse<CAPTCHAInstance> GetCaptchaInstanceWithHttpInfo(string captchaId);
        /// <summary>
        /// List CAPTCHA instances
        /// </summary>
        /// <remarks>
        /// Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CAPTCHAInstance&gt;</returns>
        List<CAPTCHAInstance> ListCaptchaInstances();

        /// <summary>
        /// List CAPTCHA instances
        /// </summary>
        /// <remarks>
        /// Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CAPTCHAInstance&gt;</returns>
        ApiResponse<List<CAPTCHAInstance>> ListCaptchaInstancesWithHttpInfo();
        /// <summary>
        /// Partial Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <returns>CAPTCHAInstance</returns>
        CAPTCHAInstance PartialUpdateCaptchaInstance(string captchaId, CAPTCHAInstance instance);

        /// <summary>
        /// Partial Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        ApiResponse<CAPTCHAInstance> PartialUpdateCaptchaInstanceWithHttpInfo(string captchaId, CAPTCHAInstance instance);
        /// <summary>
        /// Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <returns>CAPTCHAInstance</returns>
        CAPTCHAInstance UpdateCaptchaInstance(string captchaId, CAPTCHAInstance instance);

        /// <summary>
        /// Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        ApiResponse<CAPTCHAInstance> UpdateCaptchaInstanceWithHttpInfo(string captchaId, CAPTCHAInstance instance);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICAPTCHAApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create new CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Adds a new CAPTCHA instance to your organization. In the current release, we only allow one CAPTCHA instance per org.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        System.Threading.Tasks.Task<CAPTCHAInstance> CreateCaptchaInstanceAsync(CAPTCHAInstance instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Adds a new CAPTCHA instance to your organization. In the current release, we only allow one CAPTCHA instance per org.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<CAPTCHAInstance>> CreateCaptchaInstanceWithHttpInfoAsync(CAPTCHAInstance instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Delete a CAPTCHA instance by &#x60;id&#x60;. If the CAPTCHA instance is currently being used in the org, the delete will not be allowed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCaptchaInstanceAsync(string captchaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Delete a CAPTCHA instance by &#x60;id&#x60;. If the CAPTCHA instance is currently being used in the org, the delete will not be allowed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCaptchaInstanceWithHttpInfoAsync(string captchaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        System.Threading.Tasks.Task<CAPTCHAInstance> GetCaptchaInstanceAsync(string captchaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<CAPTCHAInstance>> GetCaptchaInstanceWithHttpInfoAsync(string captchaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List CAPTCHA instances
        /// </summary>
        /// <remarks>
        /// Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CAPTCHAInstance&gt;</returns>
        System.Threading.Tasks.Task<List<CAPTCHAInstance>> ListCaptchaInstancesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List CAPTCHA instances
        /// </summary>
        /// <remarks>
        /// Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CAPTCHAInstance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CAPTCHAInstance>>> ListCaptchaInstancesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Partial Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        System.Threading.Tasks.Task<CAPTCHAInstance> PartialUpdateCaptchaInstanceAsync(string captchaId, CAPTCHAInstance instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Partial Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<CAPTCHAInstance>> PartialUpdateCaptchaInstanceWithHttpInfoAsync(string captchaId, CAPTCHAInstance instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        System.Threading.Tasks.Task<CAPTCHAInstance> UpdateCaptchaInstanceAsync(string captchaId, CAPTCHAInstance instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<CAPTCHAInstance>> UpdateCaptchaInstanceWithHttpInfoAsync(string captchaId, CAPTCHAInstance instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICAPTCHAApi : ICAPTCHAApiSync, ICAPTCHAApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CAPTCHAApi : ICAPTCHAApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CAPTCHAApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CAPTCHAApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CAPTCHAApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CAPTCHAApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CAPTCHAApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CAPTCHAApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CAPTCHAApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CAPTCHAApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create new CAPTCHA instance Adds a new CAPTCHA instance to your organization. In the current release, we only allow one CAPTCHA instance per org.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instance"></param>
        /// <returns>CAPTCHAInstance</returns>
        public CAPTCHAInstance CreateCaptchaInstance(CAPTCHAInstance instance)
        {
            Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance> localVarResponse = CreateCaptchaInstanceWithHttpInfo(instance);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new CAPTCHA instance Adds a new CAPTCHA instance to your organization. In the current release, we only allow one CAPTCHA instance per org.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instance"></param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        public Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance> CreateCaptchaInstanceWithHttpInfo(CAPTCHAInstance instance)
        {
            // verify the required parameter 'instance' is set
            if (instance == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instance' when calling CAPTCHAApi->CreateCaptchaInstance");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = instance;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CAPTCHAInstance>("/api/v1/captchas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCaptchaInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new CAPTCHA instance Adds a new CAPTCHA instance to your organization. In the current release, we only allow one CAPTCHA instance per org.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        public async System.Threading.Tasks.Task<CAPTCHAInstance> CreateCaptchaInstanceAsync(CAPTCHAInstance instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance> localVarResponse = await CreateCaptchaInstanceWithHttpInfoAsync(instance, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new CAPTCHA instance Adds a new CAPTCHA instance to your organization. In the current release, we only allow one CAPTCHA instance per org.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance>> CreateCaptchaInstanceWithHttpInfoAsync(CAPTCHAInstance instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instance' is set
            if (instance == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instance' when calling CAPTCHAApi->CreateCaptchaInstance");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = instance;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CAPTCHAInstance>("/api/v1/captchas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCaptchaInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete CAPTCHA Instance Delete a CAPTCHA instance by &#x60;id&#x60;. If the CAPTCHA instance is currently being used in the org, the delete will not be allowed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns></returns>
        public void DeleteCaptchaInstance(string captchaId)
        {
            DeleteCaptchaInstanceWithHttpInfo(captchaId);
        }

        /// <summary>
        /// Delete CAPTCHA Instance Delete a CAPTCHA instance by &#x60;id&#x60;. If the CAPTCHA instance is currently being used in the org, the delete will not be allowed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeleteCaptchaInstanceWithHttpInfo(string captchaId)
        {
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->DeleteCaptchaInstance");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("captchaId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(captchaId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/captchas/{captchaId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCaptchaInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete CAPTCHA Instance Delete a CAPTCHA instance by &#x60;id&#x60;. If the CAPTCHA instance is currently being used in the org, the delete will not be allowed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCaptchaInstanceAsync(string captchaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCaptchaInstanceWithHttpInfoAsync(captchaId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete CAPTCHA Instance Delete a CAPTCHA instance by &#x60;id&#x60;. If the CAPTCHA instance is currently being used in the org, the delete will not be allowed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeleteCaptchaInstanceWithHttpInfoAsync(string captchaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->DeleteCaptchaInstance");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("captchaId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(captchaId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/captchas/{captchaId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCaptchaInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get CAPTCHA Instance Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>CAPTCHAInstance</returns>
        public CAPTCHAInstance GetCaptchaInstance(string captchaId)
        {
            Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance> localVarResponse = GetCaptchaInstanceWithHttpInfo(captchaId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get CAPTCHA Instance Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        public Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance> GetCaptchaInstanceWithHttpInfo(string captchaId)
        {
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->GetCaptchaInstance");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("captchaId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(captchaId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CAPTCHAInstance>("/api/v1/captchas/{captchaId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCaptchaInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get CAPTCHA Instance Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        public async System.Threading.Tasks.Task<CAPTCHAInstance> GetCaptchaInstanceAsync(string captchaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance> localVarResponse = await GetCaptchaInstanceWithHttpInfoAsync(captchaId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get CAPTCHA Instance Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance>> GetCaptchaInstanceWithHttpInfoAsync(string captchaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->GetCaptchaInstance");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("captchaId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(captchaId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CAPTCHAInstance>("/api/v1/captchas/{captchaId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCaptchaInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List CAPTCHA instances Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CAPTCHAInstance&gt;</returns>
        public List<CAPTCHAInstance> ListCaptchaInstances()
        {
            Org.OpenAPITools.Client.ApiResponse<List<CAPTCHAInstance>> localVarResponse = ListCaptchaInstancesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List CAPTCHA instances Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CAPTCHAInstance&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<CAPTCHAInstance>> ListCaptchaInstancesWithHttpInfo()
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CAPTCHAInstance>>("/api/v1/captchas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCaptchaInstances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List CAPTCHA instances Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CAPTCHAInstance&gt;</returns>
        public async System.Threading.Tasks.Task<List<CAPTCHAInstance>> ListCaptchaInstancesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<CAPTCHAInstance>> localVarResponse = await ListCaptchaInstancesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List CAPTCHA instances Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CAPTCHAInstance&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<CAPTCHAInstance>>> ListCaptchaInstancesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CAPTCHAInstance>>("/api/v1/captchas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCaptchaInstances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partial Update CAPTCHA instance Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <returns>CAPTCHAInstance</returns>
        public CAPTCHAInstance PartialUpdateCaptchaInstance(string captchaId, CAPTCHAInstance instance)
        {
            Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance> localVarResponse = PartialUpdateCaptchaInstanceWithHttpInfo(captchaId, instance);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Partial Update CAPTCHA instance Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        public Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance> PartialUpdateCaptchaInstanceWithHttpInfo(string captchaId, CAPTCHAInstance instance)
        {
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->PartialUpdateCaptchaInstance");
            }

            // verify the required parameter 'instance' is set
            if (instance == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instance' when calling CAPTCHAApi->PartialUpdateCaptchaInstance");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("captchaId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(captchaId)); // path parameter
            localVarRequestOptions.Data = instance;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CAPTCHAInstance>("/api/v1/captchas/{captchaId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateCaptchaInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partial Update CAPTCHA instance Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        public async System.Threading.Tasks.Task<CAPTCHAInstance> PartialUpdateCaptchaInstanceAsync(string captchaId, CAPTCHAInstance instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance> localVarResponse = await PartialUpdateCaptchaInstanceWithHttpInfoAsync(captchaId, instance, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Partial Update CAPTCHA instance Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance>> PartialUpdateCaptchaInstanceWithHttpInfoAsync(string captchaId, CAPTCHAInstance instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->PartialUpdateCaptchaInstance");
            }

            // verify the required parameter 'instance' is set
            if (instance == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instance' when calling CAPTCHAApi->PartialUpdateCaptchaInstance");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("captchaId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(captchaId)); // path parameter
            localVarRequestOptions.Data = instance;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CAPTCHAInstance>("/api/v1/captchas/{captchaId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateCaptchaInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update CAPTCHA instance Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <returns>CAPTCHAInstance</returns>
        public CAPTCHAInstance UpdateCaptchaInstance(string captchaId, CAPTCHAInstance instance)
        {
            Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance> localVarResponse = UpdateCaptchaInstanceWithHttpInfo(captchaId, instance);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update CAPTCHA instance Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        public Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance> UpdateCaptchaInstanceWithHttpInfo(string captchaId, CAPTCHAInstance instance)
        {
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->UpdateCaptchaInstance");
            }

            // verify the required parameter 'instance' is set
            if (instance == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instance' when calling CAPTCHAApi->UpdateCaptchaInstance");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("captchaId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(captchaId)); // path parameter
            localVarRequestOptions.Data = instance;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CAPTCHAInstance>("/api/v1/captchas/{captchaId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCaptchaInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update CAPTCHA instance Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        public async System.Threading.Tasks.Task<CAPTCHAInstance> UpdateCaptchaInstanceAsync(string captchaId, CAPTCHAInstance instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance> localVarResponse = await UpdateCaptchaInstanceWithHttpInfoAsync(captchaId, instance, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update CAPTCHA instance Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <param name="instance"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CAPTCHAInstance>> UpdateCaptchaInstanceWithHttpInfoAsync(string captchaId, CAPTCHAInstance instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->UpdateCaptchaInstance");
            }

            // verify the required parameter 'instance' is set
            if (instance == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instance' when calling CAPTCHAApi->UpdateCaptchaInstance");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("captchaId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(captchaId)); // path parameter
            localVarRequestOptions.Data = instance;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CAPTCHAInstance>("/api/v1/captchas/{captchaId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCaptchaInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
