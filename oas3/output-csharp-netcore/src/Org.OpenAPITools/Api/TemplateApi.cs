/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add SMS Template
        /// </summary>
        /// <remarks>
        /// Adds a new custom SMS template to your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate"></param>
        /// <returns>SmsTemplate</returns>
        SmsTemplate CreateSmsTemplate(SmsTemplate smsTemplate);

        /// <summary>
        /// Add SMS Template
        /// </summary>
        /// <remarks>
        /// Adds a new custom SMS template to your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        ApiResponse<SmsTemplate> CreateSmsTemplateWithHttpInfo(SmsTemplate smsTemplate);
        /// <summary>
        /// Remove SMS Template
        /// </summary>
        /// <remarks>
        /// Removes an SMS template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns></returns>
        void DeleteSmsTemplate(string templateId);

        /// <summary>
        /// Remove SMS Template
        /// </summary>
        /// <remarks>
        /// Removes an SMS template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSmsTemplateWithHttpInfo(string templateId);
        /// <summary>
        /// Get SMS Template
        /// </summary>
        /// <remarks>
        /// Fetches a specific template by &#x60;id&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>SmsTemplate</returns>
        SmsTemplate GetSmsTemplate(string templateId);

        /// <summary>
        /// Get SMS Template
        /// </summary>
        /// <remarks>
        /// Fetches a specific template by &#x60;id&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        ApiResponse<SmsTemplate> GetSmsTemplateWithHttpInfo(string templateId);
        /// <summary>
        /// List SMS Templates
        /// </summary>
        /// <remarks>
        /// Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <returns>List&lt;SmsTemplate&gt;</returns>
        List<SmsTemplate> ListSmsTemplates(SmsTemplateType? templateType = default(SmsTemplateType?));

        /// <summary>
        /// List SMS Templates
        /// </summary>
        /// <remarks>
        /// Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SmsTemplate&gt;</returns>
        ApiResponse<List<SmsTemplate>> ListSmsTemplatesWithHttpInfo(SmsTemplateType? templateType = default(SmsTemplateType?));
        /// <summary>
        /// Partial SMS Template Update
        /// </summary>
        /// <remarks>
        /// Updates only some of the SMS template properties:
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <returns>SmsTemplate</returns>
        SmsTemplate PartialUpdateSmsTemplate(string templateId, SmsTemplate smsTemplate);

        /// <summary>
        /// Partial SMS Template Update
        /// </summary>
        /// <remarks>
        /// Updates only some of the SMS template properties:
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        ApiResponse<SmsTemplate> PartialUpdateSmsTemplateWithHttpInfo(string templateId, SmsTemplate smsTemplate);
        /// <summary>
        /// Update SMS Template
        /// </summary>
        /// <remarks>
        /// Updates the SMS template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <returns>SmsTemplate</returns>
        SmsTemplate UpdateSmsTemplate(string templateId, SmsTemplate smsTemplate);

        /// <summary>
        /// Update SMS Template
        /// </summary>
        /// <remarks>
        /// Updates the SMS template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        ApiResponse<SmsTemplate> UpdateSmsTemplateWithHttpInfo(string templateId, SmsTemplate smsTemplate);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add SMS Template
        /// </summary>
        /// <remarks>
        /// Adds a new custom SMS template to your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsTemplate</returns>
        System.Threading.Tasks.Task<SmsTemplate> CreateSmsTemplateAsync(SmsTemplate smsTemplate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add SMS Template
        /// </summary>
        /// <remarks>
        /// Adds a new custom SMS template to your organization.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmsTemplate>> CreateSmsTemplateWithHttpInfoAsync(SmsTemplate smsTemplate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove SMS Template
        /// </summary>
        /// <remarks>
        /// Removes an SMS template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSmsTemplateAsync(string templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove SMS Template
        /// </summary>
        /// <remarks>
        /// Removes an SMS template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSmsTemplateWithHttpInfoAsync(string templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get SMS Template
        /// </summary>
        /// <remarks>
        /// Fetches a specific template by &#x60;id&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsTemplate</returns>
        System.Threading.Tasks.Task<SmsTemplate> GetSmsTemplateAsync(string templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get SMS Template
        /// </summary>
        /// <remarks>
        /// Fetches a specific template by &#x60;id&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmsTemplate>> GetSmsTemplateWithHttpInfoAsync(string templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List SMS Templates
        /// </summary>
        /// <remarks>
        /// Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SmsTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<SmsTemplate>> ListSmsTemplatesAsync(SmsTemplateType? templateType = default(SmsTemplateType?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List SMS Templates
        /// </summary>
        /// <remarks>
        /// Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SmsTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SmsTemplate>>> ListSmsTemplatesWithHttpInfoAsync(SmsTemplateType? templateType = default(SmsTemplateType?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Partial SMS Template Update
        /// </summary>
        /// <remarks>
        /// Updates only some of the SMS template properties:
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsTemplate</returns>
        System.Threading.Tasks.Task<SmsTemplate> PartialUpdateSmsTemplateAsync(string templateId, SmsTemplate smsTemplate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Partial SMS Template Update
        /// </summary>
        /// <remarks>
        /// Updates only some of the SMS template properties:
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmsTemplate>> PartialUpdateSmsTemplateWithHttpInfoAsync(string templateId, SmsTemplate smsTemplate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update SMS Template
        /// </summary>
        /// <remarks>
        /// Updates the SMS template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsTemplate</returns>
        System.Threading.Tasks.Task<SmsTemplate> UpdateSmsTemplateAsync(string templateId, SmsTemplate smsTemplate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update SMS Template
        /// </summary>
        /// <remarks>
        /// Updates the SMS template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmsTemplate>> UpdateSmsTemplateWithHttpInfoAsync(string templateId, SmsTemplate smsTemplate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateApi : ITemplateApiSync, ITemplateApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplateApi : ITemplateApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplateApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TemplateApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add SMS Template Adds a new custom SMS template to your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate"></param>
        /// <returns>SmsTemplate</returns>
        public SmsTemplate CreateSmsTemplate(SmsTemplate smsTemplate)
        {
            Org.OpenAPITools.Client.ApiResponse<SmsTemplate> localVarResponse = CreateSmsTemplateWithHttpInfo(smsTemplate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add SMS Template Adds a new custom SMS template to your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        public Org.OpenAPITools.Client.ApiResponse<SmsTemplate> CreateSmsTemplateWithHttpInfo(SmsTemplate smsTemplate)
        {
            // verify the required parameter 'smsTemplate' is set
            if (smsTemplate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'smsTemplate' when calling TemplateApi->CreateSmsTemplate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = smsTemplate;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SmsTemplate>("/api/v1/templates/sms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSmsTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add SMS Template Adds a new custom SMS template to your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsTemplate</returns>
        public async System.Threading.Tasks.Task<SmsTemplate> CreateSmsTemplateAsync(SmsTemplate smsTemplate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SmsTemplate> localVarResponse = await CreateSmsTemplateWithHttpInfoAsync(smsTemplate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add SMS Template Adds a new custom SMS template to your organization.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SmsTemplate>> CreateSmsTemplateWithHttpInfoAsync(SmsTemplate smsTemplate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'smsTemplate' is set
            if (smsTemplate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'smsTemplate' when calling TemplateApi->CreateSmsTemplate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = smsTemplate;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SmsTemplate>("/api/v1/templates/sms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSmsTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove SMS Template Removes an SMS template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns></returns>
        public void DeleteSmsTemplate(string templateId)
        {
            DeleteSmsTemplateWithHttpInfo(templateId);
        }

        /// <summary>
        /// Remove SMS Template Removes an SMS template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeleteSmsTemplateWithHttpInfo(string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->DeleteSmsTemplate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("templateId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/templates/sms/{templateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSmsTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove SMS Template Removes an SMS template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSmsTemplateAsync(string templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSmsTemplateWithHttpInfoAsync(templateId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove SMS Template Removes an SMS template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeleteSmsTemplateWithHttpInfoAsync(string templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->DeleteSmsTemplate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("templateId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/templates/sms/{templateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSmsTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get SMS Template Fetches a specific template by &#x60;id&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>SmsTemplate</returns>
        public SmsTemplate GetSmsTemplate(string templateId)
        {
            Org.OpenAPITools.Client.ApiResponse<SmsTemplate> localVarResponse = GetSmsTemplateWithHttpInfo(templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get SMS Template Fetches a specific template by &#x60;id&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        public Org.OpenAPITools.Client.ApiResponse<SmsTemplate> GetSmsTemplateWithHttpInfo(string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->GetSmsTemplate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("templateId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SmsTemplate>("/api/v1/templates/sms/{templateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSmsTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get SMS Template Fetches a specific template by &#x60;id&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsTemplate</returns>
        public async System.Threading.Tasks.Task<SmsTemplate> GetSmsTemplateAsync(string templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SmsTemplate> localVarResponse = await GetSmsTemplateWithHttpInfoAsync(templateId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get SMS Template Fetches a specific template by &#x60;id&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SmsTemplate>> GetSmsTemplateWithHttpInfoAsync(string templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->GetSmsTemplate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("templateId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SmsTemplate>("/api/v1/templates/sms/{templateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSmsTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List SMS Templates Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <returns>List&lt;SmsTemplate&gt;</returns>
        public List<SmsTemplate> ListSmsTemplates(SmsTemplateType? templateType = default(SmsTemplateType?))
        {
            Org.OpenAPITools.Client.ApiResponse<List<SmsTemplate>> localVarResponse = ListSmsTemplatesWithHttpInfo(templateType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List SMS Templates Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SmsTemplate&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<SmsTemplate>> ListSmsTemplatesWithHttpInfo(SmsTemplateType? templateType = default(SmsTemplateType?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (templateType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "templateType", templateType));
            }

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SmsTemplate>>("/api/v1/templates/sms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSmsTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List SMS Templates Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SmsTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<SmsTemplate>> ListSmsTemplatesAsync(SmsTemplateType? templateType = default(SmsTemplateType?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<SmsTemplate>> localVarResponse = await ListSmsTemplatesWithHttpInfoAsync(templateType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List SMS Templates Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SmsTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<SmsTemplate>>> ListSmsTemplatesWithHttpInfoAsync(SmsTemplateType? templateType = default(SmsTemplateType?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (templateType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "templateType", templateType));
            }

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SmsTemplate>>("/api/v1/templates/sms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSmsTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partial SMS Template Update Updates only some of the SMS template properties:
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <returns>SmsTemplate</returns>
        public SmsTemplate PartialUpdateSmsTemplate(string templateId, SmsTemplate smsTemplate)
        {
            Org.OpenAPITools.Client.ApiResponse<SmsTemplate> localVarResponse = PartialUpdateSmsTemplateWithHttpInfo(templateId, smsTemplate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Partial SMS Template Update Updates only some of the SMS template properties:
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        public Org.OpenAPITools.Client.ApiResponse<SmsTemplate> PartialUpdateSmsTemplateWithHttpInfo(string templateId, SmsTemplate smsTemplate)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->PartialUpdateSmsTemplate");
            }

            // verify the required parameter 'smsTemplate' is set
            if (smsTemplate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'smsTemplate' when calling TemplateApi->PartialUpdateSmsTemplate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("templateId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = smsTemplate;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SmsTemplate>("/api/v1/templates/sms/{templateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateSmsTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partial SMS Template Update Updates only some of the SMS template properties:
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsTemplate</returns>
        public async System.Threading.Tasks.Task<SmsTemplate> PartialUpdateSmsTemplateAsync(string templateId, SmsTemplate smsTemplate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SmsTemplate> localVarResponse = await PartialUpdateSmsTemplateWithHttpInfoAsync(templateId, smsTemplate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Partial SMS Template Update Updates only some of the SMS template properties:
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SmsTemplate>> PartialUpdateSmsTemplateWithHttpInfoAsync(string templateId, SmsTemplate smsTemplate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->PartialUpdateSmsTemplate");
            }

            // verify the required parameter 'smsTemplate' is set
            if (smsTemplate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'smsTemplate' when calling TemplateApi->PartialUpdateSmsTemplate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("templateId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = smsTemplate;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SmsTemplate>("/api/v1/templates/sms/{templateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartialUpdateSmsTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update SMS Template Updates the SMS template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <returns>SmsTemplate</returns>
        public SmsTemplate UpdateSmsTemplate(string templateId, SmsTemplate smsTemplate)
        {
            Org.OpenAPITools.Client.ApiResponse<SmsTemplate> localVarResponse = UpdateSmsTemplateWithHttpInfo(templateId, smsTemplate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update SMS Template Updates the SMS template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        public Org.OpenAPITools.Client.ApiResponse<SmsTemplate> UpdateSmsTemplateWithHttpInfo(string templateId, SmsTemplate smsTemplate)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->UpdateSmsTemplate");
            }

            // verify the required parameter 'smsTemplate' is set
            if (smsTemplate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'smsTemplate' when calling TemplateApi->UpdateSmsTemplate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("templateId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = smsTemplate;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SmsTemplate>("/api/v1/templates/sms/{templateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSmsTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update SMS Template Updates the SMS template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsTemplate</returns>
        public async System.Threading.Tasks.Task<SmsTemplate> UpdateSmsTemplateAsync(string templateId, SmsTemplate smsTemplate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SmsTemplate> localVarResponse = await UpdateSmsTemplateWithHttpInfoAsync(templateId, smsTemplate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update SMS Template Updates the SMS template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="smsTemplate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SmsTemplate>> UpdateSmsTemplateWithHttpInfoAsync(string templateId, SmsTemplate smsTemplate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->UpdateSmsTemplate");
            }

            // verify the required parameter 'smsTemplate' is set
            if (smsTemplate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'smsTemplate' when calling TemplateApi->UpdateSmsTemplate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("templateId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = smsTemplate;

            // authentication (api_token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SmsTemplate>("/api/v1/templates/sms/{templateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSmsTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
