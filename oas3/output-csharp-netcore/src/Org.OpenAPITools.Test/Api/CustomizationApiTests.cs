/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing CustomizationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CustomizationApiTests : IDisposable
    {
        private CustomizationApi instance;

        public CustomizationApiTests()
        {
            instance = new CustomizationApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CustomizationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CustomizationApi
            //Assert.IsType<CustomizationApi>(instance);
        }

        /// <summary>
        /// Test CreateEmailCustomization
        /// </summary>
        [Fact]
        public void CreateEmailCustomizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string templateName = null;
            //EmailCustomization instance = null;
            //var response = instance.CreateEmailCustomization(brandId, templateName, instance);
            //Assert.IsType<EmailCustomization>(response);
        }

        /// <summary>
        /// Test DeleteAllCustomizations
        /// </summary>
        [Fact]
        public void DeleteAllCustomizationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string templateName = null;
            //instance.DeleteAllCustomizations(brandId, templateName);
        }

        /// <summary>
        /// Test DeleteBrandThemeBackgroundImage
        /// </summary>
        [Fact]
        public void DeleteBrandThemeBackgroundImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //instance.DeleteBrandThemeBackgroundImage(brandId, themeId);
        }

        /// <summary>
        /// Test DeleteBrandThemeFavicon
        /// </summary>
        [Fact]
        public void DeleteBrandThemeFaviconTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //instance.DeleteBrandThemeFavicon(brandId, themeId);
        }

        /// <summary>
        /// Test DeleteBrandThemeLogo
        /// </summary>
        [Fact]
        public void DeleteBrandThemeLogoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //instance.DeleteBrandThemeLogo(brandId, themeId);
        }

        /// <summary>
        /// Test DeleteEmailCustomization
        /// </summary>
        [Fact]
        public void DeleteEmailCustomizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string templateName = null;
            //string customizationId = null;
            //instance.DeleteEmailCustomization(brandId, templateName, customizationId);
        }

        /// <summary>
        /// Test GetBrand
        /// </summary>
        [Fact]
        public void GetBrandTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //var response = instance.GetBrand(brandId);
            //Assert.IsType<Brand>(response);
        }

        /// <summary>
        /// Test GetBrandTheme
        /// </summary>
        [Fact]
        public void GetBrandThemeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //var response = instance.GetBrandTheme(brandId, themeId);
            //Assert.IsType<ThemeResponse>(response);
        }

        /// <summary>
        /// Test GetCustomizationPreview
        /// </summary>
        [Fact]
        public void GetCustomizationPreviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string templateName = null;
            //string customizationId = null;
            //var response = instance.GetCustomizationPreview(brandId, templateName, customizationId);
            //Assert.IsType<EmailPreview>(response);
        }

        /// <summary>
        /// Test GetEmailCustomization
        /// </summary>
        [Fact]
        public void GetEmailCustomizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string templateName = null;
            //string customizationId = null;
            //var response = instance.GetEmailCustomization(brandId, templateName, customizationId);
            //Assert.IsType<EmailCustomization>(response);
        }

        /// <summary>
        /// Test GetEmailDefaultContent
        /// </summary>
        [Fact]
        public void GetEmailDefaultContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string templateName = null;
            //string language = null;
            //var response = instance.GetEmailDefaultContent(brandId, templateName, language);
            //Assert.IsType<EmailDefaultContent>(response);
        }

        /// <summary>
        /// Test GetEmailDefaultPreview
        /// </summary>
        [Fact]
        public void GetEmailDefaultPreviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string templateName = null;
            //string language = null;
            //var response = instance.GetEmailDefaultPreview(brandId, templateName, language);
            //Assert.IsType<EmailPreview>(response);
        }

        /// <summary>
        /// Test GetEmailTemplate
        /// </summary>
        [Fact]
        public void GetEmailTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string templateName = null;
            //var response = instance.GetEmailTemplate(brandId, templateName);
            //Assert.IsType<EmailTemplate>(response);
        }

        /// <summary>
        /// Test ListBrandThemes
        /// </summary>
        [Fact]
        public void ListBrandThemesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //var response = instance.ListBrandThemes(brandId);
            //Assert.IsType<List<ThemeResponse>>(response);
        }

        /// <summary>
        /// Test ListBrands
        /// </summary>
        [Fact]
        public void ListBrandsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListBrands();
            //Assert.IsType<List<Brand>>(response);
        }

        /// <summary>
        /// Test ListEmailCustomizations
        /// </summary>
        [Fact]
        public void ListEmailCustomizationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string templateName = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.ListEmailCustomizations(brandId, templateName, after, limit);
            //Assert.IsType<List<EmailCustomization>>(response);
        }

        /// <summary>
        /// Test ListEmailTemplates
        /// </summary>
        [Fact]
        public void ListEmailTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.ListEmailTemplates(brandId, after, limit);
            //Assert.IsType<List<EmailTemplate>>(response);
        }

        /// <summary>
        /// Test SendTestEmail
        /// </summary>
        [Fact]
        public void SendTestEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string templateName = null;
            //string language = null;
            //instance.SendTestEmail(brandId, templateName, language);
        }

        /// <summary>
        /// Test UpdateBrand
        /// </summary>
        [Fact]
        public void UpdateBrandTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //Brand brand = null;
            //var response = instance.UpdateBrand(brandId, brand);
            //Assert.IsType<Brand>(response);
        }

        /// <summary>
        /// Test UpdateBrandTheme
        /// </summary>
        [Fact]
        public void UpdateBrandThemeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //Theme theme = null;
            //var response = instance.UpdateBrandTheme(brandId, themeId, theme);
            //Assert.IsType<ThemeResponse>(response);
        }

        /// <summary>
        /// Test UpdateEmailCustomization
        /// </summary>
        [Fact]
        public void UpdateEmailCustomizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string templateName = null;
            //string customizationId = null;
            //EmailCustomization instance = null;
            //var response = instance.UpdateEmailCustomization(brandId, templateName, customizationId, instance);
            //Assert.IsType<EmailCustomization>(response);
        }

        /// <summary>
        /// Test UploadBrandThemeBackgroundImage
        /// </summary>
        [Fact]
        public void UploadBrandThemeBackgroundImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //var response = instance.UploadBrandThemeBackgroundImage(brandId, themeId);
            //Assert.IsType<ImageUploadResponse>(response);
        }

        /// <summary>
        /// Test UploadBrandThemeFavicon
        /// </summary>
        [Fact]
        public void UploadBrandThemeFaviconTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //var response = instance.UploadBrandThemeFavicon(brandId, themeId);
            //Assert.IsType<ImageUploadResponse>(response);
        }

        /// <summary>
        /// Test UploadBrandThemeLogo
        /// </summary>
        [Fact]
        public void UploadBrandThemeLogoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //var response = instance.UploadBrandThemeLogo(brandId, themeId);
            //Assert.IsType<ImageUploadResponse>(response);
        }
    }
}
