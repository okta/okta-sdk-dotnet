/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing InlineHookApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InlineHookApiTests : IDisposable
    {
        private InlineHookApi instance;

        public InlineHookApiTests()
        {
            instance = new InlineHookApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InlineHookApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' InlineHookApi
            //Assert.IsType<InlineHookApi>(instance);
        }

        /// <summary>
        /// Test ActivateInlineHook
        /// </summary>
        [Fact]
        public void ActivateInlineHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inlineHookId = null;
            //var response = instance.ActivateInlineHook(inlineHookId);
            //Assert.IsType<InlineHook>(response);
        }

        /// <summary>
        /// Test CreateInlineHook
        /// </summary>
        [Fact]
        public void CreateInlineHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineHook inlineHook = null;
            //var response = instance.CreateInlineHook(inlineHook);
            //Assert.IsType<InlineHook>(response);
        }

        /// <summary>
        /// Test DeactivateInlineHook
        /// </summary>
        [Fact]
        public void DeactivateInlineHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inlineHookId = null;
            //var response = instance.DeactivateInlineHook(inlineHookId);
            //Assert.IsType<InlineHook>(response);
        }

        /// <summary>
        /// Test DeleteInlineHook
        /// </summary>
        [Fact]
        public void DeleteInlineHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inlineHookId = null;
            //instance.DeleteInlineHook(inlineHookId);
        }

        /// <summary>
        /// Test ExecuteInlineHook
        /// </summary>
        [Fact]
        public void ExecuteInlineHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inlineHookId = null;
            //Object payloadData = null;
            //var response = instance.ExecuteInlineHook(inlineHookId, payloadData);
            //Assert.IsType<InlineHookResponse>(response);
        }

        /// <summary>
        /// Test GetInlineHook
        /// </summary>
        [Fact]
        public void GetInlineHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inlineHookId = null;
            //var response = instance.GetInlineHook(inlineHookId);
            //Assert.IsType<InlineHook>(response);
        }

        /// <summary>
        /// Test ListInlineHooks
        /// </summary>
        [Fact]
        public void ListInlineHooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //var response = instance.ListInlineHooks(type);
            //Assert.IsType<List<InlineHook>>(response);
        }

        /// <summary>
        /// Test UpdateInlineHook
        /// </summary>
        [Fact]
        public void UpdateInlineHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inlineHookId = null;
            //InlineHook inlineHook = null;
            //var response = instance.UpdateInlineHook(inlineHookId, inlineHook);
            //Assert.IsType<InlineHook>(response);
        }
    }
}
