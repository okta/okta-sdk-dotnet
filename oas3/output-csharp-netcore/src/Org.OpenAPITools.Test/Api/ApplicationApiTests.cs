/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Okta.Sdk.UnitTest
{
    /// <summary>
    ///  Class for testing ApplicationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ApplicationApiTests : IDisposable
    {
        private ApplicationApi instance;

        public ApplicationApiTests()
        {
            instance = new ApplicationApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ApplicationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ApplicationApi
            //Assert.IsType<ApplicationApi>(instance);
        }

        /// <summary>
        /// Test ActivateApplication
        /// </summary>
        [Fact]
        public void ActivateApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //instance.ActivateApplication(appId);
        }

        /// <summary>
        /// Test ActivateDefaultProvisioningConnectionForApplication
        /// </summary>
        [Fact]
        public void ActivateDefaultProvisioningConnectionForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //instance.ActivateDefaultProvisioningConnectionForApplication(appId);
        }

        /// <summary>
        /// Test AssignUserToApplication
        /// </summary>
        [Fact]
        public void AssignUserToApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //AppUser appUser = null;
            //var response = instance.AssignUserToApplication(appId, appUser);
            //Assert.IsType<AppUser>(response);
        }

        /// <summary>
        /// Test CloneApplicationKey
        /// </summary>
        [Fact]
        public void CloneApplicationKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string keyId = null;
            //string targetAid = null;
            //var response = instance.CloneApplicationKey(appId, keyId, targetAid);
            //Assert.IsType<JsonWebKey>(response);
        }

        /// <summary>
        /// Test CreateApplication
        /// </summary>
        [Fact]
        public void CreateApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Application application = null;
            //bool? activate = null;
            //string oktaAccessGatewayAgent = null;
            //var response = instance.CreateApplication(application, activate, oktaAccessGatewayAgent);
            //Assert.IsType<Application>(response);
        }

        /// <summary>
        /// Test CreateApplicationGroupAssignment
        /// </summary>
        [Fact]
        public void CreateApplicationGroupAssignmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string groupId = null;
            //ApplicationGroupAssignment applicationGroupAssignment = null;
            //var response = instance.CreateApplicationGroupAssignment(appId, groupId, applicationGroupAssignment);
            //Assert.IsType<ApplicationGroupAssignment>(response);
        }

        /// <summary>
        /// Test DeactivateApplication
        /// </summary>
        [Fact]
        public void DeactivateApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //instance.DeactivateApplication(appId);
        }

        /// <summary>
        /// Test DeactivateDefaultProvisioningConnectionForApplication
        /// </summary>
        [Fact]
        public void DeactivateDefaultProvisioningConnectionForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //instance.DeactivateDefaultProvisioningConnectionForApplication(appId);
        }

        /// <summary>
        /// Test DeleteApplication
        /// </summary>
        [Fact]
        public void DeleteApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //instance.DeleteApplication(appId);
        }

        /// <summary>
        /// Test DeleteApplicationGroupAssignment
        /// </summary>
        [Fact]
        public void DeleteApplicationGroupAssignmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string groupId = null;
            //instance.DeleteApplicationGroupAssignment(appId, groupId);
        }

        /// <summary>
        /// Test DeleteApplicationUser
        /// </summary>
        [Fact]
        public void DeleteApplicationUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string userId = null;
            //bool? sendEmail = null;
            //instance.DeleteApplicationUser(appId, userId, sendEmail);
        }

        /// <summary>
        /// Test GenerateApplicationKey
        /// </summary>
        [Fact]
        public void GenerateApplicationKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //int? validityYears = null;
            //var response = instance.GenerateApplicationKey(appId, validityYears);
            //Assert.IsType<JsonWebKey>(response);
        }

        /// <summary>
        /// Test GenerateCsrForApplication
        /// </summary>
        [Fact]
        public void GenerateCsrForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //CsrMetadata metadata = null;
            //var response = instance.GenerateCsrForApplication(appId, metadata);
            //Assert.IsType<Csr>(response);
        }

        /// <summary>
        /// Test GetApplication
        /// </summary>
        [Fact]
        public void GetApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string expand = null;
            //var response = instance.GetApplication(appId, expand);
            //Assert.IsType<Application>(response);
        }

        /// <summary>
        /// Test GetApplicationGroupAssignment
        /// </summary>
        [Fact]
        public void GetApplicationGroupAssignmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string groupId = null;
            //string expand = null;
            //var response = instance.GetApplicationGroupAssignment(appId, groupId, expand);
            //Assert.IsType<ApplicationGroupAssignment>(response);
        }

        /// <summary>
        /// Test GetApplicationKey
        /// </summary>
        [Fact]
        public void GetApplicationKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string keyId = null;
            //var response = instance.GetApplicationKey(appId, keyId);
            //Assert.IsType<JsonWebKey>(response);
        }

        /// <summary>
        /// Test GetApplicationUser
        /// </summary>
        [Fact]
        public void GetApplicationUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string userId = null;
            //string expand = null;
            //var response = instance.GetApplicationUser(appId, userId, expand);
            //Assert.IsType<AppUser>(response);
        }

        /// <summary>
        /// Test GetCsrForApplication
        /// </summary>
        [Fact]
        public void GetCsrForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string csrId = null;
            //var response = instance.GetCsrForApplication(appId, csrId);
            //Assert.IsType<Csr>(response);
        }

        /// <summary>
        /// Test GetDefaultProvisioningConnectionForApplication
        /// </summary>
        [Fact]
        public void GetDefaultProvisioningConnectionForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.GetDefaultProvisioningConnectionForApplication(appId);
            //Assert.IsType<ProvisioningConnection>(response);
        }

        /// <summary>
        /// Test GetFeatureForApplication
        /// </summary>
        [Fact]
        public void GetFeatureForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string name = null;
            //var response = instance.GetFeatureForApplication(appId, name);
            //Assert.IsType<ApplicationFeature>(response);
        }

        /// <summary>
        /// Test GetOAuth2TokenForApplication
        /// </summary>
        [Fact]
        public void GetOAuth2TokenForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string tokenId = null;
            //string expand = null;
            //var response = instance.GetOAuth2TokenForApplication(appId, tokenId, expand);
            //Assert.IsType<OAuth2Token>(response);
        }

        /// <summary>
        /// Test GetScopeConsentGrant
        /// </summary>
        [Fact]
        public void GetScopeConsentGrantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string grantId = null;
            //string expand = null;
            //var response = instance.GetScopeConsentGrant(appId, grantId, expand);
            //Assert.IsType<OAuth2ScopeConsentGrant>(response);
        }

        /// <summary>
        /// Test GrantConsentToScope
        /// </summary>
        [Fact]
        public void GrantConsentToScopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //OAuth2ScopeConsentGrant oAuth2ScopeConsentGrant = null;
            //var response = instance.GrantConsentToScope(appId, oAuth2ScopeConsentGrant);
            //Assert.IsType<OAuth2ScopeConsentGrant>(response);
        }

        /// <summary>
        /// Test ListApplicationGroupAssignments
        /// </summary>
        [Fact]
        public void ListApplicationGroupAssignmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string q = null;
            //string after = null;
            //int? limit = null;
            //string expand = null;
            //var response = instance.ListApplicationGroupAssignments(appId, q, after, limit, expand);
            //Assert.IsType<List<ApplicationGroupAssignment>>(response);
        }

        /// <summary>
        /// Test ListApplicationKeys
        /// </summary>
        [Fact]
        public void ListApplicationKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.ListApplicationKeys(appId);
            //Assert.IsType<List<JsonWebKey>>(response);
        }

        /// <summary>
        /// Test ListApplicationUsers
        /// </summary>
        [Fact]
        public void ListApplicationUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string q = null;
            //string queryScope = null;
            //string after = null;
            //int? limit = null;
            //string filter = null;
            //string expand = null;
            //var response = instance.ListApplicationUsers(appId, q, queryScope, after, limit, filter, expand);
            //Assert.IsType<List<AppUser>>(response);
        }

        /// <summary>
        /// Test ListApplications
        /// </summary>
        [Fact]
        public void ListApplicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //string after = null;
            //int? limit = null;
            //string filter = null;
            //string expand = null;
            //bool? includeNonDeleted = null;
            //var response = instance.ListApplications(q, after, limit, filter, expand, includeNonDeleted);
            //Assert.IsType<List<Application>>(response);
        }

        /// <summary>
        /// Test ListCsrsForApplication
        /// </summary>
        [Fact]
        public void ListCsrsForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.ListCsrsForApplication(appId);
            //Assert.IsType<List<Csr>>(response);
        }

        /// <summary>
        /// Test ListFeaturesForApplication
        /// </summary>
        [Fact]
        public void ListFeaturesForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.ListFeaturesForApplication(appId);
            //Assert.IsType<List<ApplicationFeature>>(response);
        }

        /// <summary>
        /// Test ListOAuth2TokensForApplication
        /// </summary>
        [Fact]
        public void ListOAuth2TokensForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string expand = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.ListOAuth2TokensForApplication(appId, expand, after, limit);
            //Assert.IsType<List<OAuth2Token>>(response);
        }

        /// <summary>
        /// Test ListScopeConsentGrants
        /// </summary>
        [Fact]
        public void ListScopeConsentGrantsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string expand = null;
            //var response = instance.ListScopeConsentGrants(appId, expand);
            //Assert.IsType<List<OAuth2ScopeConsentGrant>>(response);
        }

        /// <summary>
        /// Test PublishCsrFromApplication
        /// </summary>
        [Fact]
        public void PublishCsrFromApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string csrId = null;
            //System.IO.Stream body = null;
            //var response = instance.PublishCsrFromApplication(appId, csrId, body);
            //Assert.IsType<JsonWebKey>(response);
        }

        /// <summary>
        /// Test RevokeCsrFromApplication
        /// </summary>
        [Fact]
        public void RevokeCsrFromApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string csrId = null;
            //instance.RevokeCsrFromApplication(appId, csrId);
        }

        /// <summary>
        /// Test RevokeOAuth2TokenForApplication
        /// </summary>
        [Fact]
        public void RevokeOAuth2TokenForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string tokenId = null;
            //instance.RevokeOAuth2TokenForApplication(appId, tokenId);
        }

        /// <summary>
        /// Test RevokeOAuth2TokensForApplication
        /// </summary>
        [Fact]
        public void RevokeOAuth2TokensForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //instance.RevokeOAuth2TokensForApplication(appId);
        }

        /// <summary>
        /// Test RevokeScopeConsentGrant
        /// </summary>
        [Fact]
        public void RevokeScopeConsentGrantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string grantId = null;
            //instance.RevokeScopeConsentGrant(appId, grantId);
        }

        /// <summary>
        /// Test SetDefaultProvisioningConnectionForApplication
        /// </summary>
        [Fact]
        public void SetDefaultProvisioningConnectionForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //ProvisioningConnectionRequest provisioningConnectionRequest = null;
            //bool? activate = null;
            //var response = instance.SetDefaultProvisioningConnectionForApplication(appId, provisioningConnectionRequest, activate);
            //Assert.IsType<ProvisioningConnection>(response);
        }

        /// <summary>
        /// Test UpdateApplication
        /// </summary>
        [Fact]
        public void UpdateApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //Application application = null;
            //var response = instance.UpdateApplication(appId, application);
            //Assert.IsType<Application>(response);
        }

        /// <summary>
        /// Test UpdateApplicationUser
        /// </summary>
        [Fact]
        public void UpdateApplicationUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string userId = null;
            //AppUser appUser = null;
            //var response = instance.UpdateApplicationUser(appId, userId, appUser);
            //Assert.IsType<AppUser>(response);
        }

        /// <summary>
        /// Test UpdateFeatureForApplication
        /// </summary>
        [Fact]
        public void UpdateFeatureForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string name = null;
            //CapabilitiesObject capabilitiesObject = null;
            //var response = instance.UpdateFeatureForApplication(appId, name, capabilitiesObject);
            //Assert.IsType<ApplicationFeature>(response);
        }

        /// <summary>
        /// Test UploadApplicationLogo
        /// </summary>
        [Fact]
        public void UploadApplicationLogoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //System.IO.Stream file = null;
            //instance.UploadApplicationLogo(appId, file);
        }
    }
}
