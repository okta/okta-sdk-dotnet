/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing EventHookApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class EventHookApiTests : IDisposable
    {
        private EventHookApi instance;

        public EventHookApiTests()
        {
            instance = new EventHookApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of EventHookApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' EventHookApi
            //Assert.IsType<EventHookApi>(instance);
        }

        /// <summary>
        /// Test ActivateEventHook
        /// </summary>
        [Fact]
        public void ActivateEventHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventHookId = null;
            //var response = instance.ActivateEventHook(eventHookId);
            //Assert.IsType<EventHook>(response);
        }

        /// <summary>
        /// Test CreateEventHook
        /// </summary>
        [Fact]
        public void CreateEventHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EventHook eventHook = null;
            //var response = instance.CreateEventHook(eventHook);
            //Assert.IsType<EventHook>(response);
        }

        /// <summary>
        /// Test DeactivateEventHook
        /// </summary>
        [Fact]
        public void DeactivateEventHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventHookId = null;
            //var response = instance.DeactivateEventHook(eventHookId);
            //Assert.IsType<EventHook>(response);
        }

        /// <summary>
        /// Test DeleteEventHook
        /// </summary>
        [Fact]
        public void DeleteEventHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventHookId = null;
            //instance.DeleteEventHook(eventHookId);
        }

        /// <summary>
        /// Test GetEventHook
        /// </summary>
        [Fact]
        public void GetEventHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventHookId = null;
            //var response = instance.GetEventHook(eventHookId);
            //Assert.IsType<EventHook>(response);
        }

        /// <summary>
        /// Test ListEventHooks
        /// </summary>
        [Fact]
        public void ListEventHooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListEventHooks();
            //Assert.IsType<List<EventHook>>(response);
        }

        /// <summary>
        /// Test UpdateEventHook
        /// </summary>
        [Fact]
        public void UpdateEventHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventHookId = null;
            //EventHook eventHook = null;
            //var response = instance.UpdateEventHook(eventHookId, eventHook);
            //Assert.IsType<EventHook>(response);
        }

        /// <summary>
        /// Test VerifyEventHook
        /// </summary>
        [Fact]
        public void VerifyEventHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventHookId = null;
            //var response = instance.VerifyEventHook(eventHookId);
            //Assert.IsType<EventHook>(response);
        }
    }
}
