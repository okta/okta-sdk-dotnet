/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing BrandApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BrandApiTests : IDisposable
    {
        private BrandApi instance;

        public BrandApiTests()
        {
            instance = new BrandApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BrandApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BrandApi
            //Assert.IsType<BrandApi>(instance);
        }

        /// <summary>
        /// Test DeleteBrandThemeBackgroundImage
        /// </summary>
        [Fact]
        public void DeleteBrandThemeBackgroundImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //instance.DeleteBrandThemeBackgroundImage(brandId, themeId);
        }

        /// <summary>
        /// Test DeleteBrandThemeFavicon
        /// </summary>
        [Fact]
        public void DeleteBrandThemeFaviconTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //instance.DeleteBrandThemeFavicon(brandId, themeId);
        }

        /// <summary>
        /// Test DeleteBrandThemeLogo
        /// </summary>
        [Fact]
        public void DeleteBrandThemeLogoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //instance.DeleteBrandThemeLogo(brandId, themeId);
        }

        /// <summary>
        /// Test GetBrand
        /// </summary>
        [Fact]
        public void GetBrandTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //var response = instance.GetBrand(brandId);
            //Assert.IsType<Brand>(response);
        }

        /// <summary>
        /// Test GetBrandTheme
        /// </summary>
        [Fact]
        public void GetBrandThemeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //var response = instance.GetBrandTheme(brandId, themeId);
            //Assert.IsType<ThemeResponse>(response);
        }

        /// <summary>
        /// Test ListBrandThemes
        /// </summary>
        [Fact]
        public void ListBrandThemesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //var response = instance.ListBrandThemes(brandId);
            //Assert.IsType<List<ThemeResponse>>(response);
        }

        /// <summary>
        /// Test ListBrands
        /// </summary>
        [Fact]
        public void ListBrandsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListBrands();
            //Assert.IsType<List<Brand>>(response);
        }

        /// <summary>
        /// Test UpdateBrand
        /// </summary>
        [Fact]
        public void UpdateBrandTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //Brand brand = null;
            //var response = instance.UpdateBrand(brandId, brand);
            //Assert.IsType<Brand>(response);
        }

        /// <summary>
        /// Test UpdateBrandTheme
        /// </summary>
        [Fact]
        public void UpdateBrandThemeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //Theme theme = null;
            //var response = instance.UpdateBrandTheme(brandId, themeId, theme);
            //Assert.IsType<ThemeResponse>(response);
        }

        /// <summary>
        /// Test UploadBrandThemeBackgroundImage
        /// </summary>
        [Fact]
        public void UploadBrandThemeBackgroundImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //var response = instance.UploadBrandThemeBackgroundImage(brandId, themeId);
            //Assert.IsType<ImageUploadResponse>(response);
        }

        /// <summary>
        /// Test UploadBrandThemeFavicon
        /// </summary>
        [Fact]
        public void UploadBrandThemeFaviconTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //var response = instance.UploadBrandThemeFavicon(brandId, themeId);
            //Assert.IsType<ImageUploadResponse>(response);
        }

        /// <summary>
        /// Test UploadBrandThemeLogo
        /// </summary>
        [Fact]
        public void UploadBrandThemeLogoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brandId = null;
            //string themeId = null;
            //var response = instance.UploadBrandThemeLogo(brandId, themeId);
            //Assert.IsType<ImageUploadResponse>(response);
        }
    }
}
