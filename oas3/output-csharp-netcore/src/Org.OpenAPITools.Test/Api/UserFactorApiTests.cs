/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing UserFactorApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserFactorApiTests : IDisposable
    {
        private UserFactorApi instance;

        public UserFactorApiTests()
        {
            instance = new UserFactorApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserFactorApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UserFactorApi
            //Assert.IsType<UserFactorApi>(instance);
        }

        /// <summary>
        /// Test ActivateFactor
        /// </summary>
        [Fact]
        public void ActivateFactorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string factorId = null;
            //ActivateFactorRequest body = null;
            //var response = instance.ActivateFactor(userId, factorId, body);
            //Assert.IsType<UserFactor>(response);
        }

        /// <summary>
        /// Test DeleteFactor
        /// </summary>
        [Fact]
        public void DeleteFactorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string factorId = null;
            //instance.DeleteFactor(userId, factorId);
        }

        /// <summary>
        /// Test EnrollFactor
        /// </summary>
        [Fact]
        public void EnrollFactorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //UserFactor body = null;
            //bool? updatePhone = null;
            //string templateId = null;
            //int? tokenLifetimeSeconds = null;
            //bool? activate = null;
            //var response = instance.EnrollFactor(userId, body, updatePhone, templateId, tokenLifetimeSeconds, activate);
            //Assert.IsType<UserFactor>(response);
        }

        /// <summary>
        /// Test GetFactor
        /// </summary>
        [Fact]
        public void GetFactorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string factorId = null;
            //var response = instance.GetFactor(userId, factorId);
            //Assert.IsType<UserFactor>(response);
        }

        /// <summary>
        /// Test GetFactorTransactionStatus
        /// </summary>
        [Fact]
        public void GetFactorTransactionStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string factorId = null;
            //string transactionId = null;
            //var response = instance.GetFactorTransactionStatus(userId, factorId, transactionId);
            //Assert.IsType<VerifyUserFactorResponse>(response);
        }

        /// <summary>
        /// Test ListFactors
        /// </summary>
        [Fact]
        public void ListFactorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.ListFactors(userId);
            //Assert.IsType<List<UserFactor>>(response);
        }

        /// <summary>
        /// Test ListSupportedFactors
        /// </summary>
        [Fact]
        public void ListSupportedFactorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.ListSupportedFactors(userId);
            //Assert.IsType<List<UserFactor>>(response);
        }

        /// <summary>
        /// Test ListSupportedSecurityQuestions
        /// </summary>
        [Fact]
        public void ListSupportedSecurityQuestionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.ListSupportedSecurityQuestions(userId);
            //Assert.IsType<List<SecurityQuestion>>(response);
        }

        /// <summary>
        /// Test VerifyFactor
        /// </summary>
        [Fact]
        public void VerifyFactorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string factorId = null;
            //string templateId = null;
            //int? tokenLifetimeSeconds = null;
            //string xForwardedFor = null;
            //string userAgent = null;
            //string acceptLanguage = null;
            //VerifyFactorRequest body = null;
            //var response = instance.VerifyFactor(userId, factorId, templateId, tokenLifetimeSeconds, xForwardedFor, userAgent, acceptLanguage, body);
            //Assert.IsType<VerifyUserFactorResponse>(response);
        }
    }
}
