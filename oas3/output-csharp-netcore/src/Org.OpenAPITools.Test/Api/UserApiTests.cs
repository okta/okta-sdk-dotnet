/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserApiTests : IDisposable
    {
        private UserApi instance;

        public UserApiTests()
        {
            instance = new UserApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UserApi
            //Assert.IsType<UserApi>(instance);
        }

        /// <summary>
        /// Test ActivateUser
        /// </summary>
        [Fact]
        public void ActivateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //bool sendEmail = null;
            //var response = instance.ActivateUser(userId, sendEmail);
            //Assert.IsType<UserActivationToken>(response);
        }

        /// <summary>
        /// Test AddAllAppsAsTargetToRole
        /// </summary>
        [Fact]
        public void AddAllAppsAsTargetToRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string roleId = null;
            //instance.AddAllAppsAsTargetToRole(userId, roleId);
        }

        /// <summary>
        /// Test AddApplicationTargetToAdminRoleForUser
        /// </summary>
        [Fact]
        public void AddApplicationTargetToAdminRoleForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string roleId = null;
            //string appName = null;
            //instance.AddApplicationTargetToAdminRoleForUser(userId, roleId, appName);
        }

        /// <summary>
        /// Test AddApplicationTargetToAppAdminRoleForUser
        /// </summary>
        [Fact]
        public void AddApplicationTargetToAppAdminRoleForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string roleId = null;
            //string appName = null;
            //string applicationId = null;
            //instance.AddApplicationTargetToAppAdminRoleForUser(userId, roleId, appName, applicationId);
        }

        /// <summary>
        /// Test AddGroupTargetToRole
        /// </summary>
        [Fact]
        public void AddGroupTargetToRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string roleId = null;
            //string groupId = null;
            //instance.AddGroupTargetToRole(userId, roleId, groupId);
        }

        /// <summary>
        /// Test AssignRoleToUser
        /// </summary>
        [Fact]
        public void AssignRoleToUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //AssignRoleRequest assignRoleRequest = null;
            //bool? disableNotifications = null;
            //var response = instance.AssignRoleToUser(userId, assignRoleRequest, disableNotifications);
            //Assert.IsType<Role>(response);
        }

        /// <summary>
        /// Test ChangePassword
        /// </summary>
        [Fact]
        public void ChangePasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //ChangePasswordRequest changePasswordRequest = null;
            //bool? strict = null;
            //var response = instance.ChangePassword(userId, changePasswordRequest, strict);
            //Assert.IsType<UserCredentials>(response);
        }

        /// <summary>
        /// Test ChangeRecoveryQuestion
        /// </summary>
        [Fact]
        public void ChangeRecoveryQuestionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //UserCredentials userCredentials = null;
            //var response = instance.ChangeRecoveryQuestion(userId, userCredentials);
            //Assert.IsType<UserCredentials>(response);
        }

        /// <summary>
        /// Test ClearUserSessions
        /// </summary>
        [Fact]
        public void ClearUserSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //bool? oauthTokens = null;
            //instance.ClearUserSessions(userId, oauthTokens);
        }

        /// <summary>
        /// Test CreateUser
        /// </summary>
        [Fact]
        public void CreateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateUserRequest body = null;
            //bool? activate = null;
            //bool? provider = null;
            //UserNextLogin? nextLogin = null;
            //var response = instance.CreateUser(body, activate, provider, nextLogin);
            //Assert.IsType<User>(response);
        }

        /// <summary>
        /// Test DeactivateOrDeleteUser
        /// </summary>
        [Fact]
        public void DeactivateOrDeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //bool? sendEmail = null;
            //instance.DeactivateOrDeleteUser(userId, sendEmail);
        }

        /// <summary>
        /// Test DeactivateUser
        /// </summary>
        [Fact]
        public void DeactivateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //bool? sendEmail = null;
            //instance.DeactivateUser(userId, sendEmail);
        }

        /// <summary>
        /// Test ExpirePassword
        /// </summary>
        [Fact]
        public void ExpirePasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.ExpirePassword(userId);
            //Assert.IsType<User>(response);
        }

        /// <summary>
        /// Test ExpirePasswordAndGetTemporaryPassword
        /// </summary>
        [Fact]
        public void ExpirePasswordAndGetTemporaryPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.ExpirePasswordAndGetTemporaryPassword(userId);
            //Assert.IsType<TempPassword>(response);
        }

        /// <summary>
        /// Test ForgotPassword
        /// </summary>
        [Fact]
        public void ForgotPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //bool? sendEmail = null;
            //var response = instance.ForgotPassword(userId, sendEmail);
            //Assert.IsType<ForgotPasswordResponse>(response);
        }

        /// <summary>
        /// Test ForgotPasswordSetNewPassword
        /// </summary>
        [Fact]
        public void ForgotPasswordSetNewPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //UserCredentials userCredentials = null;
            //bool? sendEmail = null;
            //var response = instance.ForgotPasswordSetNewPassword(userId, userCredentials, sendEmail);
            //Assert.IsType<UserCredentials>(response);
        }

        /// <summary>
        /// Test GetLinkedObjectsForUser
        /// </summary>
        [Fact]
        public void GetLinkedObjectsForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string relationshipName = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.GetLinkedObjectsForUser(userId, relationshipName, after, limit);
            //Assert.IsType<List<Object>>(response);
        }

        /// <summary>
        /// Test GetRefreshTokenForUserAndClient
        /// </summary>
        [Fact]
        public void GetRefreshTokenForUserAndClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string clientId = null;
            //string tokenId = null;
            //string expand = null;
            //int? limit = null;
            //string after = null;
            //var response = instance.GetRefreshTokenForUserAndClient(userId, clientId, tokenId, expand, limit, after);
            //Assert.IsType<OAuth2RefreshToken>(response);
        }

        /// <summary>
        /// Test GetUser
        /// </summary>
        [Fact]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.GetUser(userId);
            //Assert.IsType<User>(response);
        }

        /// <summary>
        /// Test GetUserGrant
        /// </summary>
        [Fact]
        public void GetUserGrantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string grantId = null;
            //string expand = null;
            //var response = instance.GetUserGrant(userId, grantId, expand);
            //Assert.IsType<OAuth2ScopeConsentGrant>(response);
        }

        /// <summary>
        /// Test GetUserRole
        /// </summary>
        [Fact]
        public void GetUserRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string roleId = null;
            //var response = instance.GetUserRole(userId, roleId);
            //Assert.IsType<Role>(response);
        }

        /// <summary>
        /// Test ListAppLinks
        /// </summary>
        [Fact]
        public void ListAppLinksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.ListAppLinks(userId);
            //Assert.IsType<List<AppLink>>(response);
        }

        /// <summary>
        /// Test ListApplicationTargetsForApplicationAdministratorRoleForUser
        /// </summary>
        [Fact]
        public void ListApplicationTargetsForApplicationAdministratorRoleForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string roleId = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.ListApplicationTargetsForApplicationAdministratorRoleForUser(userId, roleId, after, limit);
            //Assert.IsType<List<CatalogApplication>>(response);
        }

        /// <summary>
        /// Test ListAssignedRolesForUser
        /// </summary>
        [Fact]
        public void ListAssignedRolesForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string expand = null;
            //var response = instance.ListAssignedRolesForUser(userId, expand);
            //Assert.IsType<List<Role>>(response);
        }

        /// <summary>
        /// Test ListGrantsForUserAndClient
        /// </summary>
        [Fact]
        public void ListGrantsForUserAndClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string clientId = null;
            //string expand = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.ListGrantsForUserAndClient(userId, clientId, expand, after, limit);
            //Assert.IsType<List<OAuth2ScopeConsentGrant>>(response);
        }

        /// <summary>
        /// Test ListGroupTargetsForRole
        /// </summary>
        [Fact]
        public void ListGroupTargetsForRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string roleId = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.ListGroupTargetsForRole(userId, roleId, after, limit);
            //Assert.IsType<List<Group>>(response);
        }

        /// <summary>
        /// Test ListRefreshTokensForUserAndClient
        /// </summary>
        [Fact]
        public void ListRefreshTokensForUserAndClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string clientId = null;
            //string expand = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.ListRefreshTokensForUserAndClient(userId, clientId, expand, after, limit);
            //Assert.IsType<List<OAuth2RefreshToken>>(response);
        }

        /// <summary>
        /// Test ListUserClients
        /// </summary>
        [Fact]
        public void ListUserClientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.ListUserClients(userId);
            //Assert.IsType<List<OAuth2Client>>(response);
        }

        /// <summary>
        /// Test ListUserGrants
        /// </summary>
        [Fact]
        public void ListUserGrantsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string scopeId = null;
            //string expand = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.ListUserGrants(userId, scopeId, expand, after, limit);
            //Assert.IsType<List<OAuth2ScopeConsentGrant>>(response);
        }

        /// <summary>
        /// Test ListUserGroups
        /// </summary>
        [Fact]
        public void ListUserGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.ListUserGroups(userId);
            //Assert.IsType<List<Group>>(response);
        }

        /// <summary>
        /// Test ListUserIdentityProviders
        /// </summary>
        [Fact]
        public void ListUserIdentityProvidersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.ListUserIdentityProviders(userId);
            //Assert.IsType<List<IdentityProvider>>(response);
        }

        /// <summary>
        /// Test ListUsers
        /// </summary>
        [Fact]
        public void ListUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //string after = null;
            //int? limit = null;
            //string filter = null;
            //string search = null;
            //string sortBy = null;
            //string sortOrder = null;
            //var response = instance.ListUsers(q, after, limit, filter, search, sortBy, sortOrder);
            //Assert.IsType<List<User>>(response);
        }

        /// <summary>
        /// Test PartialUpdateUser
        /// </summary>
        [Fact]
        public void PartialUpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //User user = null;
            //bool? strict = null;
            //var response = instance.PartialUpdateUser(userId, user, strict);
            //Assert.IsType<User>(response);
        }

        /// <summary>
        /// Test ReactivateUser
        /// </summary>
        [Fact]
        public void ReactivateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //bool? sendEmail = null;
            //var response = instance.ReactivateUser(userId, sendEmail);
            //Assert.IsType<UserActivationToken>(response);
        }

        /// <summary>
        /// Test RemoveApplicationTargetFromAdministratorRoleForUser
        /// </summary>
        [Fact]
        public void RemoveApplicationTargetFromAdministratorRoleForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string roleId = null;
            //string appName = null;
            //string applicationId = null;
            //instance.RemoveApplicationTargetFromAdministratorRoleForUser(userId, roleId, appName, applicationId);
        }

        /// <summary>
        /// Test RemoveApplicationTargetFromApplicationAdministratorRoleForUser
        /// </summary>
        [Fact]
        public void RemoveApplicationTargetFromApplicationAdministratorRoleForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string roleId = null;
            //string appName = null;
            //instance.RemoveApplicationTargetFromApplicationAdministratorRoleForUser(userId, roleId, appName);
        }

        /// <summary>
        /// Test RemoveGroupTargetFromRole
        /// </summary>
        [Fact]
        public void RemoveGroupTargetFromRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string roleId = null;
            //string groupId = null;
            //instance.RemoveGroupTargetFromRole(userId, roleId, groupId);
        }

        /// <summary>
        /// Test RemoveLinkedObjectForUser
        /// </summary>
        [Fact]
        public void RemoveLinkedObjectForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string relationshipName = null;
            //instance.RemoveLinkedObjectForUser(userId, relationshipName);
        }

        /// <summary>
        /// Test RemoveRoleFromUser
        /// </summary>
        [Fact]
        public void RemoveRoleFromUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string roleId = null;
            //instance.RemoveRoleFromUser(userId, roleId);
        }

        /// <summary>
        /// Test ResetFactors
        /// </summary>
        [Fact]
        public void ResetFactorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //instance.ResetFactors(userId);
        }

        /// <summary>
        /// Test ResetPassword
        /// </summary>
        [Fact]
        public void ResetPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //bool sendEmail = null;
            //var response = instance.ResetPassword(userId, sendEmail);
            //Assert.IsType<ResetPasswordToken>(response);
        }

        /// <summary>
        /// Test RevokeGrantsForUserAndClient
        /// </summary>
        [Fact]
        public void RevokeGrantsForUserAndClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string clientId = null;
            //instance.RevokeGrantsForUserAndClient(userId, clientId);
        }

        /// <summary>
        /// Test RevokeTokenForUserAndClient
        /// </summary>
        [Fact]
        public void RevokeTokenForUserAndClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string clientId = null;
            //string tokenId = null;
            //instance.RevokeTokenForUserAndClient(userId, clientId, tokenId);
        }

        /// <summary>
        /// Test RevokeTokensForUserAndClient
        /// </summary>
        [Fact]
        public void RevokeTokensForUserAndClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string clientId = null;
            //instance.RevokeTokensForUserAndClient(userId, clientId);
        }

        /// <summary>
        /// Test RevokeUserGrant
        /// </summary>
        [Fact]
        public void RevokeUserGrantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string grantId = null;
            //instance.RevokeUserGrant(userId, grantId);
        }

        /// <summary>
        /// Test RevokeUserGrants
        /// </summary>
        [Fact]
        public void RevokeUserGrantsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //instance.RevokeUserGrants(userId);
        }

        /// <summary>
        /// Test SetLinkedObjectForUser
        /// </summary>
        [Fact]
        public void SetLinkedObjectForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string associatedUserId = null;
            //string primaryRelationshipName = null;
            //string primaryUserId = null;
            //instance.SetLinkedObjectForUser(associatedUserId, primaryRelationshipName, primaryUserId);
        }

        /// <summary>
        /// Test SuspendUser
        /// </summary>
        [Fact]
        public void SuspendUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //instance.SuspendUser(userId);
        }

        /// <summary>
        /// Test UnlockUser
        /// </summary>
        [Fact]
        public void UnlockUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //instance.UnlockUser(userId);
        }

        /// <summary>
        /// Test UnsuspendUser
        /// </summary>
        [Fact]
        public void UnsuspendUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //instance.UnsuspendUser(userId);
        }

        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Fact]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //User user = null;
            //bool? strict = null;
            //var response = instance.UpdateUser(userId, user, strict);
            //Assert.IsType<User>(response);
        }
    }
}
