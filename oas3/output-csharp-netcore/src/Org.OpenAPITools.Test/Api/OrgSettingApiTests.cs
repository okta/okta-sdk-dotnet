/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing OrgSettingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OrgSettingApiTests : IDisposable
    {
        private OrgSettingApi instance;

        public OrgSettingApiTests()
        {
            instance = new OrgSettingApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OrgSettingApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' OrgSettingApi
            //Assert.IsType<OrgSettingApi>(instance);
        }

        /// <summary>
        /// Test BulkRemoveEmailAddressBounces
        /// </summary>
        [Fact]
        public void BulkRemoveEmailAddressBouncesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BouncesRemoveListObj bouncesRemoveListObj = null;
            //var response = instance.BulkRemoveEmailAddressBounces(bouncesRemoveListObj);
            //Assert.IsType<BouncesRemoveListResult>(response);
        }

        /// <summary>
        /// Test ExtendOktaSupport
        /// </summary>
        [Fact]
        public void ExtendOktaSupportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtendOktaSupport();
            //Assert.IsType<OrgOktaSupportSettingsObj>(response);
        }

        /// <summary>
        /// Test GetOktaCommunicationSettings
        /// </summary>
        [Fact]
        public void GetOktaCommunicationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOktaCommunicationSettings();
            //Assert.IsType<OrgOktaCommunicationSetting>(response);
        }

        /// <summary>
        /// Test GetOrgContactTypes
        /// </summary>
        [Fact]
        public void GetOrgContactTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOrgContactTypes();
            //Assert.IsType<List<OrgContactTypeObj>>(response);
        }

        /// <summary>
        /// Test GetOrgContactUser
        /// </summary>
        [Fact]
        public void GetOrgContactUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactType = null;
            //var response = instance.GetOrgContactUser(contactType);
            //Assert.IsType<OrgContactUser>(response);
        }

        /// <summary>
        /// Test GetOrgOktaSupportSettings
        /// </summary>
        [Fact]
        public void GetOrgOktaSupportSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOrgOktaSupportSettings();
            //Assert.IsType<OrgOktaSupportSettingsObj>(response);
        }

        /// <summary>
        /// Test GetOrgPreferences
        /// </summary>
        [Fact]
        public void GetOrgPreferencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOrgPreferences();
            //Assert.IsType<OrgPreferences>(response);
        }

        /// <summary>
        /// Test GetOrgSettings
        /// </summary>
        [Fact]
        public void GetOrgSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOrgSettings();
            //Assert.IsType<OrgSetting>(response);
        }

        /// <summary>
        /// Test GrantOktaSupport
        /// </summary>
        [Fact]
        public void GrantOktaSupportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GrantOktaSupport();
            //Assert.IsType<OrgOktaSupportSettingsObj>(response);
        }

        /// <summary>
        /// Test HideOktaUIFooter
        /// </summary>
        [Fact]
        public void HideOktaUIFooterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.HideOktaUIFooter();
            //Assert.IsType<OrgPreferences>(response);
        }

        /// <summary>
        /// Test OptInUsersToOktaCommunicationEmails
        /// </summary>
        [Fact]
        public void OptInUsersToOktaCommunicationEmailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.OptInUsersToOktaCommunicationEmails();
            //Assert.IsType<OrgOktaCommunicationSetting>(response);
        }

        /// <summary>
        /// Test OptOutUsersFromOktaCommunicationEmails
        /// </summary>
        [Fact]
        public void OptOutUsersFromOktaCommunicationEmailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.OptOutUsersFromOktaCommunicationEmails();
            //Assert.IsType<OrgOktaCommunicationSetting>(response);
        }

        /// <summary>
        /// Test PartialUpdateOrgSetting
        /// </summary>
        [Fact]
        public void PartialUpdateOrgSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrgSetting orgSetting = null;
            //var response = instance.PartialUpdateOrgSetting(orgSetting);
            //Assert.IsType<OrgSetting>(response);
        }

        /// <summary>
        /// Test RevokeOktaSupport
        /// </summary>
        [Fact]
        public void RevokeOktaSupportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RevokeOktaSupport();
            //Assert.IsType<OrgOktaSupportSettingsObj>(response);
        }

        /// <summary>
        /// Test ShowOktaUIFooter
        /// </summary>
        [Fact]
        public void ShowOktaUIFooterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ShowOktaUIFooter();
            //Assert.IsType<OrgPreferences>(response);
        }

        /// <summary>
        /// Test UpdateOrgContactUser
        /// </summary>
        [Fact]
        public void UpdateOrgContactUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactType = null;
            //OrgContactUser orgContactUser = null;
            //var response = instance.UpdateOrgContactUser(contactType, orgContactUser);
            //Assert.IsType<OrgContactUser>(response);
        }

        /// <summary>
        /// Test UpdateOrgLogo
        /// </summary>
        [Fact]
        public void UpdateOrgLogoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UpdateOrgLogo();
        }

        /// <summary>
        /// Test UpdateOrgSetting
        /// </summary>
        [Fact]
        public void UpdateOrgSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrgSetting orgSetting = null;
            //var response = instance.UpdateOrgSetting(orgSetting);
            //Assert.IsType<OrgSetting>(response);
        }
    }
}
