/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing UserTypeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserTypeApiTests : IDisposable
    {
        private UserTypeApi instance;

        public UserTypeApiTests()
        {
            instance = new UserTypeApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserTypeApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UserTypeApi
            //Assert.IsType<UserTypeApi>(instance);
        }

        /// <summary>
        /// Test CreateUserType
        /// </summary>
        [Fact]
        public void CreateUserTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserType userType = null;
            //var response = instance.CreateUserType(userType);
            //Assert.IsType<UserType>(response);
        }

        /// <summary>
        /// Test DeleteUserType
        /// </summary>
        [Fact]
        public void DeleteUserTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string typeId = null;
            //instance.DeleteUserType(typeId);
        }

        /// <summary>
        /// Test GetUserType
        /// </summary>
        [Fact]
        public void GetUserTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string typeId = null;
            //var response = instance.GetUserType(typeId);
            //Assert.IsType<UserType>(response);
        }

        /// <summary>
        /// Test ListUserTypes
        /// </summary>
        [Fact]
        public void ListUserTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListUserTypes();
            //Assert.IsType<List<UserType>>(response);
        }

        /// <summary>
        /// Test ReplaceUserType
        /// </summary>
        [Fact]
        public void ReplaceUserTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string typeId = null;
            //UserType userType = null;
            //var response = instance.ReplaceUserType(typeId, userType);
            //Assert.IsType<UserType>(response);
        }

        /// <summary>
        /// Test UpdateUserType
        /// </summary>
        [Fact]
        public void UpdateUserTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string typeId = null;
            //UserType userType = null;
            //var response = instance.UpdateUserType(typeId, userType);
            //Assert.IsType<UserType>(response);
        }
    }
}
