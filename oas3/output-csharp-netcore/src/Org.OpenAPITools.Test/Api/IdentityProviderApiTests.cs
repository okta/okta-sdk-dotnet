/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing IdentityProviderApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IdentityProviderApiTests : IDisposable
    {
        private IdentityProviderApi instance;

        public IdentityProviderApiTests()
        {
            instance = new IdentityProviderApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IdentityProviderApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' IdentityProviderApi
            //Assert.IsType<IdentityProviderApi>(instance);
        }

        /// <summary>
        /// Test ActivateIdentityProvider
        /// </summary>
        [Fact]
        public void ActivateIdentityProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //var response = instance.ActivateIdentityProvider(idpId);
            //Assert.IsType<IdentityProvider>(response);
        }

        /// <summary>
        /// Test CloneIdentityProviderKey
        /// </summary>
        [Fact]
        public void CloneIdentityProviderKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //string keyId = null;
            //string targetIdpId = null;
            //var response = instance.CloneIdentityProviderKey(idpId, keyId, targetIdpId);
            //Assert.IsType<JsonWebKey>(response);
        }

        /// <summary>
        /// Test CreateIdentityProvider
        /// </summary>
        [Fact]
        public void CreateIdentityProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IdentityProvider identityProvider = null;
            //var response = instance.CreateIdentityProvider(identityProvider);
            //Assert.IsType<IdentityProvider>(response);
        }

        /// <summary>
        /// Test CreateIdentityProviderKey
        /// </summary>
        [Fact]
        public void CreateIdentityProviderKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //JsonWebKey jsonWebKey = null;
            //var response = instance.CreateIdentityProviderKey(jsonWebKey);
            //Assert.IsType<JsonWebKey>(response);
        }

        /// <summary>
        /// Test DeactivateIdentityProvider
        /// </summary>
        [Fact]
        public void DeactivateIdentityProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //var response = instance.DeactivateIdentityProvider(idpId);
            //Assert.IsType<IdentityProvider>(response);
        }

        /// <summary>
        /// Test DeleteIdentityProvider
        /// </summary>
        [Fact]
        public void DeleteIdentityProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //instance.DeleteIdentityProvider(idpId);
        }

        /// <summary>
        /// Test DeleteIdentityProviderKey
        /// </summary>
        [Fact]
        public void DeleteIdentityProviderKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyId = null;
            //instance.DeleteIdentityProviderKey(keyId);
        }

        /// <summary>
        /// Test GenerateCsrForIdentityProvider
        /// </summary>
        [Fact]
        public void GenerateCsrForIdentityProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //CsrMetadata metadata = null;
            //var response = instance.GenerateCsrForIdentityProvider(idpId, metadata);
            //Assert.IsType<Csr>(response);
        }

        /// <summary>
        /// Test GenerateIdentityProviderSigningKey
        /// </summary>
        [Fact]
        public void GenerateIdentityProviderSigningKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //int validityYears = null;
            //var response = instance.GenerateIdentityProviderSigningKey(idpId, validityYears);
            //Assert.IsType<JsonWebKey>(response);
        }

        /// <summary>
        /// Test GetCsrForIdentityProvider
        /// </summary>
        [Fact]
        public void GetCsrForIdentityProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //string csrId = null;
            //var response = instance.GetCsrForIdentityProvider(idpId, csrId);
            //Assert.IsType<Csr>(response);
        }

        /// <summary>
        /// Test GetIdentityProvider
        /// </summary>
        [Fact]
        public void GetIdentityProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //var response = instance.GetIdentityProvider(idpId);
            //Assert.IsType<IdentityProvider>(response);
        }

        /// <summary>
        /// Test GetIdentityProviderApplicationUser
        /// </summary>
        [Fact]
        public void GetIdentityProviderApplicationUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //string userId = null;
            //var response = instance.GetIdentityProviderApplicationUser(idpId, userId);
            //Assert.IsType<IdentityProviderApplicationUser>(response);
        }

        /// <summary>
        /// Test GetIdentityProviderKey
        /// </summary>
        [Fact]
        public void GetIdentityProviderKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyId = null;
            //var response = instance.GetIdentityProviderKey(keyId);
            //Assert.IsType<JsonWebKey>(response);
        }

        /// <summary>
        /// Test GetIdentityProviderSigningKey
        /// </summary>
        [Fact]
        public void GetIdentityProviderSigningKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //string keyId = null;
            //var response = instance.GetIdentityProviderSigningKey(idpId, keyId);
            //Assert.IsType<JsonWebKey>(response);
        }

        /// <summary>
        /// Test LinkUserToIdentityProvider
        /// </summary>
        [Fact]
        public void LinkUserToIdentityProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //string userId = null;
            //UserIdentityProviderLinkRequest userIdentityProviderLinkRequest = null;
            //var response = instance.LinkUserToIdentityProvider(idpId, userId, userIdentityProviderLinkRequest);
            //Assert.IsType<IdentityProviderApplicationUser>(response);
        }

        /// <summary>
        /// Test ListCsrsForIdentityProvider
        /// </summary>
        [Fact]
        public void ListCsrsForIdentityProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //var response = instance.ListCsrsForIdentityProvider(idpId);
            //Assert.IsType<List<Csr>>(response);
        }

        /// <summary>
        /// Test ListIdentityProviderApplicationUsers
        /// </summary>
        [Fact]
        public void ListIdentityProviderApplicationUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //var response = instance.ListIdentityProviderApplicationUsers(idpId);
            //Assert.IsType<List<IdentityProviderApplicationUser>>(response);
        }

        /// <summary>
        /// Test ListIdentityProviderKeys
        /// </summary>
        [Fact]
        public void ListIdentityProviderKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string after = null;
            //int? limit = null;
            //var response = instance.ListIdentityProviderKeys(after, limit);
            //Assert.IsType<List<JsonWebKey>>(response);
        }

        /// <summary>
        /// Test ListIdentityProviderSigningKeys
        /// </summary>
        [Fact]
        public void ListIdentityProviderSigningKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //var response = instance.ListIdentityProviderSigningKeys(idpId);
            //Assert.IsType<List<JsonWebKey>>(response);
        }

        /// <summary>
        /// Test ListIdentityProviders
        /// </summary>
        [Fact]
        public void ListIdentityProvidersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //string after = null;
            //int? limit = null;
            //string type = null;
            //var response = instance.ListIdentityProviders(q, after, limit, type);
            //Assert.IsType<List<IdentityProvider>>(response);
        }

        /// <summary>
        /// Test ListSocialAuthTokens
        /// </summary>
        [Fact]
        public void ListSocialAuthTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //string userId = null;
            //var response = instance.ListSocialAuthTokens(idpId, userId);
            //Assert.IsType<List<SocialAuthToken>>(response);
        }

        /// <summary>
        /// Test PublishCsrForIdentityProvider
        /// </summary>
        [Fact]
        public void PublishCsrForIdentityProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //string csrId = null;
            //System.IO.Stream body = null;
            //var response = instance.PublishCsrForIdentityProvider(idpId, csrId, body);
            //Assert.IsType<JsonWebKey>(response);
        }

        /// <summary>
        /// Test RevokeCsrForIdentityProvider
        /// </summary>
        [Fact]
        public void RevokeCsrForIdentityProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //string csrId = null;
            //instance.RevokeCsrForIdentityProvider(idpId, csrId);
        }

        /// <summary>
        /// Test UnlinkUserFromIdentityProvider
        /// </summary>
        [Fact]
        public void UnlinkUserFromIdentityProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //string userId = null;
            //instance.UnlinkUserFromIdentityProvider(idpId, userId);
        }

        /// <summary>
        /// Test UpdateIdentityProvider
        /// </summary>
        [Fact]
        public void UpdateIdentityProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idpId = null;
            //IdentityProvider identityProvider = null;
            //var response = instance.UpdateIdentityProvider(idpId, identityProvider);
            //Assert.IsType<IdentityProvider>(response);
        }
    }
}
