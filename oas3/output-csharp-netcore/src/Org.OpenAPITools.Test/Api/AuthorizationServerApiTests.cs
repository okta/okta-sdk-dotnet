/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing AuthorizationServerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AuthorizationServerApiTests : IDisposable
    {
        private AuthorizationServerApi instance;

        public AuthorizationServerApiTests()
        {
            instance = new AuthorizationServerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AuthorizationServerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AuthorizationServerApi
            //Assert.IsType<AuthorizationServerApi>(instance);
        }

        /// <summary>
        /// Test ActivateAuthorizationServer
        /// </summary>
        [Fact]
        public void ActivateAuthorizationServerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //instance.ActivateAuthorizationServer(authServerId);
        }

        /// <summary>
        /// Test ActivateAuthorizationServerPolicy
        /// </summary>
        [Fact]
        public void ActivateAuthorizationServerPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string policyId = null;
            //instance.ActivateAuthorizationServerPolicy(authServerId, policyId);
        }

        /// <summary>
        /// Test ActivateAuthorizationServerPolicyRule
        /// </summary>
        [Fact]
        public void ActivateAuthorizationServerPolicyRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string policyId = null;
            //string ruleId = null;
            //instance.ActivateAuthorizationServerPolicyRule(authServerId, policyId, ruleId);
        }

        /// <summary>
        /// Test CreateAuthorizationServer
        /// </summary>
        [Fact]
        public void CreateAuthorizationServerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AuthorizationServer authorizationServer = null;
            //var response = instance.CreateAuthorizationServer(authorizationServer);
            //Assert.IsType<AuthorizationServer>(response);
        }

        /// <summary>
        /// Test CreateAuthorizationServerPolicy
        /// </summary>
        [Fact]
        public void CreateAuthorizationServerPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //AuthorizationServerPolicy policy = null;
            //var response = instance.CreateAuthorizationServerPolicy(authServerId, policy);
            //Assert.IsType<AuthorizationServerPolicy>(response);
        }

        /// <summary>
        /// Test CreateAuthorizationServerPolicyRule
        /// </summary>
        [Fact]
        public void CreateAuthorizationServerPolicyRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string policyId = null;
            //string authServerId = null;
            //AuthorizationServerPolicyRule policyRule = null;
            //var response = instance.CreateAuthorizationServerPolicyRule(policyId, authServerId, policyRule);
            //Assert.IsType<AuthorizationServerPolicyRule>(response);
        }

        /// <summary>
        /// Test CreateOAuth2Claim
        /// </summary>
        [Fact]
        public void CreateOAuth2ClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //OAuth2Claim oAuth2Claim = null;
            //var response = instance.CreateOAuth2Claim(authServerId, oAuth2Claim);
            //Assert.IsType<OAuth2Claim>(response);
        }

        /// <summary>
        /// Test CreateOAuth2Scope
        /// </summary>
        [Fact]
        public void CreateOAuth2ScopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //OAuth2Scope oAuth2Scope = null;
            //var response = instance.CreateOAuth2Scope(authServerId, oAuth2Scope);
            //Assert.IsType<OAuth2Scope>(response);
        }

        /// <summary>
        /// Test DeactivateAuthorizationServer
        /// </summary>
        [Fact]
        public void DeactivateAuthorizationServerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //instance.DeactivateAuthorizationServer(authServerId);
        }

        /// <summary>
        /// Test DeactivateAuthorizationServerPolicy
        /// </summary>
        [Fact]
        public void DeactivateAuthorizationServerPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string policyId = null;
            //instance.DeactivateAuthorizationServerPolicy(authServerId, policyId);
        }

        /// <summary>
        /// Test DeactivateAuthorizationServerPolicyRule
        /// </summary>
        [Fact]
        public void DeactivateAuthorizationServerPolicyRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string policyId = null;
            //string ruleId = null;
            //instance.DeactivateAuthorizationServerPolicyRule(authServerId, policyId, ruleId);
        }

        /// <summary>
        /// Test DeleteAuthorizationServer
        /// </summary>
        [Fact]
        public void DeleteAuthorizationServerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //instance.DeleteAuthorizationServer(authServerId);
        }

        /// <summary>
        /// Test DeleteAuthorizationServerPolicy
        /// </summary>
        [Fact]
        public void DeleteAuthorizationServerPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string policyId = null;
            //instance.DeleteAuthorizationServerPolicy(authServerId, policyId);
        }

        /// <summary>
        /// Test DeleteAuthorizationServerPolicyRule
        /// </summary>
        [Fact]
        public void DeleteAuthorizationServerPolicyRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string policyId = null;
            //string authServerId = null;
            //string ruleId = null;
            //instance.DeleteAuthorizationServerPolicyRule(policyId, authServerId, ruleId);
        }

        /// <summary>
        /// Test DeleteOAuth2Claim
        /// </summary>
        [Fact]
        public void DeleteOAuth2ClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string claimId = null;
            //instance.DeleteOAuth2Claim(authServerId, claimId);
        }

        /// <summary>
        /// Test DeleteOAuth2Scope
        /// </summary>
        [Fact]
        public void DeleteOAuth2ScopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string scopeId = null;
            //instance.DeleteOAuth2Scope(authServerId, scopeId);
        }

        /// <summary>
        /// Test GetAuthorizationServer
        /// </summary>
        [Fact]
        public void GetAuthorizationServerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //var response = instance.GetAuthorizationServer(authServerId);
            //Assert.IsType<AuthorizationServer>(response);
        }

        /// <summary>
        /// Test GetAuthorizationServerPolicy
        /// </summary>
        [Fact]
        public void GetAuthorizationServerPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string policyId = null;
            //var response = instance.GetAuthorizationServerPolicy(authServerId, policyId);
            //Assert.IsType<AuthorizationServerPolicy>(response);
        }

        /// <summary>
        /// Test GetAuthorizationServerPolicyRule
        /// </summary>
        [Fact]
        public void GetAuthorizationServerPolicyRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string policyId = null;
            //string authServerId = null;
            //string ruleId = null;
            //var response = instance.GetAuthorizationServerPolicyRule(policyId, authServerId, ruleId);
            //Assert.IsType<AuthorizationServerPolicyRule>(response);
        }

        /// <summary>
        /// Test GetOAuth2Claim
        /// </summary>
        [Fact]
        public void GetOAuth2ClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string claimId = null;
            //var response = instance.GetOAuth2Claim(authServerId, claimId);
            //Assert.IsType<OAuth2Claim>(response);
        }

        /// <summary>
        /// Test GetOAuth2Scope
        /// </summary>
        [Fact]
        public void GetOAuth2ScopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string scopeId = null;
            //var response = instance.GetOAuth2Scope(authServerId, scopeId);
            //Assert.IsType<OAuth2Scope>(response);
        }

        /// <summary>
        /// Test GetRefreshTokenForAuthorizationServerAndClient
        /// </summary>
        [Fact]
        public void GetRefreshTokenForAuthorizationServerAndClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string clientId = null;
            //string tokenId = null;
            //string expand = null;
            //var response = instance.GetRefreshTokenForAuthorizationServerAndClient(authServerId, clientId, tokenId, expand);
            //Assert.IsType<OAuth2RefreshToken>(response);
        }

        /// <summary>
        /// Test ListAuthorizationServerKeys
        /// </summary>
        [Fact]
        public void ListAuthorizationServerKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //var response = instance.ListAuthorizationServerKeys(authServerId);
            //Assert.IsType<List<JsonWebKey>>(response);
        }

        /// <summary>
        /// Test ListAuthorizationServerPolicies
        /// </summary>
        [Fact]
        public void ListAuthorizationServerPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //var response = instance.ListAuthorizationServerPolicies(authServerId);
            //Assert.IsType<List<AuthorizationServerPolicy>>(response);
        }

        /// <summary>
        /// Test ListAuthorizationServerPolicyRules
        /// </summary>
        [Fact]
        public void ListAuthorizationServerPolicyRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string policyId = null;
            //string authServerId = null;
            //var response = instance.ListAuthorizationServerPolicyRules(policyId, authServerId);
            //Assert.IsType<List<AuthorizationServerPolicyRule>>(response);
        }

        /// <summary>
        /// Test ListAuthorizationServers
        /// </summary>
        [Fact]
        public void ListAuthorizationServersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //string limit = null;
            //string after = null;
            //var response = instance.ListAuthorizationServers(q, limit, after);
            //Assert.IsType<List<AuthorizationServer>>(response);
        }

        /// <summary>
        /// Test ListOAuth2Claims
        /// </summary>
        [Fact]
        public void ListOAuth2ClaimsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //var response = instance.ListOAuth2Claims(authServerId);
            //Assert.IsType<List<OAuth2Claim>>(response);
        }

        /// <summary>
        /// Test ListOAuth2ClientsForAuthorizationServer
        /// </summary>
        [Fact]
        public void ListOAuth2ClientsForAuthorizationServerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //var response = instance.ListOAuth2ClientsForAuthorizationServer(authServerId);
            //Assert.IsType<List<OAuth2Client>>(response);
        }

        /// <summary>
        /// Test ListOAuth2Scopes
        /// </summary>
        [Fact]
        public void ListOAuth2ScopesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string q = null;
            //string filter = null;
            //string cursor = null;
            //int? limit = null;
            //var response = instance.ListOAuth2Scopes(authServerId, q, filter, cursor, limit);
            //Assert.IsType<List<OAuth2Scope>>(response);
        }

        /// <summary>
        /// Test ListRefreshTokensForAuthorizationServerAndClient
        /// </summary>
        [Fact]
        public void ListRefreshTokensForAuthorizationServerAndClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string clientId = null;
            //string expand = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.ListRefreshTokensForAuthorizationServerAndClient(authServerId, clientId, expand, after, limit);
            //Assert.IsType<List<OAuth2RefreshToken>>(response);
        }

        /// <summary>
        /// Test RevokeRefreshTokenForAuthorizationServerAndClient
        /// </summary>
        [Fact]
        public void RevokeRefreshTokenForAuthorizationServerAndClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string clientId = null;
            //string tokenId = null;
            //instance.RevokeRefreshTokenForAuthorizationServerAndClient(authServerId, clientId, tokenId);
        }

        /// <summary>
        /// Test RevokeRefreshTokensForAuthorizationServerAndClient
        /// </summary>
        [Fact]
        public void RevokeRefreshTokensForAuthorizationServerAndClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string clientId = null;
            //instance.RevokeRefreshTokensForAuthorizationServerAndClient(authServerId, clientId);
        }

        /// <summary>
        /// Test RotateAuthorizationServerKeys
        /// </summary>
        [Fact]
        public void RotateAuthorizationServerKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //JwkUse use = null;
            //var response = instance.RotateAuthorizationServerKeys(authServerId, use);
            //Assert.IsType<List<JsonWebKey>>(response);
        }

        /// <summary>
        /// Test UpdateAuthorizationServer
        /// </summary>
        [Fact]
        public void UpdateAuthorizationServerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //AuthorizationServer authorizationServer = null;
            //var response = instance.UpdateAuthorizationServer(authServerId, authorizationServer);
            //Assert.IsType<AuthorizationServer>(response);
        }

        /// <summary>
        /// Test UpdateAuthorizationServerPolicy
        /// </summary>
        [Fact]
        public void UpdateAuthorizationServerPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string policyId = null;
            //AuthorizationServerPolicy policy = null;
            //var response = instance.UpdateAuthorizationServerPolicy(authServerId, policyId, policy);
            //Assert.IsType<AuthorizationServerPolicy>(response);
        }

        /// <summary>
        /// Test UpdateAuthorizationServerPolicyRule
        /// </summary>
        [Fact]
        public void UpdateAuthorizationServerPolicyRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string policyId = null;
            //string authServerId = null;
            //string ruleId = null;
            //AuthorizationServerPolicyRule policyRule = null;
            //var response = instance.UpdateAuthorizationServerPolicyRule(policyId, authServerId, ruleId, policyRule);
            //Assert.IsType<AuthorizationServerPolicyRule>(response);
        }

        /// <summary>
        /// Test UpdateOAuth2Claim
        /// </summary>
        [Fact]
        public void UpdateOAuth2ClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string claimId = null;
            //OAuth2Claim oAuth2Claim = null;
            //var response = instance.UpdateOAuth2Claim(authServerId, claimId, oAuth2Claim);
            //Assert.IsType<OAuth2Claim>(response);
        }

        /// <summary>
        /// Test UpdateOAuth2Scope
        /// </summary>
        [Fact]
        public void UpdateOAuth2ScopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authServerId = null;
            //string scopeId = null;
            //OAuth2Scope oAuth2Scope = null;
            //var response = instance.UpdateOAuth2Scope(authServerId, scopeId, oAuth2Scope);
            //Assert.IsType<OAuth2Scope>(response);
        }
    }
}
