/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing GroupApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GroupApiTests : IDisposable
    {
        private GroupApi instance;

        public GroupApiTests()
        {
            instance = new GroupApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GroupApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GroupApi
            //Assert.IsType<GroupApi>(instance);
        }

        /// <summary>
        /// Test ActivateGroupRule
        /// </summary>
        [Fact]
        public void ActivateGroupRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ruleId = null;
            //instance.ActivateGroupRule(ruleId);
        }

        /// <summary>
        /// Test AddApplicationInstanceTargetToAppAdminRoleGivenToGroup
        /// </summary>
        [Fact]
        public void AddApplicationInstanceTargetToAppAdminRoleGivenToGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string roleId = null;
            //string appName = null;
            //string applicationId = null;
            //instance.AddApplicationInstanceTargetToAppAdminRoleGivenToGroup(groupId, roleId, appName, applicationId);
        }

        /// <summary>
        /// Test AddApplicationTargetToAdminRoleGivenToGroup
        /// </summary>
        [Fact]
        public void AddApplicationTargetToAdminRoleGivenToGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string roleId = null;
            //string appName = null;
            //instance.AddApplicationTargetToAdminRoleGivenToGroup(groupId, roleId, appName);
        }

        /// <summary>
        /// Test AddGroupTargetToGroupAdministratorRoleForGroup
        /// </summary>
        [Fact]
        public void AddGroupTargetToGroupAdministratorRoleForGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string roleId = null;
            //string targetGroupId = null;
            //instance.AddGroupTargetToGroupAdministratorRoleForGroup(groupId, roleId, targetGroupId);
        }

        /// <summary>
        /// Test AddUserToGroup
        /// </summary>
        [Fact]
        public void AddUserToGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string userId = null;
            //instance.AddUserToGroup(groupId, userId);
        }

        /// <summary>
        /// Test AssignRoleToGroup
        /// </summary>
        [Fact]
        public void AssignRoleToGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //AssignRoleRequest assignRoleRequest = null;
            //bool? disableNotifications = null;
            //var response = instance.AssignRoleToGroup(groupId, assignRoleRequest, disableNotifications);
            //Assert.IsType<Role>(response);
        }

        /// <summary>
        /// Test CreateGroup
        /// </summary>
        [Fact]
        public void CreateGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Group group = null;
            //var response = instance.CreateGroup(group);
            //Assert.IsType<Group>(response);
        }

        /// <summary>
        /// Test CreateGroupRule
        /// </summary>
        [Fact]
        public void CreateGroupRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GroupRule groupRule = null;
            //var response = instance.CreateGroupRule(groupRule);
            //Assert.IsType<GroupRule>(response);
        }

        /// <summary>
        /// Test DeactivateGroupRule
        /// </summary>
        [Fact]
        public void DeactivateGroupRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ruleId = null;
            //instance.DeactivateGroupRule(ruleId);
        }

        /// <summary>
        /// Test DeleteGroup
        /// </summary>
        [Fact]
        public void DeleteGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //instance.DeleteGroup(groupId);
        }

        /// <summary>
        /// Test DeleteGroupRule
        /// </summary>
        [Fact]
        public void DeleteGroupRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ruleId = null;
            //bool? removeUsers = null;
            //instance.DeleteGroupRule(ruleId, removeUsers);
        }

        /// <summary>
        /// Test GetGroup
        /// </summary>
        [Fact]
        public void GetGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //var response = instance.GetGroup(groupId);
            //Assert.IsType<Group>(response);
        }

        /// <summary>
        /// Test GetGroupRule
        /// </summary>
        [Fact]
        public void GetGroupRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ruleId = null;
            //string expand = null;
            //var response = instance.GetGroupRule(ruleId, expand);
            //Assert.IsType<GroupRule>(response);
        }

        /// <summary>
        /// Test GetRole
        /// </summary>
        [Fact]
        public void GetRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string roleId = null;
            //var response = instance.GetRole(groupId, roleId);
            //Assert.IsType<Role>(response);
        }

        /// <summary>
        /// Test ListApplicationTargetsForApplicationAdministratorRoleForGroup
        /// </summary>
        [Fact]
        public void ListApplicationTargetsForApplicationAdministratorRoleForGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string roleId = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.ListApplicationTargetsForApplicationAdministratorRoleForGroup(groupId, roleId, after, limit);
            //Assert.IsType<List<CatalogApplication>>(response);
        }

        /// <summary>
        /// Test ListAssignedApplicationsForGroup
        /// </summary>
        [Fact]
        public void ListAssignedApplicationsForGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.ListAssignedApplicationsForGroup(groupId, after, limit);
            //Assert.IsType<List<Application>>(response);
        }

        /// <summary>
        /// Test ListGroupAssignedRoles
        /// </summary>
        [Fact]
        public void ListGroupAssignedRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string expand = null;
            //var response = instance.ListGroupAssignedRoles(groupId, expand);
            //Assert.IsType<List<Role>>(response);
        }

        /// <summary>
        /// Test ListGroupRules
        /// </summary>
        [Fact]
        public void ListGroupRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string after = null;
            //string search = null;
            //string expand = null;
            //var response = instance.ListGroupRules(limit, after, search, expand);
            //Assert.IsType<List<GroupRule>>(response);
        }

        /// <summary>
        /// Test ListGroupTargetsForGroupRole
        /// </summary>
        [Fact]
        public void ListGroupTargetsForGroupRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string roleId = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.ListGroupTargetsForGroupRole(groupId, roleId, after, limit);
            //Assert.IsType<List<Group>>(response);
        }

        /// <summary>
        /// Test ListGroupUsers
        /// </summary>
        [Fact]
        public void ListGroupUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.ListGroupUsers(groupId, after, limit);
            //Assert.IsType<List<User>>(response);
        }

        /// <summary>
        /// Test ListGroups
        /// </summary>
        [Fact]
        public void ListGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //string search = null;
            //string after = null;
            //int? limit = null;
            //string expand = null;
            //var response = instance.ListGroups(q, search, after, limit, expand);
            //Assert.IsType<List<Group>>(response);
        }

        /// <summary>
        /// Test RemoveApplicationTargetFromAdministratorRoleGivenToGroup
        /// </summary>
        [Fact]
        public void RemoveApplicationTargetFromAdministratorRoleGivenToGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string roleId = null;
            //string appName = null;
            //string applicationId = null;
            //instance.RemoveApplicationTargetFromAdministratorRoleGivenToGroup(groupId, roleId, appName, applicationId);
        }

        /// <summary>
        /// Test RemoveApplicationTargetFromApplicationAdministratorRoleGivenToGroup
        /// </summary>
        [Fact]
        public void RemoveApplicationTargetFromApplicationAdministratorRoleGivenToGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string roleId = null;
            //string appName = null;
            //instance.RemoveApplicationTargetFromApplicationAdministratorRoleGivenToGroup(groupId, roleId, appName);
        }

        /// <summary>
        /// Test RemoveGroupTargetFromGroupAdministratorRoleGivenToGroup
        /// </summary>
        [Fact]
        public void RemoveGroupTargetFromGroupAdministratorRoleGivenToGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string roleId = null;
            //string targetGroupId = null;
            //instance.RemoveGroupTargetFromGroupAdministratorRoleGivenToGroup(groupId, roleId, targetGroupId);
        }

        /// <summary>
        /// Test RemoveRoleFromGroup
        /// </summary>
        [Fact]
        public void RemoveRoleFromGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string roleId = null;
            //instance.RemoveRoleFromGroup(groupId, roleId);
        }

        /// <summary>
        /// Test RemoveUserFromGroup
        /// </summary>
        [Fact]
        public void RemoveUserFromGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string userId = null;
            //instance.RemoveUserFromGroup(groupId, userId);
        }

        /// <summary>
        /// Test UpdateGroup
        /// </summary>
        [Fact]
        public void UpdateGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //Group group = null;
            //var response = instance.UpdateGroup(groupId, group);
            //Assert.IsType<Group>(response);
        }

        /// <summary>
        /// Test UpdateGroupRule
        /// </summary>
        [Fact]
        public void UpdateGroupRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ruleId = null;
            //GroupRule groupRule = null;
            //var response = instance.UpdateGroupRule(ruleId, groupRule);
            //Assert.IsType<GroupRule>(response);
        }
    }
}
