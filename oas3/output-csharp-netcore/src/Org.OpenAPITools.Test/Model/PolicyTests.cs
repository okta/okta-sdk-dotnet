/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing Policy
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class PolicyTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for Policy
        //private Policy instance;

        public PolicyTests()
        {
            // TODO uncomment below to create an instance of Policy
            //instance = new Policy();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Policy
        /// </summary>
        [Fact]
        public void PolicyInstanceTest()
        {
            // TODO uncomment below to test "IsType" Policy
            //Assert.IsType<Policy>(instance);
        }

        /// <summary>
        /// Test deserialize a AuthorizationServerPolicy from type Policy
        /// </summary>
        [Fact]
        public void AuthorizationServerPolicyDeserializeFromPolicyTest()
        {
            // TODO uncomment below to test deserialize a AuthorizationServerPolicy from type Policy
            //Assert.IsType<Policy>(JsonConvert.DeserializeObject<Policy>(new AuthorizationServerPolicy().ToJson()));
        }
        /// <summary>
        /// Test deserialize a PasswordPolicy from type Policy
        /// </summary>
        [Fact]
        public void PasswordPolicyDeserializeFromPolicyTest()
        {
            // TODO uncomment below to test deserialize a PasswordPolicy from type Policy
            //Assert.IsType<Policy>(JsonConvert.DeserializeObject<Policy>(new PasswordPolicy().ToJson()));
        }
        /// <summary>
        /// Test deserialize a OktaSignOnPolicy from type Policy
        /// </summary>
        [Fact]
        public void OktaSignOnPolicyDeserializeFromPolicyTest()
        {
            // TODO uncomment below to test deserialize a OktaSignOnPolicy from type Policy
            //Assert.IsType<Policy>(JsonConvert.DeserializeObject<Policy>(new OktaSignOnPolicy().ToJson()));
        }
        /// <summary>
        /// Test deserialize a IdentityProviderPolicy from type Policy
        /// </summary>
        [Fact]
        public void IdentityProviderPolicyDeserializeFromPolicyTest()
        {
            // TODO uncomment below to test deserialize a IdentityProviderPolicy from type Policy
            //Assert.IsType<Policy>(JsonConvert.DeserializeObject<Policy>(new IdentityProviderPolicy().ToJson()));
        }
        /// <summary>
        /// Test deserialize a AccessPolicy from type Policy
        /// </summary>
        [Fact]
        public void AccessPolicyDeserializeFromPolicyTest()
        {
            // TODO uncomment below to test deserialize a AccessPolicy from type Policy
            //Assert.IsType<Policy>(JsonConvert.DeserializeObject<Policy>(new AccessPolicy().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ProfileEnrollmentPolicy from type Policy
        /// </summary>
        [Fact]
        public void ProfileEnrollmentPolicyDeserializeFromPolicyTest()
        {
            // TODO uncomment below to test deserialize a ProfileEnrollmentPolicy from type Policy
            //Assert.IsType<Policy>(JsonConvert.DeserializeObject<Policy>(new ProfileEnrollmentPolicy().ToJson()));
        }

        /// <summary>
        /// Test the property 'Embedded'
        /// </summary>
        [Fact]
        public void EmbeddedTest()
        {
            // TODO unit test for the property 'Embedded'
        }
        /// <summary>
        /// Test the property 'Links'
        /// </summary>
        [Fact]
        public void LinksTest()
        {
            // TODO unit test for the property 'Links'
        }
        /// <summary>
        /// Test the property 'Conditions'
        /// </summary>
        [Fact]
        public void ConditionsTest()
        {
            // TODO unit test for the property 'Conditions'
        }
        /// <summary>
        /// Test the property 'Created'
        /// </summary>
        [Fact]
        public void CreatedTest()
        {
            // TODO unit test for the property 'Created'
        }
        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Fact]
        public void DescriptionTest()
        {
            // TODO unit test for the property 'Description'
        }
        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'LastUpdated'
        /// </summary>
        [Fact]
        public void LastUpdatedTest()
        {
            // TODO unit test for the property 'LastUpdated'
        }
        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }
        /// <summary>
        /// Test the property 'Priority'
        /// </summary>
        [Fact]
        public void PriorityTest()
        {
            // TODO unit test for the property 'Priority'
        }
        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Fact]
        public void StatusTest()
        {
            // TODO unit test for the property 'Status'
        }
        /// <summary>
        /// Test the property 'System'
        /// </summary>
        [Fact]
        public void SystemTest()
        {
            // TODO unit test for the property 'System'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }

    }

}
