/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing UserFactor
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class UserFactorTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for UserFactor
        //private UserFactor instance;

        public UserFactorTests()
        {
            // TODO uncomment below to create an instance of UserFactor
            //instance = new UserFactor();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserFactor
        /// </summary>
        [Fact]
        public void UserFactorInstanceTest()
        {
            // TODO uncomment below to test "IsType" UserFactor
            //Assert.IsType<UserFactor>(instance);
        }

        /// <summary>
        /// Test deserialize a TotpUserFactor from type UserFactor
        /// </summary>
        [Fact]
        public void TotpUserFactorDeserializeFromUserFactorTest()
        {
            // TODO uncomment below to test deserialize a TotpUserFactor from type UserFactor
            //Assert.IsType<UserFactor>(JsonConvert.DeserializeObject<UserFactor>(new TotpUserFactor().ToJson()));
        }
        /// <summary>
        /// Test deserialize a PushUserFactor from type UserFactor
        /// </summary>
        [Fact]
        public void PushUserFactorDeserializeFromUserFactorTest()
        {
            // TODO uncomment below to test deserialize a PushUserFactor from type UserFactor
            //Assert.IsType<UserFactor>(JsonConvert.DeserializeObject<UserFactor>(new PushUserFactor().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CallUserFactor from type UserFactor
        /// </summary>
        [Fact]
        public void CallUserFactorDeserializeFromUserFactorTest()
        {
            // TODO uncomment below to test deserialize a CallUserFactor from type UserFactor
            //Assert.IsType<UserFactor>(JsonConvert.DeserializeObject<UserFactor>(new CallUserFactor().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CustomHotpUserFactor from type UserFactor
        /// </summary>
        [Fact]
        public void CustomHotpUserFactorDeserializeFromUserFactorTest()
        {
            // TODO uncomment below to test deserialize a CustomHotpUserFactor from type UserFactor
            //Assert.IsType<UserFactor>(JsonConvert.DeserializeObject<UserFactor>(new CustomHotpUserFactor().ToJson()));
        }
        /// <summary>
        /// Test deserialize a U2fUserFactor from type UserFactor
        /// </summary>
        [Fact]
        public void U2fUserFactorDeserializeFromUserFactorTest()
        {
            // TODO uncomment below to test deserialize a U2fUserFactor from type UserFactor
            //Assert.IsType<UserFactor>(JsonConvert.DeserializeObject<UserFactor>(new U2fUserFactor().ToJson()));
        }
        /// <summary>
        /// Test deserialize a HardwareUserFactor from type UserFactor
        /// </summary>
        [Fact]
        public void HardwareUserFactorDeserializeFromUserFactorTest()
        {
            // TODO uncomment below to test deserialize a HardwareUserFactor from type UserFactor
            //Assert.IsType<UserFactor>(JsonConvert.DeserializeObject<UserFactor>(new HardwareUserFactor().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SecurityQuestionUserFactor from type UserFactor
        /// </summary>
        [Fact]
        public void SecurityQuestionUserFactorDeserializeFromUserFactorTest()
        {
            // TODO uncomment below to test deserialize a SecurityQuestionUserFactor from type UserFactor
            //Assert.IsType<UserFactor>(JsonConvert.DeserializeObject<UserFactor>(new SecurityQuestionUserFactor().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TokenUserFactor from type UserFactor
        /// </summary>
        [Fact]
        public void TokenUserFactorDeserializeFromUserFactorTest()
        {
            // TODO uncomment below to test deserialize a TokenUserFactor from type UserFactor
            //Assert.IsType<UserFactor>(JsonConvert.DeserializeObject<UserFactor>(new TokenUserFactor().ToJson()));
        }
        /// <summary>
        /// Test deserialize a WebAuthnUserFactor from type UserFactor
        /// </summary>
        [Fact]
        public void WebAuthnUserFactorDeserializeFromUserFactorTest()
        {
            // TODO uncomment below to test deserialize a WebAuthnUserFactor from type UserFactor
            //Assert.IsType<UserFactor>(JsonConvert.DeserializeObject<UserFactor>(new WebAuthnUserFactor().ToJson()));
        }
        /// <summary>
        /// Test deserialize a WebUserFactor from type UserFactor
        /// </summary>
        [Fact]
        public void WebUserFactorDeserializeFromUserFactorTest()
        {
            // TODO uncomment below to test deserialize a WebUserFactor from type UserFactor
            //Assert.IsType<UserFactor>(JsonConvert.DeserializeObject<UserFactor>(new WebUserFactor().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SmsUserFactor from type UserFactor
        /// </summary>
        [Fact]
        public void SmsUserFactorDeserializeFromUserFactorTest()
        {
            // TODO uncomment below to test deserialize a SmsUserFactor from type UserFactor
            //Assert.IsType<UserFactor>(JsonConvert.DeserializeObject<UserFactor>(new SmsUserFactor().ToJson()));
        }
        /// <summary>
        /// Test deserialize a EmailUserFactor from type UserFactor
        /// </summary>
        [Fact]
        public void EmailUserFactorDeserializeFromUserFactorTest()
        {
            // TODO uncomment below to test deserialize a EmailUserFactor from type UserFactor
            //Assert.IsType<UserFactor>(JsonConvert.DeserializeObject<UserFactor>(new EmailUserFactor().ToJson()));
        }

        /// <summary>
        /// Test the property 'Embedded'
        /// </summary>
        [Fact]
        public void EmbeddedTest()
        {
            // TODO unit test for the property 'Embedded'
        }
        /// <summary>
        /// Test the property 'Links'
        /// </summary>
        [Fact]
        public void LinksTest()
        {
            // TODO unit test for the property 'Links'
        }
        /// <summary>
        /// Test the property 'Created'
        /// </summary>
        [Fact]
        public void CreatedTest()
        {
            // TODO unit test for the property 'Created'
        }
        /// <summary>
        /// Test the property 'FactorType'
        /// </summary>
        [Fact]
        public void FactorTypeTest()
        {
            // TODO unit test for the property 'FactorType'
        }
        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'LastUpdated'
        /// </summary>
        [Fact]
        public void LastUpdatedTest()
        {
            // TODO unit test for the property 'LastUpdated'
        }
        /// <summary>
        /// Test the property 'Provider'
        /// </summary>
        [Fact]
        public void ProviderTest()
        {
            // TODO unit test for the property 'Provider'
        }
        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Fact]
        public void StatusTest()
        {
            // TODO unit test for the property 'Status'
        }
        /// <summary>
        /// Test the property 'Verify'
        /// </summary>
        [Fact]
        public void VerifyTest()
        {
            // TODO unit test for the property 'Verify'
        }

    }

}
