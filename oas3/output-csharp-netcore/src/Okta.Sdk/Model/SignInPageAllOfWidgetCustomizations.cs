/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// SignInPageAllOfWidgetCustomizations
    /// </summary>
    [DataContract(Name = "SignInPage_allOf_widgetCustomizations")]
    public partial class SignInPageAllOfWidgetCustomizations : IEquatable<SignInPageAllOfWidgetCustomizations>
    {
        
        /// <summary>
        /// Gets or Sets SignInLabel
        /// </summary>
        [DataMember(Name = "signInLabel", EmitDefaultValue = false)]
        public string SignInLabel { get; set; }

        /// <summary>
        /// Gets or Sets UsernameLabel
        /// </summary>
        [DataMember(Name = "usernameLabel", EmitDefaultValue = false)]
        public string UsernameLabel { get; set; }

        /// <summary>
        /// Gets or Sets UsernameInfoTip
        /// </summary>
        [DataMember(Name = "usernameInfoTip", EmitDefaultValue = false)]
        public string UsernameInfoTip { get; set; }

        /// <summary>
        /// Gets or Sets PasswordLabel
        /// </summary>
        [DataMember(Name = "passwordLabel", EmitDefaultValue = false)]
        public string PasswordLabel { get; set; }

        /// <summary>
        /// Gets or Sets PasswordInfoTip
        /// </summary>
        [DataMember(Name = "passwordInfoTip", EmitDefaultValue = false)]
        public string PasswordInfoTip { get; set; }

        /// <summary>
        /// Gets or Sets ShowPasswordVisibilityToggle
        /// </summary>
        [DataMember(Name = "showPasswordVisibilityToggle", EmitDefaultValue = true)]
        public bool ShowPasswordVisibilityToggle { get; set; }

        /// <summary>
        /// Gets or Sets ShowUserIdentifier
        /// </summary>
        [DataMember(Name = "showUserIdentifier", EmitDefaultValue = true)]
        public bool ShowUserIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ForgotPasswordLabel
        /// </summary>
        [DataMember(Name = "forgotPasswordLabel", EmitDefaultValue = false)]
        public string ForgotPasswordLabel { get; set; }

        /// <summary>
        /// Gets or Sets ForgotPasswordUrl
        /// </summary>
        [DataMember(Name = "forgotPasswordUrl", EmitDefaultValue = false)]
        public string ForgotPasswordUrl { get; set; }

        /// <summary>
        /// Gets or Sets UnlockAccountLabel
        /// </summary>
        [DataMember(Name = "unlockAccountLabel", EmitDefaultValue = false)]
        public string UnlockAccountLabel { get; set; }

        /// <summary>
        /// Gets or Sets UnlockAccountUrl
        /// </summary>
        [DataMember(Name = "unlockAccountUrl", EmitDefaultValue = false)]
        public string UnlockAccountUrl { get; set; }

        /// <summary>
        /// Gets or Sets HelpLabel
        /// </summary>
        [DataMember(Name = "helpLabel", EmitDefaultValue = false)]
        public string HelpLabel { get; set; }

        /// <summary>
        /// Gets or Sets HelpUrl
        /// </summary>
        [DataMember(Name = "helpUrl", EmitDefaultValue = false)]
        public string HelpUrl { get; set; }

        /// <summary>
        /// Gets or Sets CustomLink1Label
        /// </summary>
        [DataMember(Name = "customLink1Label", EmitDefaultValue = false)]
        public string CustomLink1Label { get; set; }

        /// <summary>
        /// Gets or Sets CustomLink1Url
        /// </summary>
        [DataMember(Name = "customLink1Url", EmitDefaultValue = false)]
        public string CustomLink1Url { get; set; }

        /// <summary>
        /// Gets or Sets CustomLink2Label
        /// </summary>
        [DataMember(Name = "customLink2Label", EmitDefaultValue = false)]
        public string CustomLink2Label { get; set; }

        /// <summary>
        /// Gets or Sets CustomLink2Url
        /// </summary>
        [DataMember(Name = "customLink2Url", EmitDefaultValue = false)]
        public string CustomLink2Url { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticatorPageCustomLinkLabel
        /// </summary>
        [DataMember(Name = "authenticatorPageCustomLinkLabel", EmitDefaultValue = false)]
        public string AuthenticatorPageCustomLinkLabel { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticatorPageCustomLinkUrl
        /// </summary>
        [DataMember(Name = "authenticatorPageCustomLinkUrl", EmitDefaultValue = false)]
        public string AuthenticatorPageCustomLinkUrl { get; set; }

        /// <summary>
        /// Gets or Sets ClassicRecoveryFlowEmailOrUsernameLabel
        /// </summary>
        [DataMember(Name = "classicRecoveryFlowEmailOrUsernameLabel", EmitDefaultValue = false)]
        public string ClassicRecoveryFlowEmailOrUsernameLabel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignInPageAllOfWidgetCustomizations {\n");
            sb.Append("  SignInLabel: ").Append(SignInLabel).Append("\n");
            sb.Append("  UsernameLabel: ").Append(UsernameLabel).Append("\n");
            sb.Append("  UsernameInfoTip: ").Append(UsernameInfoTip).Append("\n");
            sb.Append("  PasswordLabel: ").Append(PasswordLabel).Append("\n");
            sb.Append("  PasswordInfoTip: ").Append(PasswordInfoTip).Append("\n");
            sb.Append("  ShowPasswordVisibilityToggle: ").Append(ShowPasswordVisibilityToggle).Append("\n");
            sb.Append("  ShowUserIdentifier: ").Append(ShowUserIdentifier).Append("\n");
            sb.Append("  ForgotPasswordLabel: ").Append(ForgotPasswordLabel).Append("\n");
            sb.Append("  ForgotPasswordUrl: ").Append(ForgotPasswordUrl).Append("\n");
            sb.Append("  UnlockAccountLabel: ").Append(UnlockAccountLabel).Append("\n");
            sb.Append("  UnlockAccountUrl: ").Append(UnlockAccountUrl).Append("\n");
            sb.Append("  HelpLabel: ").Append(HelpLabel).Append("\n");
            sb.Append("  HelpUrl: ").Append(HelpUrl).Append("\n");
            sb.Append("  CustomLink1Label: ").Append(CustomLink1Label).Append("\n");
            sb.Append("  CustomLink1Url: ").Append(CustomLink1Url).Append("\n");
            sb.Append("  CustomLink2Label: ").Append(CustomLink2Label).Append("\n");
            sb.Append("  CustomLink2Url: ").Append(CustomLink2Url).Append("\n");
            sb.Append("  AuthenticatorPageCustomLinkLabel: ").Append(AuthenticatorPageCustomLinkLabel).Append("\n");
            sb.Append("  AuthenticatorPageCustomLinkUrl: ").Append(AuthenticatorPageCustomLinkUrl).Append("\n");
            sb.Append("  ClassicRecoveryFlowEmailOrUsernameLabel: ").Append(ClassicRecoveryFlowEmailOrUsernameLabel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignInPageAllOfWidgetCustomizations);
        }

        /// <summary>
        /// Returns true if SignInPageAllOfWidgetCustomizations instances are equal
        /// </summary>
        /// <param name="input">Instance of SignInPageAllOfWidgetCustomizations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignInPageAllOfWidgetCustomizations input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SignInLabel == input.SignInLabel ||
                    (this.SignInLabel != null &&
                    this.SignInLabel.Equals(input.SignInLabel))
                ) && 
                (
                    this.UsernameLabel == input.UsernameLabel ||
                    (this.UsernameLabel != null &&
                    this.UsernameLabel.Equals(input.UsernameLabel))
                ) && 
                (
                    this.UsernameInfoTip == input.UsernameInfoTip ||
                    (this.UsernameInfoTip != null &&
                    this.UsernameInfoTip.Equals(input.UsernameInfoTip))
                ) && 
                (
                    this.PasswordLabel == input.PasswordLabel ||
                    (this.PasswordLabel != null &&
                    this.PasswordLabel.Equals(input.PasswordLabel))
                ) && 
                (
                    this.PasswordInfoTip == input.PasswordInfoTip ||
                    (this.PasswordInfoTip != null &&
                    this.PasswordInfoTip.Equals(input.PasswordInfoTip))
                ) && 
                (
                    this.ShowPasswordVisibilityToggle == input.ShowPasswordVisibilityToggle ||
                    this.ShowPasswordVisibilityToggle.Equals(input.ShowPasswordVisibilityToggle)
                ) && 
                (
                    this.ShowUserIdentifier == input.ShowUserIdentifier ||
                    this.ShowUserIdentifier.Equals(input.ShowUserIdentifier)
                ) && 
                (
                    this.ForgotPasswordLabel == input.ForgotPasswordLabel ||
                    (this.ForgotPasswordLabel != null &&
                    this.ForgotPasswordLabel.Equals(input.ForgotPasswordLabel))
                ) && 
                (
                    this.ForgotPasswordUrl == input.ForgotPasswordUrl ||
                    (this.ForgotPasswordUrl != null &&
                    this.ForgotPasswordUrl.Equals(input.ForgotPasswordUrl))
                ) && 
                (
                    this.UnlockAccountLabel == input.UnlockAccountLabel ||
                    (this.UnlockAccountLabel != null &&
                    this.UnlockAccountLabel.Equals(input.UnlockAccountLabel))
                ) && 
                (
                    this.UnlockAccountUrl == input.UnlockAccountUrl ||
                    (this.UnlockAccountUrl != null &&
                    this.UnlockAccountUrl.Equals(input.UnlockAccountUrl))
                ) && 
                (
                    this.HelpLabel == input.HelpLabel ||
                    (this.HelpLabel != null &&
                    this.HelpLabel.Equals(input.HelpLabel))
                ) && 
                (
                    this.HelpUrl == input.HelpUrl ||
                    (this.HelpUrl != null &&
                    this.HelpUrl.Equals(input.HelpUrl))
                ) && 
                (
                    this.CustomLink1Label == input.CustomLink1Label ||
                    (this.CustomLink1Label != null &&
                    this.CustomLink1Label.Equals(input.CustomLink1Label))
                ) && 
                (
                    this.CustomLink1Url == input.CustomLink1Url ||
                    (this.CustomLink1Url != null &&
                    this.CustomLink1Url.Equals(input.CustomLink1Url))
                ) && 
                (
                    this.CustomLink2Label == input.CustomLink2Label ||
                    (this.CustomLink2Label != null &&
                    this.CustomLink2Label.Equals(input.CustomLink2Label))
                ) && 
                (
                    this.CustomLink2Url == input.CustomLink2Url ||
                    (this.CustomLink2Url != null &&
                    this.CustomLink2Url.Equals(input.CustomLink2Url))
                ) && 
                (
                    this.AuthenticatorPageCustomLinkLabel == input.AuthenticatorPageCustomLinkLabel ||
                    (this.AuthenticatorPageCustomLinkLabel != null &&
                    this.AuthenticatorPageCustomLinkLabel.Equals(input.AuthenticatorPageCustomLinkLabel))
                ) && 
                (
                    this.AuthenticatorPageCustomLinkUrl == input.AuthenticatorPageCustomLinkUrl ||
                    (this.AuthenticatorPageCustomLinkUrl != null &&
                    this.AuthenticatorPageCustomLinkUrl.Equals(input.AuthenticatorPageCustomLinkUrl))
                ) && 
                (
                    this.ClassicRecoveryFlowEmailOrUsernameLabel == input.ClassicRecoveryFlowEmailOrUsernameLabel ||
                    (this.ClassicRecoveryFlowEmailOrUsernameLabel != null &&
                    this.ClassicRecoveryFlowEmailOrUsernameLabel.Equals(input.ClassicRecoveryFlowEmailOrUsernameLabel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignInLabel != null)
                {
                    hashCode = (hashCode * 59) + this.SignInLabel.GetHashCode();
                }
                if (this.UsernameLabel != null)
                {
                    hashCode = (hashCode * 59) + this.UsernameLabel.GetHashCode();
                }
                if (this.UsernameInfoTip != null)
                {
                    hashCode = (hashCode * 59) + this.UsernameInfoTip.GetHashCode();
                }
                if (this.PasswordLabel != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordLabel.GetHashCode();
                }
                if (this.PasswordInfoTip != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordInfoTip.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowPasswordVisibilityToggle.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowUserIdentifier.GetHashCode();
                if (this.ForgotPasswordLabel != null)
                {
                    hashCode = (hashCode * 59) + this.ForgotPasswordLabel.GetHashCode();
                }
                if (this.ForgotPasswordUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ForgotPasswordUrl.GetHashCode();
                }
                if (this.UnlockAccountLabel != null)
                {
                    hashCode = (hashCode * 59) + this.UnlockAccountLabel.GetHashCode();
                }
                if (this.UnlockAccountUrl != null)
                {
                    hashCode = (hashCode * 59) + this.UnlockAccountUrl.GetHashCode();
                }
                if (this.HelpLabel != null)
                {
                    hashCode = (hashCode * 59) + this.HelpLabel.GetHashCode();
                }
                if (this.HelpUrl != null)
                {
                    hashCode = (hashCode * 59) + this.HelpUrl.GetHashCode();
                }
                if (this.CustomLink1Label != null)
                {
                    hashCode = (hashCode * 59) + this.CustomLink1Label.GetHashCode();
                }
                if (this.CustomLink1Url != null)
                {
                    hashCode = (hashCode * 59) + this.CustomLink1Url.GetHashCode();
                }
                if (this.CustomLink2Label != null)
                {
                    hashCode = (hashCode * 59) + this.CustomLink2Label.GetHashCode();
                }
                if (this.CustomLink2Url != null)
                {
                    hashCode = (hashCode * 59) + this.CustomLink2Url.GetHashCode();
                }
                if (this.AuthenticatorPageCustomLinkLabel != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticatorPageCustomLinkLabel.GetHashCode();
                }
                if (this.AuthenticatorPageCustomLinkUrl != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticatorPageCustomLinkUrl.GetHashCode();
                }
                if (this.ClassicRecoveryFlowEmailOrUsernameLabel != null)
                {
                    hashCode = (hashCode * 59) + this.ClassicRecoveryFlowEmailOrUsernameLabel.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
