/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// Template: ModelGeneric
    /// SwaApplicationSettingsApplication
    /// </summary>
    [DataContract(Name = "SwaApplicationSettingsApplication")]
    public partial class SwaApplicationSettingsApplication : IEquatable<SwaApplicationSettingsApplication>
    {
        
        /// <summary>
        /// Gets or Sets ButtonField
        /// </summary>
        [DataMember(Name = "buttonField", EmitDefaultValue = false)]
        public string ButtonField { get; set; }

        /// <summary>
        /// Gets or Sets Checkbox
        /// </summary>
        [DataMember(Name = "checkbox", EmitDefaultValue = false)]
        public string Checkbox { get; set; }

        /// <summary>
        /// Gets or Sets LoginUrlRegex
        /// </summary>
        [DataMember(Name = "loginUrlRegex", EmitDefaultValue = false)]
        public string LoginUrlRegex { get; set; }

        /// <summary>
        /// Gets or Sets PasswordField
        /// </summary>
        [DataMember(Name = "passwordField", EmitDefaultValue = false)]
        public string PasswordField { get; set; }

        /// <summary>
        /// Gets or Sets RedirectUrl
        /// </summary>
        [DataMember(Name = "redirectUrl", EmitDefaultValue = false)]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets UsernameField
        /// </summary>
        [DataMember(Name = "usernameField", EmitDefaultValue = false)]
        public string UsernameField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SwaApplicationSettingsApplication {\n");
            sb.Append("  ButtonField: ").Append(ButtonField).Append("\n");
            sb.Append("  Checkbox: ").Append(Checkbox).Append("\n");
            sb.Append("  LoginUrlRegex: ").Append(LoginUrlRegex).Append("\n");
            sb.Append("  PasswordField: ").Append(PasswordField).Append("\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UsernameField: ").Append(UsernameField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SwaApplicationSettingsApplication);
        }

        /// <summary>
        /// Returns true if SwaApplicationSettingsApplication instances are equal
        /// </summary>
        /// <param name="input">Instance of SwaApplicationSettingsApplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SwaApplicationSettingsApplication input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ButtonField == input.ButtonField ||
                    (this.ButtonField != null &&
                    this.ButtonField.Equals(input.ButtonField))
                ) && 
                (
                    this.Checkbox == input.Checkbox ||
                    (this.Checkbox != null &&
                    this.Checkbox.Equals(input.Checkbox))
                ) && 
                (
                    this.LoginUrlRegex == input.LoginUrlRegex ||
                    (this.LoginUrlRegex != null &&
                    this.LoginUrlRegex.Equals(input.LoginUrlRegex))
                ) && 
                (
                    this.PasswordField == input.PasswordField ||
                    (this.PasswordField != null &&
                    this.PasswordField.Equals(input.PasswordField))
                ) && 
                (
                    this.RedirectUrl == input.RedirectUrl ||
                    (this.RedirectUrl != null &&
                    this.RedirectUrl.Equals(input.RedirectUrl))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.UsernameField == input.UsernameField ||
                    (this.UsernameField != null &&
                    this.UsernameField.Equals(input.UsernameField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ButtonField != null)
                {
                    hashCode = (hashCode * 59) + this.ButtonField.GetHashCode();
                }
                if (this.Checkbox != null)
                {
                    hashCode = (hashCode * 59) + this.Checkbox.GetHashCode();
                }
                if (this.LoginUrlRegex != null)
                {
                    hashCode = (hashCode * 59) + this.LoginUrlRegex.GetHashCode();
                }
                if (this.PasswordField != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordField.GetHashCode();
                }
                if (this.RedirectUrl != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectUrl.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.UsernameField != null)
                {
                    hashCode = (hashCode * 59) + this.UsernameField.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
