/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomizationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Email Customization
        /// </summary>
        /// <remarks>
        /// Creates a new email customization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="instance"> (optional)</param>
        /// <returns>EmailCustomization</returns>
        EmailCustomization CreateEmailCustomization(string brandId, string templateName, EmailCustomization instance = default(EmailCustomization));

        /// <summary>
        /// Create Email Customization
        /// </summary>
        /// <remarks>
        /// Creates a new email customization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="instance"> (optional)</param>
        /// <returns>ApiResponse of EmailCustomization</returns>
        ApiResponse<EmailCustomization> CreateEmailCustomizationWithHttpInfo(string brandId, string templateName, EmailCustomization instance = default(EmailCustomization));
        /// <summary>
        /// Delete All Email Customizations
        /// </summary>
        /// <remarks>
        /// Deletes all customizations for an email template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <returns></returns>
        void DeleteAllCustomizations(string brandId, string templateName);

        /// <summary>
        /// Delete All Email Customizations
        /// </summary>
        /// <remarks>
        /// Deletes all customizations for an email template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllCustomizationsWithHttpInfo(string brandId, string templateName);
        /// <summary>
        /// Deletes a Theme background image
        /// </summary>
        /// <remarks>
        /// Deletes a Theme background image
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        void DeleteBrandThemeBackgroundImage(string brandId, string themeId);

        /// <summary>
        /// Deletes a Theme background image
        /// </summary>
        /// <remarks>
        /// Deletes a Theme background image
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBrandThemeBackgroundImageWithHttpInfo(string brandId, string themeId);
        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        void DeleteBrandThemeFavicon(string brandId, string themeId);

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBrandThemeFaviconWithHttpInfo(string brandId, string themeId);
        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        void DeleteBrandThemeLogo(string brandId, string themeId);

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBrandThemeLogoWithHttpInfo(string brandId, string themeId);
        /// <summary>
        /// Delete Email Customization
        /// </summary>
        /// <remarks>
        /// Deletes an email customization by its unique identifier.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <returns></returns>
        void DeleteEmailCustomization(string brandId, string templateName, string customizationId);

        /// <summary>
        /// Delete Email Customization
        /// </summary>
        /// <remarks>
        /// Deletes an email customization by its unique identifier.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEmailCustomizationWithHttpInfo(string brandId, string templateName, string customizationId);
        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Fetches a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>Brand</returns>
        Brand GetBrand(string brandId);

        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Fetches a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>ApiResponse of Brand</returns>
        ApiResponse<Brand> GetBrandWithHttpInfo(string brandId);
        /// <summary>
        /// Get a theme for a brand
        /// </summary>
        /// <remarks>
        /// Fetches a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ThemeResponse</returns>
        ThemeResponse GetBrandTheme(string brandId, string themeId);

        /// <summary>
        /// Get a theme for a brand
        /// </summary>
        /// <remarks>
        /// Fetches a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ThemeResponse</returns>
        ApiResponse<ThemeResponse> GetBrandThemeWithHttpInfo(string brandId, string themeId);
        /// <summary>
        /// Preview Email Customization
        /// </summary>
        /// <remarks>
        /// Generates a preview of an email customization. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <returns>EmailPreview</returns>
        EmailPreview GetCustomizationPreview(string brandId, string templateName, string customizationId);

        /// <summary>
        /// Preview Email Customization
        /// </summary>
        /// <remarks>
        /// Generates a preview of an email customization. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <returns>ApiResponse of EmailPreview</returns>
        ApiResponse<EmailPreview> GetCustomizationPreviewWithHttpInfo(string brandId, string templateName, string customizationId);
        /// <summary>
        /// Get Email Customization
        /// </summary>
        /// <remarks>
        /// Gets an email customization by its unique identifier.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <returns>EmailCustomization</returns>
        EmailCustomization GetEmailCustomization(string brandId, string templateName, string customizationId);

        /// <summary>
        /// Get Email Customization
        /// </summary>
        /// <remarks>
        /// Gets an email customization by its unique identifier.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <returns>ApiResponse of EmailCustomization</returns>
        ApiResponse<EmailCustomization> GetEmailCustomizationWithHttpInfo(string brandId, string templateName, string customizationId);
        /// <summary>
        /// Get Email Template Default Content
        /// </summary>
        /// <remarks>
        /// Gets an email template&#39;s default content.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <returns>EmailDefaultContent</returns>
        EmailDefaultContent GetEmailDefaultContent(string brandId, string templateName, string language = default(string));

        /// <summary>
        /// Get Email Template Default Content
        /// </summary>
        /// <remarks>
        /// Gets an email template&#39;s default content.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <returns>ApiResponse of EmailDefaultContent</returns>
        ApiResponse<EmailDefaultContent> GetEmailDefaultContentWithHttpInfo(string brandId, string templateName, string language = default(string));
        /// <summary>
        /// Preview Email Template Default Content
        /// </summary>
        /// <remarks>
        /// Generates a preview of an email template&#39;s default content. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <returns>EmailPreview</returns>
        EmailPreview GetEmailDefaultPreview(string brandId, string templateName, string language = default(string));

        /// <summary>
        /// Preview Email Template Default Content
        /// </summary>
        /// <remarks>
        /// Generates a preview of an email template&#39;s default content. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <returns>ApiResponse of EmailPreview</returns>
        ApiResponse<EmailPreview> GetEmailDefaultPreviewWithHttpInfo(string brandId, string templateName, string language = default(string));
        /// <summary>
        /// Get Email Template Settings
        /// </summary>
        /// <remarks>
        /// Gets an email template&#39;s settings.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <returns>EmailSettings</returns>
        EmailSettings GetEmailSettings(string brandId, string templateName);

        /// <summary>
        /// Get Email Template Settings
        /// </summary>
        /// <remarks>
        /// Gets an email template&#39;s settings.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <returns>ApiResponse of EmailSettings</returns>
        ApiResponse<EmailSettings> GetEmailSettingsWithHttpInfo(string brandId, string templateName);
        /// <summary>
        /// Get Email Template
        /// </summary>
        /// <remarks>
        /// Gets the details of an email template by name.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <returns>EmailTemplate</returns>
        EmailTemplate GetEmailTemplate(string brandId, string templateName, List<string> expand = default(List<string>));

        /// <summary>
        /// Get Email Template
        /// </summary>
        /// <remarks>
        /// Gets the details of an email template by name.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <returns>ApiResponse of EmailTemplate</returns>
        ApiResponse<EmailTemplate> GetEmailTemplateWithHttpInfo(string brandId, string templateName, List<string> expand = default(List<string>));
        /// <summary>
        /// Get Brand Themes
        /// </summary>
        /// <remarks>
        /// List all the themes in your brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>List&lt;ThemeResponse&gt;</returns>
        List<ThemeResponse> ListBrandThemes(string brandId);

        /// <summary>
        /// Get Brand Themes
        /// </summary>
        /// <remarks>
        /// List all the themes in your brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>ApiResponse of List&lt;ThemeResponse&gt;</returns>
        ApiResponse<List<ThemeResponse>> ListBrandThemesWithHttpInfo(string brandId);
        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// List all the brands in your org.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Brand&gt;</returns>
        List<Brand> ListBrands();

        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// List all the brands in your org.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Brand&gt;</returns>
        ApiResponse<List<Brand>> ListBrandsWithHttpInfo();
        /// <summary>
        /// List Email Customizations
        /// </summary>
        /// <remarks>
        /// Lists all customizations of an email template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <returns>List&lt;EmailCustomization&gt;</returns>
        List<EmailCustomization> ListEmailCustomizations(string brandId, string templateName, string after = default(string), int? limit = default(int?));

        /// <summary>
        /// List Email Customizations
        /// </summary>
        /// <remarks>
        /// Lists all customizations of an email template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <returns>ApiResponse of List&lt;EmailCustomization&gt;</returns>
        ApiResponse<List<EmailCustomization>> ListEmailCustomizationsWithHttpInfo(string brandId, string templateName, string after = default(string), int? limit = default(int?));
        /// <summary>
        /// List Email Templates
        /// </summary>
        /// <remarks>
        /// Lists all email templates.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <returns>List&lt;EmailTemplate&gt;</returns>
        List<EmailTemplate> ListEmailTemplates(string brandId, string after = default(string), int? limit = default(int?), List<string> expand = default(List<string>));

        /// <summary>
        /// List Email Templates
        /// </summary>
        /// <remarks>
        /// Lists all email templates.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailTemplate&gt;</returns>
        ApiResponse<List<EmailTemplate>> ListEmailTemplatesWithHttpInfo(string brandId, string after = default(string), int? limit = default(int?), List<string> expand = default(List<string>));
        /// <summary>
        /// Send Test Email
        /// </summary>
        /// <remarks>
        /// Sends a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. The email customization for the language specified in the &#x60;language&#x60; query parameter. 2. The email template&#39;s default customization. 3. The email template’s default content, translated to the current user&#39;s language.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <returns></returns>
        void SendTestEmail(string brandId, string templateName, string language = default(string));

        /// <summary>
        /// Send Test Email
        /// </summary>
        /// <remarks>
        /// Sends a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. The email customization for the language specified in the &#x60;language&#x60; query parameter. 2. The email template&#39;s default customization. 3. The email template’s default content, translated to the current user&#39;s language.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendTestEmailWithHttpInfo(string brandId, string templateName, string language = default(string));
        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <returns>Brand</returns>
        Brand UpdateBrand(string brandId, Brand brand);

        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <returns>ApiResponse of Brand</returns>
        ApiResponse<Brand> UpdateBrandWithHttpInfo(string brandId, Brand brand);
        /// <summary>
        /// Update a theme for a brand
        /// </summary>
        /// <remarks>
        /// Updates a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <returns>ThemeResponse</returns>
        ThemeResponse UpdateBrandTheme(string brandId, string themeId, Theme theme);

        /// <summary>
        /// Update a theme for a brand
        /// </summary>
        /// <remarks>
        /// Updates a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <returns>ApiResponse of ThemeResponse</returns>
        ApiResponse<ThemeResponse> UpdateBrandThemeWithHttpInfo(string brandId, string themeId, Theme theme);
        /// <summary>
        /// Update Email Customization
        /// </summary>
        /// <remarks>
        /// Updates an existing email customization using the property values provided.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="instance">Request (optional)</param>
        /// <returns>EmailCustomization</returns>
        EmailCustomization UpdateEmailCustomization(string brandId, string templateName, string customizationId, EmailCustomization instance = default(EmailCustomization));

        /// <summary>
        /// Update Email Customization
        /// </summary>
        /// <remarks>
        /// Updates an existing email customization using the property values provided.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="instance">Request (optional)</param>
        /// <returns>ApiResponse of EmailCustomization</returns>
        ApiResponse<EmailCustomization> UpdateEmailCustomizationWithHttpInfo(string brandId, string templateName, string customizationId, EmailCustomization instance = default(EmailCustomization));
        /// <summary>
        /// Update Email Template Settings
        /// </summary>
        /// <remarks>
        /// Updates an email template&#39;s settings.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="emailSettings"> (optional)</param>
        /// <returns></returns>
        void UpdateEmailSettings(string brandId, string templateName, EmailSettings emailSettings = default(EmailSettings));

        /// <summary>
        /// Update Email Template Settings
        /// </summary>
        /// <remarks>
        /// Updates an email template&#39;s settings.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="emailSettings"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateEmailSettingsWithHttpInfo(string brandId, string templateName, EmailSettings emailSettings = default(EmailSettings));
        /// <summary>
        /// Updates the background image for your Theme
        /// </summary>
        /// <remarks>
        /// Updates the background image for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        ImageUploadResponse UploadBrandThemeBackgroundImage(string brandId, string themeId);

        /// <summary>
        /// Updates the background image for your Theme
        /// </summary>
        /// <remarks>
        /// Updates the background image for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        ApiResponse<ImageUploadResponse> UploadBrandThemeBackgroundImageWithHttpInfo(string brandId, string themeId);
        /// <summary>
        /// Updates the favicon for your theme
        /// </summary>
        /// <remarks>
        /// Updates the favicon for your theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        ImageUploadResponse UploadBrandThemeFavicon(string brandId, string themeId);

        /// <summary>
        /// Updates the favicon for your theme
        /// </summary>
        /// <remarks>
        /// Updates the favicon for your theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        ApiResponse<ImageUploadResponse> UploadBrandThemeFaviconWithHttpInfo(string brandId, string themeId);
        /// <summary>
        /// Update a themes logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        ImageUploadResponse UploadBrandThemeLogo(string brandId, string themeId);

        /// <summary>
        /// Update a themes logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        ApiResponse<ImageUploadResponse> UploadBrandThemeLogoWithHttpInfo(string brandId, string themeId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomizationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Email Customization
        /// </summary>
        /// <remarks>
        /// Creates a new email customization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="instance"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailCustomization</returns>
        System.Threading.Tasks.Task<EmailCustomization> CreateEmailCustomizationAsync(string brandId, string templateName, EmailCustomization instance = default(EmailCustomization), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Email Customization
        /// </summary>
        /// <remarks>
        /// Creates a new email customization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="instance"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomization>> CreateEmailCustomizationWithHttpInfoAsync(string brandId, string templateName, EmailCustomization instance = default(EmailCustomization), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete All Email Customizations
        /// </summary>
        /// <remarks>
        /// Deletes all customizations for an email template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllCustomizationsAsync(string brandId, string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete All Email Customizations
        /// </summary>
        /// <remarks>
        /// Deletes all customizations for an email template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllCustomizationsWithHttpInfoAsync(string brandId, string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a Theme background image
        /// </summary>
        /// <remarks>
        /// Deletes a Theme background image
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBrandThemeBackgroundImageAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a Theme background image
        /// </summary>
        /// <remarks>
        /// Deletes a Theme background image
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBrandThemeBackgroundImageWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBrandThemeFaviconAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBrandThemeFaviconWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBrandThemeLogoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBrandThemeLogoWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Email Customization
        /// </summary>
        /// <remarks>
        /// Deletes an email customization by its unique identifier.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEmailCustomizationAsync(string brandId, string templateName, string customizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Email Customization
        /// </summary>
        /// <remarks>
        /// Deletes an email customization by its unique identifier.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailCustomizationWithHttpInfoAsync(string brandId, string templateName, string customizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Fetches a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Brand</returns>
        System.Threading.Tasks.Task<Brand> GetBrandAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Fetches a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        System.Threading.Tasks.Task<ApiResponse<Brand>> GetBrandWithHttpInfoAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a theme for a brand
        /// </summary>
        /// <remarks>
        /// Fetches a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThemeResponse</returns>
        System.Threading.Tasks.Task<ThemeResponse> GetBrandThemeAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a theme for a brand
        /// </summary>
        /// <remarks>
        /// Fetches a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThemeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThemeResponse>> GetBrandThemeWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Preview Email Customization
        /// </summary>
        /// <remarks>
        /// Generates a preview of an email customization. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailPreview</returns>
        System.Threading.Tasks.Task<EmailPreview> GetCustomizationPreviewAsync(string brandId, string templateName, string customizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Preview Email Customization
        /// </summary>
        /// <remarks>
        /// Generates a preview of an email customization. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailPreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailPreview>> GetCustomizationPreviewWithHttpInfoAsync(string brandId, string templateName, string customizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Email Customization
        /// </summary>
        /// <remarks>
        /// Gets an email customization by its unique identifier.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailCustomization</returns>
        System.Threading.Tasks.Task<EmailCustomization> GetEmailCustomizationAsync(string brandId, string templateName, string customizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Email Customization
        /// </summary>
        /// <remarks>
        /// Gets an email customization by its unique identifier.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomization>> GetEmailCustomizationWithHttpInfoAsync(string brandId, string templateName, string customizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Email Template Default Content
        /// </summary>
        /// <remarks>
        /// Gets an email template&#39;s default content.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDefaultContent</returns>
        System.Threading.Tasks.Task<EmailDefaultContent> GetEmailDefaultContentAsync(string brandId, string templateName, string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Email Template Default Content
        /// </summary>
        /// <remarks>
        /// Gets an email template&#39;s default content.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDefaultContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDefaultContent>> GetEmailDefaultContentWithHttpInfoAsync(string brandId, string templateName, string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Preview Email Template Default Content
        /// </summary>
        /// <remarks>
        /// Generates a preview of an email template&#39;s default content. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailPreview</returns>
        System.Threading.Tasks.Task<EmailPreview> GetEmailDefaultPreviewAsync(string brandId, string templateName, string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Preview Email Template Default Content
        /// </summary>
        /// <remarks>
        /// Generates a preview of an email template&#39;s default content. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailPreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailPreview>> GetEmailDefaultPreviewWithHttpInfoAsync(string brandId, string templateName, string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Email Template Settings
        /// </summary>
        /// <remarks>
        /// Gets an email template&#39;s settings.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSettings</returns>
        System.Threading.Tasks.Task<EmailSettings> GetEmailSettingsAsync(string brandId, string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Email Template Settings
        /// </summary>
        /// <remarks>
        /// Gets an email template&#39;s settings.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSettings>> GetEmailSettingsWithHttpInfoAsync(string brandId, string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Email Template
        /// </summary>
        /// <remarks>
        /// Gets the details of an email template by name.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailTemplate</returns>
        System.Threading.Tasks.Task<EmailTemplate> GetEmailTemplateAsync(string brandId, string templateName, List<string> expand = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Email Template
        /// </summary>
        /// <remarks>
        /// Gets the details of an email template by name.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailTemplate>> GetEmailTemplateWithHttpInfoAsync(string brandId, string templateName, List<string> expand = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Brand Themes
        /// </summary>
        /// <remarks>
        /// List all the themes in your brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ThemeResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ThemeResponse>> ListBrandThemesAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Brand Themes
        /// </summary>
        /// <remarks>
        /// List all the themes in your brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ThemeResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ThemeResponse>>> ListBrandThemesWithHttpInfoAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// List all the brands in your org.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Brand&gt;</returns>
        System.Threading.Tasks.Task<List<Brand>> ListBrandsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// List all the brands in your org.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Brand&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Brand>>> ListBrandsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Email Customizations
        /// </summary>
        /// <remarks>
        /// Lists all customizations of an email template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EmailCustomization&gt;</returns>
        System.Threading.Tasks.Task<List<EmailCustomization>> ListEmailCustomizationsAsync(string brandId, string templateName, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Email Customizations
        /// </summary>
        /// <remarks>
        /// Lists all customizations of an email template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EmailCustomization&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EmailCustomization>>> ListEmailCustomizationsWithHttpInfoAsync(string brandId, string templateName, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Email Templates
        /// </summary>
        /// <remarks>
        /// Lists all email templates.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EmailTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<EmailTemplate>> ListEmailTemplatesAsync(string brandId, string after = default(string), int? limit = default(int?), List<string> expand = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Email Templates
        /// </summary>
        /// <remarks>
        /// Lists all email templates.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EmailTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EmailTemplate>>> ListEmailTemplatesWithHttpInfoAsync(string brandId, string after = default(string), int? limit = default(int?), List<string> expand = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Test Email
        /// </summary>
        /// <remarks>
        /// Sends a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. The email customization for the language specified in the &#x60;language&#x60; query parameter. 2. The email template&#39;s default customization. 3. The email template’s default content, translated to the current user&#39;s language.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendTestEmailAsync(string brandId, string templateName, string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Test Email
        /// </summary>
        /// <remarks>
        /// Sends a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. The email customization for the language specified in the &#x60;language&#x60; query parameter. 2. The email template&#39;s default customization. 3. The email template’s default content, translated to the current user&#39;s language.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendTestEmailWithHttpInfoAsync(string brandId, string templateName, string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Brand</returns>
        System.Threading.Tasks.Task<Brand> UpdateBrandAsync(string brandId, Brand brand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        System.Threading.Tasks.Task<ApiResponse<Brand>> UpdateBrandWithHttpInfoAsync(string brandId, Brand brand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a theme for a brand
        /// </summary>
        /// <remarks>
        /// Updates a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThemeResponse</returns>
        System.Threading.Tasks.Task<ThemeResponse> UpdateBrandThemeAsync(string brandId, string themeId, Theme theme, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a theme for a brand
        /// </summary>
        /// <remarks>
        /// Updates a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThemeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThemeResponse>> UpdateBrandThemeWithHttpInfoAsync(string brandId, string themeId, Theme theme, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Email Customization
        /// </summary>
        /// <remarks>
        /// Updates an existing email customization using the property values provided.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="instance">Request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailCustomization</returns>
        System.Threading.Tasks.Task<EmailCustomization> UpdateEmailCustomizationAsync(string brandId, string templateName, string customizationId, EmailCustomization instance = default(EmailCustomization), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Email Customization
        /// </summary>
        /// <remarks>
        /// Updates an existing email customization using the property values provided.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="instance">Request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomization>> UpdateEmailCustomizationWithHttpInfoAsync(string brandId, string templateName, string customizationId, EmailCustomization instance = default(EmailCustomization), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Email Template Settings
        /// </summary>
        /// <remarks>
        /// Updates an email template&#39;s settings.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="emailSettings"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateEmailSettingsAsync(string brandId, string templateName, EmailSettings emailSettings = default(EmailSettings), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Email Template Settings
        /// </summary>
        /// <remarks>
        /// Updates an email template&#39;s settings.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="emailSettings"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateEmailSettingsWithHttpInfoAsync(string brandId, string templateName, EmailSettings emailSettings = default(EmailSettings), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the background image for your Theme
        /// </summary>
        /// <remarks>
        /// Updates the background image for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageUploadResponse</returns>
        System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeBackgroundImageAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the background image for your Theme
        /// </summary>
        /// <remarks>
        /// Updates the background image for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageUploadResponse>> UploadBrandThemeBackgroundImageWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the favicon for your theme
        /// </summary>
        /// <remarks>
        /// Updates the favicon for your theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageUploadResponse</returns>
        System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeFaviconAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the favicon for your theme
        /// </summary>
        /// <remarks>
        /// Updates the favicon for your theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageUploadResponse>> UploadBrandThemeFaviconWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a themes logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageUploadResponse</returns>
        System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeLogoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a themes logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageUploadResponse>> UploadBrandThemeLogoWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomizationApi : ICustomizationApiSync, ICustomizationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomizationApi : ICustomizationApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomizationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomizationApi(string basePath)
        {
            this.Configuration = Okta.Sdk.Client.Configuration.MergeConfigurations(
                Okta.Sdk.Client.GlobalConfiguration.Instance,
                new Okta.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Okta.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Okta.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomizationApi(Okta.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Okta.Sdk.Client.Configuration.MergeConfigurations(
                Okta.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Okta.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Okta.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomizationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CustomizationApi(Okta.Sdk.Client.ISynchronousClient client, Okta.Sdk.Client.IAsynchronousClient asyncClient, Okta.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Okta.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Okta.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Email Customization Creates a new email customization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="instance"> (optional)</param>
        /// <returns>EmailCustomization</returns>
        public EmailCustomization CreateEmailCustomization(string brandId, string templateName, EmailCustomization instance = default(EmailCustomization))
        {
            Okta.Sdk.Client.ApiResponse<EmailCustomization> localVarResponse = CreateEmailCustomizationWithHttpInfo(brandId, templateName, instance);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Email Customization Creates a new email customization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="instance"> (optional)</param>
        /// <returns>ApiResponse of EmailCustomization</returns>
        public Okta.Sdk.Client.ApiResponse<EmailCustomization> CreateEmailCustomizationWithHttpInfo(string brandId, string templateName, EmailCustomization instance = default(EmailCustomization))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->CreateEmailCustomization");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->CreateEmailCustomization");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.Data = instance;

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmailCustomization>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmailCustomization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Email Customization Creates a new email customization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="instance"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailCustomization</returns>
        public async System.Threading.Tasks.Task<EmailCustomization> CreateEmailCustomizationAsync(string brandId, string templateName, EmailCustomization instance = default(EmailCustomization), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailCustomization> localVarResponse = await CreateEmailCustomizationWithHttpInfoAsync(brandId, templateName, instance, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Email Customization Creates a new email customization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="instance"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailCustomization>> CreateEmailCustomizationWithHttpInfoAsync(string brandId, string templateName, EmailCustomization instance = default(EmailCustomization), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->CreateEmailCustomization");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->CreateEmailCustomization");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.Data = instance;

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailCustomization>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmailCustomization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete All Email Customizations Deletes all customizations for an email template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <returns></returns>
        public void DeleteAllCustomizations(string brandId, string templateName)
        {
            DeleteAllCustomizationsWithHttpInfo(brandId, templateName);
        }

        /// <summary>
        /// Delete All Email Customizations Deletes all customizations for an email template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Okta.Sdk.Client.ApiResponse<Object> DeleteAllCustomizationsWithHttpInfo(string brandId, string templateName)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->DeleteAllCustomizations");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->DeleteAllCustomizations");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllCustomizations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete All Email Customizations Deletes all customizations for an email template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllCustomizationsAsync(string brandId, string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAllCustomizationsWithHttpInfoAsync(brandId, templateName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete All Email Customizations Deletes all customizations for an email template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> DeleteAllCustomizationsWithHttpInfoAsync(string brandId, string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->DeleteAllCustomizations");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->DeleteAllCustomizations");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllCustomizations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a Theme background image Deletes a Theme background image
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        public void DeleteBrandThemeBackgroundImage(string brandId, string themeId)
        {
            DeleteBrandThemeBackgroundImageWithHttpInfo(brandId, themeId);
        }

        /// <summary>
        /// Deletes a Theme background image Deletes a Theme background image
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Okta.Sdk.Client.ApiResponse<Object> DeleteBrandThemeBackgroundImageWithHttpInfo(string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->DeleteBrandThemeBackgroundImage");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->DeleteBrandThemeBackgroundImage");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/brands/{brandId}/themes/{themeId}/background-image", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBrandThemeBackgroundImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a Theme background image Deletes a Theme background image
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBrandThemeBackgroundImageAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteBrandThemeBackgroundImageWithHttpInfoAsync(brandId, themeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a Theme background image Deletes a Theme background image
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> DeleteBrandThemeBackgroundImageWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->DeleteBrandThemeBackgroundImage");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->DeleteBrandThemeBackgroundImage");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/brands/{brandId}/themes/{themeId}/background-image", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBrandThemeBackgroundImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon. Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        public void DeleteBrandThemeFavicon(string brandId, string themeId)
        {
            DeleteBrandThemeFaviconWithHttpInfo(brandId, themeId);
        }

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon. Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Okta.Sdk.Client.ApiResponse<Object> DeleteBrandThemeFaviconWithHttpInfo(string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->DeleteBrandThemeFavicon");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->DeleteBrandThemeFavicon");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/brands/{brandId}/themes/{themeId}/favicon", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBrandThemeFavicon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon. Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBrandThemeFaviconAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteBrandThemeFaviconWithHttpInfoAsync(brandId, themeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon. Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> DeleteBrandThemeFaviconWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->DeleteBrandThemeFavicon");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->DeleteBrandThemeFavicon");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/brands/{brandId}/themes/{themeId}/favicon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBrandThemeFavicon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo. Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        public void DeleteBrandThemeLogo(string brandId, string themeId)
        {
            DeleteBrandThemeLogoWithHttpInfo(brandId, themeId);
        }

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo. Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Okta.Sdk.Client.ApiResponse<Object> DeleteBrandThemeLogoWithHttpInfo(string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->DeleteBrandThemeLogo");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->DeleteBrandThemeLogo");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/brands/{brandId}/themes/{themeId}/logo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBrandThemeLogo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo. Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBrandThemeLogoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteBrandThemeLogoWithHttpInfoAsync(brandId, themeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo. Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> DeleteBrandThemeLogoWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->DeleteBrandThemeLogo");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->DeleteBrandThemeLogo");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/brands/{brandId}/themes/{themeId}/logo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBrandThemeLogo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Email Customization Deletes an email customization by its unique identifier.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <returns></returns>
        public void DeleteEmailCustomization(string brandId, string templateName, string customizationId)
        {
            DeleteEmailCustomizationWithHttpInfo(brandId, templateName, customizationId);
        }

        /// <summary>
        /// Delete Email Customization Deletes an email customization by its unique identifier.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Okta.Sdk.Client.ApiResponse<Object> DeleteEmailCustomizationWithHttpInfo(string brandId, string templateName, string customizationId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->DeleteEmailCustomization");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->DeleteEmailCustomization");
            }

            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'customizationId' when calling CustomizationApi->DeleteEmailCustomization");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.PathParameters.Add("customizationId", Okta.Sdk.Client.ClientUtils.ParameterToString(customizationId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmailCustomization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Email Customization Deletes an email customization by its unique identifier.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEmailCustomizationAsync(string brandId, string templateName, string customizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteEmailCustomizationWithHttpInfoAsync(brandId, templateName, customizationId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Email Customization Deletes an email customization by its unique identifier.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> DeleteEmailCustomizationWithHttpInfoAsync(string brandId, string templateName, string customizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->DeleteEmailCustomization");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->DeleteEmailCustomization");
            }

            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'customizationId' when calling CustomizationApi->DeleteEmailCustomization");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.PathParameters.Add("customizationId", Okta.Sdk.Client.ClientUtils.ParameterToString(customizationId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmailCustomization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brand Fetches a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>Brand</returns>
        public Brand GetBrand(string brandId)
        {
            Okta.Sdk.Client.ApiResponse<Brand> localVarResponse = GetBrandWithHttpInfo(brandId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand Fetches a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>ApiResponse of Brand</returns>
        public Okta.Sdk.Client.ApiResponse<Brand> GetBrandWithHttpInfo(string brandId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetBrand");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Brand>("/api/v1/brands/{brandId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brand Fetches a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Brand</returns>
        public async System.Threading.Tasks.Task<Brand> GetBrandAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<Brand> localVarResponse = await GetBrandWithHttpInfoAsync(brandId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand Fetches a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Brand>> GetBrandWithHttpInfoAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetBrand");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Brand>("/api/v1/brands/{brandId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a theme for a brand Fetches a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ThemeResponse</returns>
        public ThemeResponse GetBrandTheme(string brandId, string themeId)
        {
            Okta.Sdk.Client.ApiResponse<ThemeResponse> localVarResponse = GetBrandThemeWithHttpInfo(brandId, themeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a theme for a brand Fetches a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ThemeResponse</returns>
        public Okta.Sdk.Client.ApiResponse<ThemeResponse> GetBrandThemeWithHttpInfo(string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetBrandTheme");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->GetBrandTheme");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ThemeResponse>("/api/v1/brands/{brandId}/themes/{themeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrandTheme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a theme for a brand Fetches a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThemeResponse</returns>
        public async System.Threading.Tasks.Task<ThemeResponse> GetBrandThemeAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ThemeResponse> localVarResponse = await GetBrandThemeWithHttpInfoAsync(brandId, themeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a theme for a brand Fetches a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThemeResponse)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ThemeResponse>> GetBrandThemeWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetBrandTheme");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->GetBrandTheme");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ThemeResponse>("/api/v1/brands/{brandId}/themes/{themeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrandTheme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Preview Email Customization Generates a preview of an email customization. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <returns>EmailPreview</returns>
        public EmailPreview GetCustomizationPreview(string brandId, string templateName, string customizationId)
        {
            Okta.Sdk.Client.ApiResponse<EmailPreview> localVarResponse = GetCustomizationPreviewWithHttpInfo(brandId, templateName, customizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Preview Email Customization Generates a preview of an email customization. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <returns>ApiResponse of EmailPreview</returns>
        public Okta.Sdk.Client.ApiResponse<EmailPreview> GetCustomizationPreviewWithHttpInfo(string brandId, string templateName, string customizationId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetCustomizationPreview");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->GetCustomizationPreview");
            }

            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'customizationId' when calling CustomizationApi->GetCustomizationPreview");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.PathParameters.Add("customizationId", Okta.Sdk.Client.ClientUtils.ParameterToString(customizationId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailPreview>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}/preview", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomizationPreview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Preview Email Customization Generates a preview of an email customization. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailPreview</returns>
        public async System.Threading.Tasks.Task<EmailPreview> GetCustomizationPreviewAsync(string brandId, string templateName, string customizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailPreview> localVarResponse = await GetCustomizationPreviewWithHttpInfoAsync(brandId, templateName, customizationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Preview Email Customization Generates a preview of an email customization. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailPreview)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailPreview>> GetCustomizationPreviewWithHttpInfoAsync(string brandId, string templateName, string customizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetCustomizationPreview");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->GetCustomizationPreview");
            }

            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'customizationId' when calling CustomizationApi->GetCustomizationPreview");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.PathParameters.Add("customizationId", Okta.Sdk.Client.ClientUtils.ParameterToString(customizationId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailPreview>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}/preview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomizationPreview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email Customization Gets an email customization by its unique identifier.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <returns>EmailCustomization</returns>
        public EmailCustomization GetEmailCustomization(string brandId, string templateName, string customizationId)
        {
            Okta.Sdk.Client.ApiResponse<EmailCustomization> localVarResponse = GetEmailCustomizationWithHttpInfo(brandId, templateName, customizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Customization Gets an email customization by its unique identifier.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <returns>ApiResponse of EmailCustomization</returns>
        public Okta.Sdk.Client.ApiResponse<EmailCustomization> GetEmailCustomizationWithHttpInfo(string brandId, string templateName, string customizationId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetEmailCustomization");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->GetEmailCustomization");
            }

            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'customizationId' when calling CustomizationApi->GetEmailCustomization");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.PathParameters.Add("customizationId", Okta.Sdk.Client.ClientUtils.ParameterToString(customizationId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailCustomization>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCustomization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email Customization Gets an email customization by its unique identifier.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailCustomization</returns>
        public async System.Threading.Tasks.Task<EmailCustomization> GetEmailCustomizationAsync(string brandId, string templateName, string customizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailCustomization> localVarResponse = await GetEmailCustomizationWithHttpInfoAsync(brandId, templateName, customizationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Customization Gets an email customization by its unique identifier.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailCustomization>> GetEmailCustomizationWithHttpInfoAsync(string brandId, string templateName, string customizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetEmailCustomization");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->GetEmailCustomization");
            }

            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'customizationId' when calling CustomizationApi->GetEmailCustomization");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.PathParameters.Add("customizationId", Okta.Sdk.Client.ClientUtils.ParameterToString(customizationId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailCustomization>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCustomization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email Template Default Content Gets an email template&#39;s default content.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <returns>EmailDefaultContent</returns>
        public EmailDefaultContent GetEmailDefaultContent(string brandId, string templateName, string language = default(string))
        {
            Okta.Sdk.Client.ApiResponse<EmailDefaultContent> localVarResponse = GetEmailDefaultContentWithHttpInfo(brandId, templateName, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Template Default Content Gets an email template&#39;s default content.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <returns>ApiResponse of EmailDefaultContent</returns>
        public Okta.Sdk.Client.ApiResponse<EmailDefaultContent> GetEmailDefaultContentWithHttpInfo(string brandId, string templateName, string language = default(string))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetEmailDefaultContent");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->GetEmailDefaultContent");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailDefaultContent>("/api/v1/brands/{brandId}/templates/email/{templateName}/default-content", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailDefaultContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email Template Default Content Gets an email template&#39;s default content.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDefaultContent</returns>
        public async System.Threading.Tasks.Task<EmailDefaultContent> GetEmailDefaultContentAsync(string brandId, string templateName, string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailDefaultContent> localVarResponse = await GetEmailDefaultContentWithHttpInfoAsync(brandId, templateName, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Template Default Content Gets an email template&#39;s default content.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDefaultContent)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailDefaultContent>> GetEmailDefaultContentWithHttpInfoAsync(string brandId, string templateName, string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetEmailDefaultContent");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->GetEmailDefaultContent");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailDefaultContent>("/api/v1/brands/{brandId}/templates/email/{templateName}/default-content", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailDefaultContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Preview Email Template Default Content Generates a preview of an email template&#39;s default content. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <returns>EmailPreview</returns>
        public EmailPreview GetEmailDefaultPreview(string brandId, string templateName, string language = default(string))
        {
            Okta.Sdk.Client.ApiResponse<EmailPreview> localVarResponse = GetEmailDefaultPreviewWithHttpInfo(brandId, templateName, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Preview Email Template Default Content Generates a preview of an email template&#39;s default content. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <returns>ApiResponse of EmailPreview</returns>
        public Okta.Sdk.Client.ApiResponse<EmailPreview> GetEmailDefaultPreviewWithHttpInfo(string brandId, string templateName, string language = default(string))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetEmailDefaultPreview");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->GetEmailDefaultPreview");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailPreview>("/api/v1/brands/{brandId}/templates/email/{templateName}/default-content/preview", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailDefaultPreview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Preview Email Template Default Content Generates a preview of an email template&#39;s default content. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailPreview</returns>
        public async System.Threading.Tasks.Task<EmailPreview> GetEmailDefaultPreviewAsync(string brandId, string templateName, string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailPreview> localVarResponse = await GetEmailDefaultPreviewWithHttpInfoAsync(brandId, templateName, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Preview Email Template Default Content Generates a preview of an email template&#39;s default content. All variable references (e.g., &#x60;${user.profile.firstName}&#x60;) are populated using the current user&#39;s context.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailPreview)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailPreview>> GetEmailDefaultPreviewWithHttpInfoAsync(string brandId, string templateName, string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetEmailDefaultPreview");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->GetEmailDefaultPreview");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailPreview>("/api/v1/brands/{brandId}/templates/email/{templateName}/default-content/preview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailDefaultPreview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email Template Settings Gets an email template&#39;s settings.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <returns>EmailSettings</returns>
        public EmailSettings GetEmailSettings(string brandId, string templateName)
        {
            Okta.Sdk.Client.ApiResponse<EmailSettings> localVarResponse = GetEmailSettingsWithHttpInfo(brandId, templateName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Template Settings Gets an email template&#39;s settings.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <returns>ApiResponse of EmailSettings</returns>
        public Okta.Sdk.Client.ApiResponse<EmailSettings> GetEmailSettingsWithHttpInfo(string brandId, string templateName)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetEmailSettings");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->GetEmailSettings");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailSettings>("/api/v1/brands/{brandId}/templates/email/{templateName}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email Template Settings Gets an email template&#39;s settings.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSettings</returns>
        public async System.Threading.Tasks.Task<EmailSettings> GetEmailSettingsAsync(string brandId, string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailSettings> localVarResponse = await GetEmailSettingsWithHttpInfoAsync(brandId, templateName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Template Settings Gets an email template&#39;s settings.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSettings)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailSettings>> GetEmailSettingsWithHttpInfoAsync(string brandId, string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetEmailSettings");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->GetEmailSettings");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailSettings>("/api/v1/brands/{brandId}/templates/email/{templateName}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email Template Gets the details of an email template by name.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <returns>EmailTemplate</returns>
        public EmailTemplate GetEmailTemplate(string brandId, string templateName, List<string> expand = default(List<string>))
        {
            Okta.Sdk.Client.ApiResponse<EmailTemplate> localVarResponse = GetEmailTemplateWithHttpInfo(brandId, templateName, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Template Gets the details of an email template by name.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <returns>ApiResponse of EmailTemplate</returns>
        public Okta.Sdk.Client.ApiResponse<EmailTemplate> GetEmailTemplateWithHttpInfo(string brandId, string templateName, List<string> expand = default(List<string>))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetEmailTemplate");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->GetEmailTemplate");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "expand", expand));
            }

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailTemplate>("/api/v1/brands/{brandId}/templates/email/{templateName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email Template Gets the details of an email template by name.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailTemplate</returns>
        public async System.Threading.Tasks.Task<EmailTemplate> GetEmailTemplateAsync(string brandId, string templateName, List<string> expand = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailTemplate> localVarResponse = await GetEmailTemplateWithHttpInfoAsync(brandId, templateName, expand, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Template Gets the details of an email template by name.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailTemplate)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailTemplate>> GetEmailTemplateWithHttpInfoAsync(string brandId, string templateName, List<string> expand = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->GetEmailTemplate");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->GetEmailTemplate");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "expand", expand));
            }

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailTemplate>("/api/v1/brands/{brandId}/templates/email/{templateName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brand Themes List all the themes in your brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>List&lt;ThemeResponse&gt;</returns>
        public List<ThemeResponse> ListBrandThemes(string brandId)
        {
            Okta.Sdk.Client.ApiResponse<List<ThemeResponse>> localVarResponse = ListBrandThemesWithHttpInfo(brandId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand Themes List all the themes in your brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>ApiResponse of List&lt;ThemeResponse&gt;</returns>
        public Okta.Sdk.Client.ApiResponse<List<ThemeResponse>> ListBrandThemesWithHttpInfo(string brandId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->ListBrandThemes");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ThemeResponse>>("/api/v1/brands/{brandId}/themes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBrandThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brand Themes List all the themes in your brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ThemeResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ThemeResponse>> ListBrandThemesAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<List<ThemeResponse>> localVarResponse = await ListBrandThemesWithHttpInfoAsync(brandId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand Themes List all the themes in your brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ThemeResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<ThemeResponse>>> ListBrandThemesWithHttpInfoAsync(string brandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->ListBrandThemes");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ThemeResponse>>("/api/v1/brands/{brandId}/themes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBrandThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Brands List all the brands in your org.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Brand&gt;</returns>
        public List<Brand> ListBrands()
        {
            Okta.Sdk.Client.ApiResponse<List<Brand>> localVarResponse = ListBrandsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Brands List all the brands in your org.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Brand&gt;</returns>
        public Okta.Sdk.Client.ApiResponse<List<Brand>> ListBrandsWithHttpInfo()
        {
            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Brand>>("/api/v1/brands", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBrands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Brands List all the brands in your org.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Brand&gt;</returns>
        public async System.Threading.Tasks.Task<List<Brand>> ListBrandsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<List<Brand>> localVarResponse = await ListBrandsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Brands List all the brands in your org.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Brand&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<Brand>>> ListBrandsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Brand>>("/api/v1/brands", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBrands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Email Customizations Lists all customizations of an email template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <returns>List&lt;EmailCustomization&gt;</returns>
        public List<EmailCustomization> ListEmailCustomizations(string brandId, string templateName, string after = default(string), int? limit = default(int?))
        {
            Okta.Sdk.Client.ApiResponse<List<EmailCustomization>> localVarResponse = ListEmailCustomizationsWithHttpInfo(brandId, templateName, after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Email Customizations Lists all customizations of an email template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <returns>ApiResponse of List&lt;EmailCustomization&gt;</returns>
        public Okta.Sdk.Client.ApiResponse<List<EmailCustomization>> ListEmailCustomizationsWithHttpInfo(string brandId, string templateName, string after = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->ListEmailCustomizations");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->ListEmailCustomizations");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EmailCustomization>>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListEmailCustomizations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Email Customizations Lists all customizations of an email template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EmailCustomization&gt;</returns>
        public async System.Threading.Tasks.Task<List<EmailCustomization>> ListEmailCustomizationsAsync(string brandId, string templateName, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<List<EmailCustomization>> localVarResponse = await ListEmailCustomizationsWithHttpInfoAsync(brandId, templateName, after, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Email Customizations Lists all customizations of an email template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EmailCustomization&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<EmailCustomization>>> ListEmailCustomizationsWithHttpInfoAsync(string brandId, string templateName, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->ListEmailCustomizations");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->ListEmailCustomizations");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EmailCustomization>>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListEmailCustomizations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Email Templates Lists all email templates.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <returns>List&lt;EmailTemplate&gt;</returns>
        public List<EmailTemplate> ListEmailTemplates(string brandId, string after = default(string), int? limit = default(int?), List<string> expand = default(List<string>))
        {
            Okta.Sdk.Client.ApiResponse<List<EmailTemplate>> localVarResponse = ListEmailTemplatesWithHttpInfo(brandId, after, limit, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Email Templates Lists all email templates.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailTemplate&gt;</returns>
        public Okta.Sdk.Client.ApiResponse<List<EmailTemplate>> ListEmailTemplatesWithHttpInfo(string brandId, string after = default(string), int? limit = default(int?), List<string> expand = default(List<string>))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->ListEmailTemplates");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "expand", expand));
            }

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EmailTemplate>>("/api/v1/brands/{brandId}/templates/email", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListEmailTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Email Templates Lists all email templates.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EmailTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<EmailTemplate>> ListEmailTemplatesAsync(string brandId, string after = default(string), int? limit = default(int?), List<string> expand = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<List<EmailTemplate>> localVarResponse = await ListEmailTemplatesWithHttpInfoAsync(brandId, after, limit, expand, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Email Templates Lists all email templates.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="after">The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)</param>
        /// <param name="limit">A limit on the number of objects to return. (optional, default to 20)</param>
        /// <param name="expand">Specifies additional metadata to be included in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EmailTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<List<EmailTemplate>>> ListEmailTemplatesWithHttpInfoAsync(string brandId, string after = default(string), int? limit = default(int?), List<string> expand = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->ListEmailTemplates");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "expand", expand));
            }

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EmailTemplate>>("/api/v1/brands/{brandId}/templates/email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListEmailTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Test Email Sends a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. The email customization for the language specified in the &#x60;language&#x60; query parameter. 2. The email template&#39;s default customization. 3. The email template’s default content, translated to the current user&#39;s language.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <returns></returns>
        public void SendTestEmail(string brandId, string templateName, string language = default(string))
        {
            SendTestEmailWithHttpInfo(brandId, templateName, language);
        }

        /// <summary>
        /// Send Test Email Sends a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. The email customization for the language specified in the &#x60;language&#x60; query parameter. 2. The email template&#39;s default customization. 3. The email template’s default content, translated to the current user&#39;s language.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Okta.Sdk.Client.ApiResponse<Object> SendTestEmailWithHttpInfo(string brandId, string templateName, string language = default(string))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->SendTestEmail");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->SendTestEmail");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/brands/{brandId}/templates/email/{templateName}/test", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTestEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Test Email Sends a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. The email customization for the language specified in the &#x60;language&#x60; query parameter. 2. The email template&#39;s default customization. 3. The email template’s default content, translated to the current user&#39;s language.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendTestEmailAsync(string brandId, string templateName, string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SendTestEmailWithHttpInfoAsync(brandId, templateName, language, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Send Test Email Sends a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. The email customization for the language specified in the &#x60;language&#x60; query parameter. 2. The email template&#39;s default customization. 3. The email template’s default content, translated to the current user&#39;s language.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="language">The language to use for the email. Defaults to the current user&#39;s language if unspecified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> SendTestEmailWithHttpInfoAsync(string brandId, string templateName, string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->SendTestEmail");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->SendTestEmail");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Okta.Sdk.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/brands/{brandId}/templates/email/{templateName}/test", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTestEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Brand Updates a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <returns>Brand</returns>
        public Brand UpdateBrand(string brandId, Brand brand)
        {
            Okta.Sdk.Client.ApiResponse<Brand> localVarResponse = UpdateBrandWithHttpInfo(brandId, brand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Brand Updates a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <returns>ApiResponse of Brand</returns>
        public Okta.Sdk.Client.ApiResponse<Brand> UpdateBrandWithHttpInfo(string brandId, Brand brand)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->UpdateBrand");
            }

            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brand' when calling CustomizationApi->UpdateBrand");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.Data = brand;

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Brand>("/api/v1/brands/{brandId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Brand Updates a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Brand</returns>
        public async System.Threading.Tasks.Task<Brand> UpdateBrandAsync(string brandId, Brand brand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<Brand> localVarResponse = await UpdateBrandWithHttpInfoAsync(brandId, brand, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Brand Updates a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="brand"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Brand>> UpdateBrandWithHttpInfoAsync(string brandId, Brand brand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->UpdateBrand");
            }

            // verify the required parameter 'brand' is set
            if (brand == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brand' when calling CustomizationApi->UpdateBrand");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.Data = brand;

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Brand>("/api/v1/brands/{brandId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a theme for a brand Updates a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <returns>ThemeResponse</returns>
        public ThemeResponse UpdateBrandTheme(string brandId, string themeId, Theme theme)
        {
            Okta.Sdk.Client.ApiResponse<ThemeResponse> localVarResponse = UpdateBrandThemeWithHttpInfo(brandId, themeId, theme);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a theme for a brand Updates a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <returns>ApiResponse of ThemeResponse</returns>
        public Okta.Sdk.Client.ApiResponse<ThemeResponse> UpdateBrandThemeWithHttpInfo(string brandId, string themeId, Theme theme)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->UpdateBrandTheme");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->UpdateBrandTheme");
            }

            // verify the required parameter 'theme' is set
            if (theme == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'theme' when calling CustomizationApi->UpdateBrandTheme");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter
            localVarRequestOptions.Data = theme;

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ThemeResponse>("/api/v1/brands/{brandId}/themes/{themeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBrandTheme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a theme for a brand Updates a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThemeResponse</returns>
        public async System.Threading.Tasks.Task<ThemeResponse> UpdateBrandThemeAsync(string brandId, string themeId, Theme theme, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ThemeResponse> localVarResponse = await UpdateBrandThemeWithHttpInfoAsync(brandId, themeId, theme, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a theme for a brand Updates a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="theme"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThemeResponse)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ThemeResponse>> UpdateBrandThemeWithHttpInfoAsync(string brandId, string themeId, Theme theme, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->UpdateBrandTheme");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->UpdateBrandTheme");
            }

            // verify the required parameter 'theme' is set
            if (theme == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'theme' when calling CustomizationApi->UpdateBrandTheme");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter
            localVarRequestOptions.Data = theme;

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ThemeResponse>("/api/v1/brands/{brandId}/themes/{themeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBrandTheme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Email Customization Updates an existing email customization using the property values provided.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="instance">Request (optional)</param>
        /// <returns>EmailCustomization</returns>
        public EmailCustomization UpdateEmailCustomization(string brandId, string templateName, string customizationId, EmailCustomization instance = default(EmailCustomization))
        {
            Okta.Sdk.Client.ApiResponse<EmailCustomization> localVarResponse = UpdateEmailCustomizationWithHttpInfo(brandId, templateName, customizationId, instance);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Email Customization Updates an existing email customization using the property values provided.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="instance">Request (optional)</param>
        /// <returns>ApiResponse of EmailCustomization</returns>
        public Okta.Sdk.Client.ApiResponse<EmailCustomization> UpdateEmailCustomizationWithHttpInfo(string brandId, string templateName, string customizationId, EmailCustomization instance = default(EmailCustomization))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->UpdateEmailCustomization");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->UpdateEmailCustomization");
            }

            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'customizationId' when calling CustomizationApi->UpdateEmailCustomization");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.PathParameters.Add("customizationId", Okta.Sdk.Client.ClientUtils.ParameterToString(customizationId)); // path parameter
            localVarRequestOptions.Data = instance;

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EmailCustomization>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEmailCustomization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Email Customization Updates an existing email customization using the property values provided.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="instance">Request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailCustomization</returns>
        public async System.Threading.Tasks.Task<EmailCustomization> UpdateEmailCustomizationAsync(string brandId, string templateName, string customizationId, EmailCustomization instance = default(EmailCustomization), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<EmailCustomization> localVarResponse = await UpdateEmailCustomizationWithHttpInfoAsync(brandId, templateName, customizationId, instance, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Email Customization Updates an existing email customization using the property values provided.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="customizationId">The ID of the email customization.</param>
        /// <param name="instance">Request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<EmailCustomization>> UpdateEmailCustomizationWithHttpInfoAsync(string brandId, string templateName, string customizationId, EmailCustomization instance = default(EmailCustomization), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->UpdateEmailCustomization");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->UpdateEmailCustomization");
            }

            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'customizationId' when calling CustomizationApi->UpdateEmailCustomization");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.PathParameters.Add("customizationId", Okta.Sdk.Client.ClientUtils.ParameterToString(customizationId)); // path parameter
            localVarRequestOptions.Data = instance;

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EmailCustomization>("/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEmailCustomization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Email Template Settings Updates an email template&#39;s settings.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="emailSettings"> (optional)</param>
        /// <returns></returns>
        public void UpdateEmailSettings(string brandId, string templateName, EmailSettings emailSettings = default(EmailSettings))
        {
            UpdateEmailSettingsWithHttpInfo(brandId, templateName, emailSettings);
        }

        /// <summary>
        /// Update Email Template Settings Updates an email template&#39;s settings.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="emailSettings"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Okta.Sdk.Client.ApiResponse<Object> UpdateEmailSettingsWithHttpInfo(string brandId, string templateName, EmailSettings emailSettings = default(EmailSettings))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->UpdateEmailSettings");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->UpdateEmailSettings");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.Data = emailSettings;

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v1/brands/{brandId}/templates/email/{templateName}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEmailSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Email Template Settings Updates an email template&#39;s settings.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="emailSettings"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateEmailSettingsAsync(string brandId, string templateName, EmailSettings emailSettings = default(EmailSettings), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateEmailSettingsWithHttpInfoAsync(brandId, templateName, emailSettings, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Email Template Settings Updates an email template&#39;s settings.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">The ID of the brand.</param>
        /// <param name="templateName">The name of the email template.</param>
        /// <param name="emailSettings"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> UpdateEmailSettingsWithHttpInfoAsync(string brandId, string templateName, EmailSettings emailSettings = default(EmailSettings), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->UpdateEmailSettings");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'templateName' when calling CustomizationApi->UpdateEmailSettings");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("templateName", Okta.Sdk.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.Data = emailSettings;

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v1/brands/{brandId}/templates/email/{templateName}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEmailSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the background image for your Theme Updates the background image for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        public ImageUploadResponse UploadBrandThemeBackgroundImage(string brandId, string themeId)
        {
            Okta.Sdk.Client.ApiResponse<ImageUploadResponse> localVarResponse = UploadBrandThemeBackgroundImageWithHttpInfo(brandId, themeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the background image for your Theme Updates the background image for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        public Okta.Sdk.Client.ApiResponse<ImageUploadResponse> UploadBrandThemeBackgroundImageWithHttpInfo(string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->UploadBrandThemeBackgroundImage");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->UploadBrandThemeBackgroundImage");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ImageUploadResponse>("/api/v1/brands/{brandId}/themes/{themeId}/background-image", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadBrandThemeBackgroundImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the background image for your Theme Updates the background image for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageUploadResponse</returns>
        public async System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeBackgroundImageAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ImageUploadResponse> localVarResponse = await UploadBrandThemeBackgroundImageWithHttpInfoAsync(brandId, themeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the background image for your Theme Updates the background image for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ImageUploadResponse>> UploadBrandThemeBackgroundImageWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->UploadBrandThemeBackgroundImage");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->UploadBrandThemeBackgroundImage");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ImageUploadResponse>("/api/v1/brands/{brandId}/themes/{themeId}/background-image", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadBrandThemeBackgroundImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the favicon for your theme Updates the favicon for your theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        public ImageUploadResponse UploadBrandThemeFavicon(string brandId, string themeId)
        {
            Okta.Sdk.Client.ApiResponse<ImageUploadResponse> localVarResponse = UploadBrandThemeFaviconWithHttpInfo(brandId, themeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the favicon for your theme Updates the favicon for your theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        public Okta.Sdk.Client.ApiResponse<ImageUploadResponse> UploadBrandThemeFaviconWithHttpInfo(string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->UploadBrandThemeFavicon");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->UploadBrandThemeFavicon");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ImageUploadResponse>("/api/v1/brands/{brandId}/themes/{themeId}/favicon", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadBrandThemeFavicon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the favicon for your theme Updates the favicon for your theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageUploadResponse</returns>
        public async System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeFaviconAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ImageUploadResponse> localVarResponse = await UploadBrandThemeFaviconWithHttpInfoAsync(brandId, themeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the favicon for your theme Updates the favicon for your theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ImageUploadResponse>> UploadBrandThemeFaviconWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->UploadBrandThemeFavicon");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->UploadBrandThemeFavicon");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ImageUploadResponse>("/api/v1/brands/{brandId}/themes/{themeId}/favicon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadBrandThemeFavicon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a themes logo Updates the logo for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        public ImageUploadResponse UploadBrandThemeLogo(string brandId, string themeId)
        {
            Okta.Sdk.Client.ApiResponse<ImageUploadResponse> localVarResponse = UploadBrandThemeLogoWithHttpInfo(brandId, themeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a themes logo Updates the logo for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        public Okta.Sdk.Client.ApiResponse<ImageUploadResponse> UploadBrandThemeLogoWithHttpInfo(string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->UploadBrandThemeLogo");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->UploadBrandThemeLogo");
            }

            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ImageUploadResponse>("/api/v1/brands/{brandId}/themes/{themeId}/logo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadBrandThemeLogo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a themes logo Updates the logo for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageUploadResponse</returns>
        public async System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeLogoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Okta.Sdk.Client.ApiResponse<ImageUploadResponse> localVarResponse = await UploadBrandThemeLogoWithHttpInfoAsync(brandId, themeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a themes logo Updates the logo for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<ImageUploadResponse>> UploadBrandThemeLogoWithHttpInfoAsync(string brandId, string themeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'brandId' when calling CustomizationApi->UploadBrandThemeLogo");
            }

            // verify the required parameter 'themeId' is set
            if (themeId == null)
            {
                throw new Okta.Sdk.Client.ApiException(400, "Missing required parameter 'themeId' when calling CustomizationApi->UploadBrandThemeLogo");
            }


            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("brandId", Okta.Sdk.Client.ClientUtils.ParameterToString(brandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("themeId", Okta.Sdk.Client.ClientUtils.ParameterToString(themeId)); // path parameter

            // authentication (API Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (OAuth 2.0) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ImageUploadResponse>("/api/v1/brands/{brandId}/themes/{themeId}/logo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadBrandThemeLogo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
