// <copyright file="{{memberName}}Client.Generated.cs" company="Okta, Inc">
// Copyright (c) 2014 - present Okta, Inc. All rights reserved.
// Licensed under the Apache 2.0 license. See the LICENSE file in the project root for full license information.
// </copyright>

// This file was automatically generated. Don't modify it directly.

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Okta.Sdk.Configuration;
using Okta.Sdk.Internal;

namespace Okta.Sdk
{
    /// <inheritdoc/>
    public sealed partial class {{memberName}}Client : OktaClient, I{{memberName}}Client
    {
        // Remove parameterless constructor
        private {{memberName}}Client()
        {
        }

        internal {{memberName}}Client(IDataStore dataStore, OktaClientConfiguration configuration, RequestContext requestContext)
            : base(dataStore, configuration, requestContext)
        {
        }
        
        {{#each operations}}
        /// <inheritdoc />
        public {{#unless isCollection}}async {{/unless}}{{{returnType.literal}}} {{memberName}}(
            {{~#if bodyModel}}{{bodyModel.type.memberName}} {{bodyModel.parameterName}}, {{/if}}
            {{~nbsp 0}}{{{methodSignatureLiteral}}})
            {{#if isCollection}}=> GetCollectionClient<I{{returnType.memberName}}>(new HttpRequest
            {
                Uri = "{{{path}}}",
                {{#if bodyModel}}Payload = {{bodyModel.parameterName}},{{/if}}
                {{#if pathParameters}}
                PathParameters = new Dictionary<string, object>()
                {
                    {{#each pathParameters}}
                    ["{{name}}"] = {{name}},
                    {{/each}}
                },
                {{/if}}
                {{#if queryParameters}}
                QueryParameters = new Dictionary<string, object>()
                {
                    {{#each queryParameters}}
                    ["{{name}}"] = {{name}},
                    {{/each}}
                },
                {{/if}}
            });
            {{else}}=> await {{httpMethod.memberName}}{{#if returnType.memberName}}<{{returnType.memberName}}>{{/if}}(new HttpRequest
            {
                Uri = "{{{path}}}",
                {{#if bodyModel}}Payload = {{bodyModel.parameterName}},{{/if}}
                {{#if pathParameters}}
                PathParameters = new Dictionary<string, object>()
                {
                    {{#each pathParameters}}
                    ["{{name}}"] = {{name}},
                    {{/each}}
                },
                {{/if}}
                {{#if queryParameters}}
                QueryParameters = new Dictionary<string, object>()
                {
                    {{#each queryParameters}}
                    ["{{name}}"] = {{name}},
                    {{/each}}
                },
                {{/if}}
                }, cancellationToken).ConfigureAwait(false);
            {{/if}}
        
        {{/each}}
    }
}
